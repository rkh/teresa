<?xml version="1.0" encoding="UTF-8"?>
<testsuite tests="2316" failures="0" errors="0" time="1.633431" timestamp="2013-09-13T16:59:24+02:00">
  <properties/>
  <testcase classname="spec.expander_spec" name="Mustermann::Expander expands a pattern" time="0.008653"/>
  <testcase classname="spec.expander_spec" name="Mustermann::Expander expands multiple patterns" time="0.004663"/>
  <testcase classname="spec.expander_spec" name="Mustermann::Expander supports setting pattern options" time="0.006341"/>
  <testcase classname="spec.expander_spec" name="Mustermann::Expander supports combining different pattern styles" time="0.002589"/>
  <testcase classname="spec.expander_spec" name="Mustermann::Expander ignores nil values" time="0.004622"/>
  <testcase classname="spec.expander_spec" name="Mustermann::Expander additional_values illegal value should raise ArgumentError" time="0.001656"/>
  <testcase classname="spec.expander_spec" name="Mustermann::Expander additional_values illegal value should raise ArgumentError" time="0.000470"/>
  <testcase classname="spec.expander_spec" name="Mustermann::Expander additional_values raise should be == /a" time="0.000835"/>
  <testcase classname="spec.expander_spec" name="Mustermann::Expander additional_values raise should raise Mustermann::ExpandError" time="0.001516"/>
  <testcase classname="spec.expander_spec" name="Mustermann::Expander additional_values raise should raise Mustermann::ExpandError" time="0.000417"/>
  <testcase classname="spec.expander_spec" name="Mustermann::Expander additional_values ignore should be == /a" time="0.000384"/>
  <testcase classname="spec.expander_spec" name="Mustermann::Expander additional_values ignore should be == /a" time="0.000456"/>
  <testcase classname="spec.expander_spec" name="Mustermann::Expander additional_values ignore should raise Mustermann::ExpandError" time="0.000360"/>
  <testcase classname="spec.expander_spec" name="Mustermann::Expander additional_values append should be == /a" time="0.000316"/>
  <testcase classname="spec.expander_spec" name="Mustermann::Expander additional_values append should be == /a?b=b" time="0.000376"/>
  <testcase classname="spec.expander_spec" name="Mustermann::Expander additional_values append should raise Mustermann::ExpandError" time="0.000344"/>
  <testcase classname="spec.expander_spec" name="Mustermann::Expander cast should be == /FOOBAR" time="0.001083"/>
  <testcase classname="spec.expander_spec" name="Mustermann::Expander cast should be == /FOO" time="0.000375"/>
  <testcase classname="spec.expander_spec" name="Mustermann::Expander cast should be == /FOO/BAR" time="0.000408"/>
  <testcase classname="spec.expander_spec" name="Mustermann::Expander cast should be == /FOO/bar" time="0.000409"/>
  <testcase classname="spec.expander_spec" name="Mustermann::Expander cast should be == /FOO/BAR" time="0.000391"/>
  <testcase classname="spec.expander_spec" name="Mustermann::Expander cast should be == /foo/b 42" time="0.000406"/>
  <testcase classname="spec.expander_spec" name="Mustermann::Expander cast should be == /FOO/bar" time="0.000413"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension sets up the extension" time="0.002291"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension uses Sinatra-style patterns by default should be == foo" time="0.038267"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension uses Sinatra-style patterns by default should be == foo." time="0.002735"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension uses Sinatra-style patterns by default should be == foo" time="0.002273"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension uses Sinatra-style patterns by default should be == a b" time="0.002416"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension except should be ok" time="0.003997"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension except should not be ok" time="0.002415"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension capture global should be == foo.bar" time="0.008333"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension capture global should be == foo" time="0.002495"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension capture route local should be ok" time="0.038509"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension capture route local should not be ok" time="0.002693"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension capture global and route local global is a hash should be == a" time="0.010390"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension capture global and route local global is a hash should be == a" time="0.002925"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension capture global and route local global is a hash should be == b" time="0.004432"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension capture global and route local global is a hash should be == c" time="0.004654"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension capture global and route local global is not a hash should be ok" time="0.007978"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension capture global and route local global is not a hash should not be ok" time="0.002955"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension capture global and route local global is not a hash should be ok" time="0.004539"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension capture global and route local global is not a hash should be == 20" time="0.002761"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension capture global and route local global is not a hash should be == 42" time="0.002544"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension capture global and route local global is not a hash should be == ok" time="0.002512"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension pattern except should be ok" time="0.002287"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension pattern except should not be ok" time="0.002382"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension pattern capture route local should be ok" time="0.002514"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension pattern capture route local should not be ok" time="0.002835"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension pattern capture global and route local global is a hash should be == a" time="0.002942"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension pattern capture global and route local global is a hash should be == a" time="0.002941"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension pattern capture global and route local global is a hash should be == b" time="0.002946"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension pattern capture global and route local global is a hash should be == c" time="0.003371"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension pattern capture global and route local global is not a hash should be ok" time="0.003087"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension pattern capture global and route local global is not a hash should not be ok" time="0.002777"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension pattern capture global and route local global is not a hash should be ok" time="0.002598"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension pattern capture global and route local global is not a hash should be == 20" time="0.002615"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension pattern capture global and route local global is not a hash should be == 42" time="0.037953"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension pattern capture global and route local global is not a hash should be == ok" time="0.002900"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension pattern greedy default should be == foo" time="0.006469"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension pattern greedy default should be == foo.bar" time="0.002528"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension pattern greedy enabled should be == foo" time="0.006496"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension pattern greedy enabled should be == foo.bar" time="0.002500"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension pattern greedy disabled should be == foo" time="0.006130"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension pattern greedy disabled should be == foo" time="0.002359"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension pattern greedy global should be == foo" time="0.002554"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension pattern greedy global should be == foo" time="0.002404"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension pattern space_matches_plus default should be ok" time="0.004899"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension pattern space_matches_plus default should be ok" time="0.002158"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension pattern space_matches_plus enabled should be ok" time="0.004848"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension pattern space_matches_plus enabled should be ok" time="0.002267"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension pattern space_matches_plus disabled should be ok" time="0.004951"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension pattern space_matches_plus disabled should not be ok" time="0.002457"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension pattern space_matches_plus global should be ok" time="0.002210"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension pattern space_matches_plus global should not be ok" time="0.002186"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension pattern uri_decode default should be ok" time="0.004764"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension pattern uri_decode default should be ok" time="0.002266"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension pattern uri_decode enabled should be ok" time="0.004464"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension pattern uri_decode enabled should be ok" time="0.002308"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension pattern uri_decode disabled should be ok" time="0.002671"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension pattern uri_decode disabled should not be ok" time="0.002322"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension pattern uri_decode global should be ok" time="0.002515"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension pattern uri_decode global should not be ok" time="0.002354"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension type identity should be ok" time="0.004772"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension type identity should not be ok" time="0.002322"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension type rails should be == foo" time="0.006633"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension type rails should be == foo." time="0.002385"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension type rails should be == foo" time="0.038745"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension type rails should be == a b" time="0.002601"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension type shell should be ok" time="0.004705"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension type shell should be ok" time="0.002384"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension type simple should be ok" time="0.002962"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension type simple should not be ok" time="0.002344"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension type simple should be ok" time="0.007796"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension type simple should not be ok" time="0.002376"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension type simple should be == [&quot;a&quot;] &quot;png&quot;" time="0.002239"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension type simple should be == [&quot;a&quot;, &quot;b&quot;] &quot;png&quot;" time="0.002285"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension works with filters should be == auth required" time="0.005166"/>
  <testcase classname="spec.extension_spec" name="Mustermann::Extension works with filters should be == please log in" time="0.002274"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Identity pattern &quot;&quot; string should be immune to external change" time="0.000106"/>
  <testcase classname="spec.identity_spec" name="Mustermann::Identity pattern &quot;&quot; should match &quot;&quot;" time="0.002020"/>
  <testcase classname="spec.identity_spec" name="Mustermann::Identity pattern &quot;&quot; should not match &quot;/&quot;" time="0.000368"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Identity pattern &quot;&quot; to_s should be == " time="0.000125"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Identity pattern &quot;&quot; inspect should be == #&lt;Mustermann::Identity:&quot;&quot;&gt;" time="0.000161"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Identity pattern &quot;&quot; names should be a kind of Array" time="0.000197"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Identity pattern &quot;/&quot; string should be immune to external change" time="0.000106"/>
  <testcase classname="spec.identity_spec" name="Mustermann::Identity pattern &quot;/&quot; should match &quot;/&quot;" time="0.001962"/>
  <testcase classname="spec.identity_spec" name="Mustermann::Identity pattern &quot;/&quot; should not match &quot;/foo&quot;" time="0.000362"/>
  <testcase classname="spec.identity_spec" name="Mustermann::Identity pattern &quot;/&quot; should be == {}" time="0.000109"/>
  <testcase classname="spec.identity_spec" name="Mustermann::Identity pattern &quot;/&quot; should be nil" time="0.000125"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Identity pattern &quot;/&quot; to_s should be == /" time="0.000132"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Identity pattern &quot;/&quot; inspect should be == #&lt;Mustermann::Identity:&quot;/&quot;&gt;" time="0.000147"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Identity pattern &quot;/&quot; names should be a kind of Array" time="0.000136"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Identity pattern &quot;/foo&quot; string should be immune to external change" time="0.000089"/>
  <testcase classname="spec.identity_spec" name="Mustermann::Identity pattern &quot;/foo&quot; should match &quot;/foo&quot;" time="0.002009"/>
  <testcase classname="spec.identity_spec" name="Mustermann::Identity pattern &quot;/foo&quot; should not match &quot;/bar&quot;" time="0.000357"/>
  <testcase classname="spec.identity_spec" name="Mustermann::Identity pattern &quot;/foo&quot; should not match &quot;/foo.bar&quot;" time="0.000348"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Identity pattern &quot;/foo&quot; to_s should be == /foo" time="0.000120"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Identity pattern &quot;/foo&quot; inspect should be == #&lt;Mustermann::Identity:&quot;/foo&quot;&gt;" time="0.000138"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Identity pattern &quot;/foo&quot; names should be a kind of Array" time="0.000134"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Identity pattern &quot;/foo/bar&quot; string should be immune to external change" time="0.000091"/>
  <testcase classname="spec.identity_spec" name="Mustermann::Identity pattern &quot;/foo/bar&quot; should match &quot;/foo/bar&quot;" time="0.002065"/>
  <testcase classname="spec.identity_spec" name="Mustermann::Identity pattern &quot;/foo/bar&quot; should match &quot;/foo%2Fbar&quot;" time="0.000372"/>
  <testcase classname="spec.identity_spec" name="Mustermann::Identity pattern &quot;/foo/bar&quot; should match &quot;/foo%2fbar&quot;" time="0.000350"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Identity pattern &quot;/foo/bar&quot; to_s should be == /foo/bar" time="0.000122"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Identity pattern &quot;/foo/bar&quot; inspect should be == #&lt;Mustermann::Identity:&quot;/foo/bar&quot;&gt;" time="0.000136"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Identity pattern &quot;/foo/bar&quot; names should be a kind of Array" time="0.000137"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Identity pattern &quot;/:foo&quot; string should be immune to external change" time="0.000092"/>
  <testcase classname="spec.identity_spec" name="Mustermann::Identity pattern &quot;/:foo&quot; should match &quot;/:foo&quot;" time="0.000345"/>
  <testcase classname="spec.identity_spec" name="Mustermann::Identity pattern &quot;/:foo&quot; should match &quot;/%3Afoo&quot;" time="0.000348"/>
  <testcase classname="spec.identity_spec" name="Mustermann::Identity pattern &quot;/:foo&quot; should not match &quot;/foo&quot;" time="0.000343"/>
  <testcase classname="spec.identity_spec" name="Mustermann::Identity pattern &quot;/:foo&quot; should not match &quot;/foo?&quot;" time="0.000343"/>
  <testcase classname="spec.identity_spec" name="Mustermann::Identity pattern &quot;/:foo&quot; should not match &quot;/foo/bar&quot;" time="0.000338"/>
  <testcase classname="spec.identity_spec" name="Mustermann::Identity pattern &quot;/:foo&quot; should not match &quot;/&quot;" time="0.000392"/>
  <testcase classname="spec.identity_spec" name="Mustermann::Identity pattern &quot;/:foo&quot; should not match &quot;/foo/&quot;" time="0.000339"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Identity pattern &quot;/:foo&quot; to_s should be == /:foo" time="0.000118"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Identity pattern &quot;/:foo&quot; inspect should be == #&lt;Mustermann::Identity:&quot;/:foo&quot;&gt;" time="0.000135"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Identity pattern &quot;/:foo&quot; names should be a kind of Array" time="0.000134"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Identity pattern &quot;/f\u00F6\u00F6&quot; string should be immune to external change" time="0.000089"/>
  <testcase classname="spec.identity_spec" name="Mustermann::Identity pattern &quot;/f\u00F6\u00F6&quot; should match &quot;/f%C3%B6%C3%B6&quot;" time="0.002007"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Identity pattern &quot;/f\u00F6\u00F6&quot; to_s should be == /föö" time="0.000122"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Identity pattern &quot;/f\u00F6\u00F6&quot; inspect should be == #&lt;Mustermann::Identity:&quot;/f\u00F6\u00F6&quot;&gt;" time="0.000159"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Identity pattern &quot;/f\u00F6\u00F6&quot; names should be a kind of Array" time="0.000137"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Identity pattern &quot;/test$/&quot; string should be immune to external change" time="0.000093"/>
  <testcase classname="spec.identity_spec" name="Mustermann::Identity pattern &quot;/test$/&quot; should match &quot;/test$/&quot;" time="0.001946"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Identity pattern &quot;/test$/&quot; to_s should be == /test$/" time="0.000124"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Identity pattern &quot;/test$/&quot; inspect should be == #&lt;Mustermann::Identity:&quot;/test$/&quot;&gt;" time="0.000141"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Identity pattern &quot;/test$/&quot; names should be a kind of Array" time="0.000137"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Identity pattern &quot;/te+st/&quot; string should be immune to external change" time="0.000100"/>
  <testcase classname="spec.identity_spec" name="Mustermann::Identity pattern &quot;/te+st/&quot; should match &quot;/te+st/&quot;" time="0.001996"/>
  <testcase classname="spec.identity_spec" name="Mustermann::Identity pattern &quot;/te+st/&quot; should not match &quot;/test/&quot;" time="0.000385"/>
  <testcase classname="spec.identity_spec" name="Mustermann::Identity pattern &quot;/te+st/&quot; should not match &quot;/teest/&quot;" time="0.000376"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Identity pattern &quot;/te+st/&quot; to_s should be == /te+st/" time="0.000122"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Identity pattern &quot;/te+st/&quot; inspect should be == #&lt;Mustermann::Identity:&quot;/te+st/&quot;&gt;" time="0.000138"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Identity pattern &quot;/te+st/&quot; names should be a kind of Array" time="0.000136"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Identity pattern &quot;/path with spaces&quot; string should be immune to external change" time="0.000091"/>
  <testcase classname="spec.identity_spec" name="Mustermann::Identity pattern &quot;/path with spaces&quot; should match &quot;/path%20with%20spaces&quot;" time="0.002118"/>
  <testcase classname="spec.identity_spec" name="Mustermann::Identity pattern &quot;/path with spaces&quot; should not match &quot;/path%2Bwith%2Bspaces&quot;" time="0.000409"/>
  <testcase classname="spec.identity_spec" name="Mustermann::Identity pattern &quot;/path with spaces&quot; should not match &quot;/path+with+spaces&quot;" time="0.000346"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Identity pattern &quot;/path with spaces&quot; to_s should be == /path with spaces" time="0.000125"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Identity pattern &quot;/path with spaces&quot; inspect should be == #&lt;Mustermann::Identity:&quot;/path with spaces&quot;&gt;" time="0.000138"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Identity pattern &quot;/path with spaces&quot; names should be a kind of Array" time="0.000136"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Identity pattern &quot;/foo&amp;bar&quot; string should be immune to external change" time="0.000091"/>
  <testcase classname="spec.identity_spec" name="Mustermann::Identity pattern &quot;/foo&amp;bar&quot; should match &quot;/foo&amp;bar&quot;" time="0.002027"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Identity pattern &quot;/foo&amp;bar&quot; to_s should be == /foo&amp;bar" time="0.000139"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Identity pattern &quot;/foo&amp;bar&quot; inspect should be == #&lt;Mustermann::Identity:&quot;/foo&amp;bar&quot;&gt;" time="0.000152"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Identity pattern &quot;/foo&amp;bar&quot; names should be a kind of Array" time="0.000152"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Identity pattern &quot;/test.bar&quot; string should be immune to external change" time="0.000102"/>
  <testcase classname="spec.identity_spec" name="Mustermann::Identity pattern &quot;/test.bar&quot; should match &quot;/test.bar&quot;" time="0.002061"/>
  <testcase classname="spec.identity_spec" name="Mustermann::Identity pattern &quot;/test.bar&quot; should not match &quot;/test0bar&quot;" time="0.000359"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Identity pattern &quot;/test.bar&quot; to_s should be == /test.bar" time="0.000122"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Identity pattern &quot;/test.bar&quot; inspect should be == #&lt;Mustermann::Identity:&quot;/test.bar&quot;&gt;" time="0.000137"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Identity pattern &quot;/test.bar&quot; names should be a kind of Array" time="0.000139"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Identity pattern &quot;/foo/bar&quot; with options {:uri_decode=&gt;false} string should be immune to external change" time="0.000103"/>
  <testcase classname="spec.identity_spec" name="Mustermann::Identity pattern &quot;/foo/bar&quot; with options {:uri_decode=&gt;false} should match &quot;/foo/bar&quot;" time="0.000388"/>
  <testcase classname="spec.identity_spec" name="Mustermann::Identity pattern &quot;/foo/bar&quot; with options {:uri_decode=&gt;false} should not match &quot;/foo%2Fbar&quot;" time="0.000338"/>
  <testcase classname="spec.identity_spec" name="Mustermann::Identity pattern &quot;/foo/bar&quot; with options {:uri_decode=&gt;false} should not match &quot;/foo%2fbar&quot;" time="0.000337"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Identity pattern &quot;/foo/bar&quot; with options {:uri_decode=&gt;false} to_s should be == /foo/bar" time="0.000117"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Identity pattern &quot;/foo/bar&quot; with options {:uri_decode=&gt;false} inspect should be == #&lt;Mustermann::Identity:&quot;/foo/bar&quot;&gt;" time="0.000176"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Identity pattern &quot;/foo/bar&quot; with options {:uri_decode=&gt;false} names should be a kind of Array" time="0.000134"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Identity pattern &quot;/path with spaces&quot; with options {:uri_decode=&gt;false} string should be immune to external change" time="0.000088"/>
  <testcase classname="spec.identity_spec" name="Mustermann::Identity pattern &quot;/path with spaces&quot; with options {:uri_decode=&gt;false} should not match &quot;/path%20with%20spaces&quot;" time="0.000335"/>
  <testcase classname="spec.identity_spec" name="Mustermann::Identity pattern &quot;/path with spaces&quot; with options {:uri_decode=&gt;false} should not match &quot;/path%2Bwith%2Bspaces&quot;" time="0.000383"/>
  <testcase classname="spec.identity_spec" name="Mustermann::Identity pattern &quot;/path with spaces&quot; with options {:uri_decode=&gt;false} should not match &quot;/path+with+spaces&quot;" time="0.000331"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Identity pattern &quot;/path with spaces&quot; with options {:uri_decode=&gt;false} to_s should be == /path with spaces" time="0.000118"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Identity pattern &quot;/path with spaces&quot; with options {:uri_decode=&gt;false} inspect should be == #&lt;Mustermann::Identity:&quot;/path with spaces&quot;&gt;" time="0.000131"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Identity pattern &quot;/path with spaces&quot; with options {:uri_decode=&gt;false} names should be a kind of Array" time="0.000141"/>
  <testcase classname="spec.mustermann_spec" name="Mustermann new should be a kind of Mustermann::Sinatra" time="0.000147"/>
  <testcase classname="spec.mustermann_spec" name="Mustermann new should be a kind of Mustermann::Identity" time="0.000126"/>
  <testcase classname="spec.mustermann_spec" name="Mustermann new should be a kind of Mustermann::Rails" time="0.000124"/>
  <testcase classname="spec.mustermann_spec" name="Mustermann new should be a kind of Mustermann::Shell" time="0.000123"/>
  <testcase classname="spec.mustermann_spec" name="Mustermann new should be a kind of Mustermann::Sinatra" time="0.000120"/>
  <testcase classname="spec.mustermann_spec" name="Mustermann new should be a kind of Mustermann::Simple" time="0.000120"/>
  <testcase classname="spec.mustermann_spec" name="Mustermann new should be a kind of Mustermann::Template" time="0.000119"/>
  <testcase classname="spec.mustermann_spec" name="Mustermann new should raise ArgumentError with &quot;unsupported option :foo for Mustermann::Sinatra&quot;" time="0.000153"/>
  <testcase classname="spec.mustermann_spec" name="Mustermann new should raise ArgumentError with &quot;unsupported type :ast&quot;" time="0.000117"/>
  <testcase classname="spec.mustermann_spec" name="Mustermann [] should be == Mustermann::Identity" time="0.000104"/>
  <testcase classname="spec.mustermann_spec" name="Mustermann [] should be == Mustermann::Rails" time="0.000091"/>
  <testcase classname="spec.mustermann_spec" name="Mustermann [] should be == Mustermann::Shell" time="0.000090"/>
  <testcase classname="spec.mustermann_spec" name="Mustermann [] should be == Mustermann::Sinatra" time="0.000090"/>
  <testcase classname="spec.mustermann_spec" name="Mustermann [] should be == Mustermann::Simple" time="0.000104"/>
  <testcase classname="spec.mustermann_spec" name="Mustermann [] should be == Mustermann::Template" time="0.000100"/>
  <testcase classname="spec.mustermann_spec" name="Mustermann [] should raise ArgumentError with &quot;unsupported type :ast&quot;" time="0.000129"/>
  <testcase classname="spec.mustermann_spec" name="Mustermann extend_object special behavior for Sinatra only should be a kind of Mustermann" time="0.000125"/>
  <testcase classname="spec.mustermann_spec" name="Mustermann extend_object special behavior for Sinatra only should not be a kind of Mustermann::Extension" time="0.000116"/>
  <testcase classname="spec.mustermann_spec" name="Mustermann extend_object special behavior for Sinatra only should be a kind of Mustermann" time="0.000116"/>
  <testcase classname="spec.mustermann_spec" name="Mustermann extend_object special behavior for Sinatra only should not be a kind of Mustermann::Extension" time="0.000116"/>
  <testcase classname="spec.mustermann_spec" name="Mustermann extend_object special behavior for Sinatra only should not be a kind of Mustermann" time="0.001346"/>
  <testcase classname="spec.mustermann_spec" name="Mustermann extend_object special behavior for Sinatra only should be a kind of Mustermann::Extension" time="0.001118"/>
  <testcase classname="spec.pattern_spec" name="Mustermann::Pattern === raises a NotImplementedError when used directly" time="0.000178"/>
  <testcase classname="spec.pattern_spec" name="Mustermann::Pattern initialize raises an ArgumentError for unknown options" time="0.000133"/>
  <testcase classname="spec.pattern_spec" name="Mustermann::Pattern initialize does not complain about unknown options if ignore_unknown_options is enabled" time="0.000108"/>
  <testcase classname="spec.pattern_spec" name="Mustermann::Pattern expand should not respond to #expand" time="0.002602"/>
  <testcase classname="spec.pattern_spec" name="Mustermann::Pattern expand should raise NotImplementedError" time="0.000143"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;&quot; string should be immune to external change" time="0.000124"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;&quot; should match &quot;&quot;" time="0.000450"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;&quot; should not match &quot;/&quot;" time="0.000365"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;&quot; should expand" time="0.000566"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;&quot; should not expand {:a=&gt;1}" time="0.000416"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;&quot; to_s should be == " time="0.000126"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;&quot; inspect should be == #&lt;Mustermann::Rails:&quot;&quot;&gt;" time="0.000141"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;&quot; names should be a kind of Array" time="0.000149"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/&quot; string should be immune to external change" time="0.000094"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/&quot; should match &quot;/&quot;" time="0.000398"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/&quot; should not match &quot;/foo&quot;" time="0.000355"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/&quot; should expand" time="0.000602"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/&quot; should not expand {:a=&gt;1}" time="0.000400"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/&quot; to_s should be == /" time="0.000120"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/&quot; inspect should be == #&lt;Mustermann::Rails:&quot;/&quot;&gt;" time="0.000135"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/&quot; names should be a kind of Array" time="0.000136"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/foo&quot; string should be immune to external change" time="0.000093"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/foo&quot; should match &quot;/foo&quot;" time="0.000366"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/foo&quot; should not match &quot;/bar&quot;" time="0.000393"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/foo&quot; should not match &quot;/foo.bar&quot;" time="0.000532"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/foo&quot; should expand" time="0.000793"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/foo&quot; should not expand {:a=&gt;1}" time="0.000467"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/foo&quot; to_s should be == /foo" time="0.000124"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/foo&quot; inspect should be == #&lt;Mustermann::Rails:&quot;/foo&quot;&gt;" time="0.000138"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/foo&quot; names should be a kind of Array" time="0.000139"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/foo/bar&quot; string should be immune to external change" time="0.000092"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/foo/bar&quot; should match &quot;/foo/bar&quot;" time="0.000365"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/foo/bar&quot; should not match &quot;/foo%2Fbar&quot;" time="0.000341"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/foo/bar&quot; should not match &quot;/foo%2fbar&quot;" time="0.000340"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/foo/bar&quot; should expand" time="0.001123"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/foo/bar&quot; should not expand {:a=&gt;1}" time="0.000394"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/foo/bar&quot; to_s should be == /foo/bar" time="0.000123"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/foo/bar&quot; inspect should be == #&lt;Mustermann::Rails:&quot;/foo/bar&quot;&gt;" time="0.000138"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/foo/bar&quot; names should be a kind of Array" time="0.000136"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:foo&quot; string should be immune to external change" time="0.000091"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo&quot; should match &quot;/foo&quot;" time="0.000367"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo&quot; should match &quot;/bar&quot;" time="0.000344"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo&quot; should match &quot;/foo.bar&quot;" time="0.000338"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo&quot; should match &quot;/%0Afoo&quot;" time="0.000338"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo&quot; should match &quot;/foo%2Fbar&quot;" time="0.000338"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo&quot; should not match &quot;/foo?&quot;" time="0.000333"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo&quot; should not match &quot;/foo/bar&quot;" time="0.000345"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo&quot; should not match &quot;/&quot;" time="0.000339"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo&quot; should not match &quot;/foo/&quot;" time="0.000419"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo&quot; should be == {&quot;foo&quot;=&gt;&quot;foo&quot;}" time="0.001861"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo&quot; should be == {&quot;foo&quot;=&gt;&quot;f o&quot;}" time="0.000141"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo&quot; should be nil" time="0.000115"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo&quot; should expand {:foo=&gt;&quot;bar&quot;}" time="0.000777"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo&quot; should expand {:foo=&gt;&quot;b r&quot;}" time="0.039683"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo&quot; should expand {:foo=&gt;&quot;foo/bar&quot;}" time="0.000485"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo&quot; should not expand {:foo=&gt;&quot;foo&quot;, :bar=&gt;&quot;bar&quot;}" time="0.000447"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo&quot; should not expand {:bar=&gt;&quot;bar&quot;}" time="0.000404"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo&quot; should not expand" time="0.000375"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:foo&quot; to_s should be == /:foo" time="0.000142"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:foo&quot; inspect should be == #&lt;Mustermann::Rails:&quot;/:foo&quot;&gt;" time="0.000150"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:foo&quot; names should be a kind of Array" time="0.000153"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/f\u00F6\u00F6&quot; string should be immune to external change" time="0.000099"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/f\u00F6\u00F6&quot; should match &quot;/f%C3%B6%C3%B6&quot;" time="0.000367"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/f\u00F6\u00F6&quot; should expand" time="0.002668"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/f\u00F6\u00F6&quot; should not expand {:a=&gt;1}" time="0.000419"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/f\u00F6\u00F6&quot; to_s should be == /föö" time="0.000128"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/f\u00F6\u00F6&quot; inspect should be == #&lt;Mustermann::Rails:&quot;/f\u00F6\u00F6&quot;&gt;" time="0.000145"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/f\u00F6\u00F6&quot; names should be a kind of Array" time="0.000163"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:foo/:bar&quot; string should be immune to external change" time="0.000127"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo/:bar&quot; should match &quot;/foo/bar&quot;" time="0.000396"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo/:bar&quot; should match &quot;/foo.bar/bar.foo&quot;" time="0.000364"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo/:bar&quot; should match &quot;/user@example.com/name&quot;" time="0.000358"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo/:bar&quot; should match &quot;/10.1/te.st&quot;" time="0.000356"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo/:bar&quot; should match &quot;/10.1.2/te.st&quot;" time="0.000353"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo/:bar&quot; should not match &quot;/foo%2Fbar&quot;" time="0.000348"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo/:bar&quot; should not match &quot;/foo%2fbar&quot;" time="0.000353"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo/:bar&quot; should be == {&quot;foo&quot;=&gt;&quot;bar&quot;, &quot;bar&quot;=&gt;&quot;foo&quot;}" time="0.001820"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo/:bar&quot; should be nil" time="0.000122"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo/:bar&quot; should expand {:foo=&gt;&quot;foo&quot;, :bar=&gt;&quot;bar&quot;}" time="0.000992"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo/:bar&quot; should not expand {:foo=&gt;&quot;foo&quot;}" time="0.000416"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo/:bar&quot; should not expand {:bar=&gt;&quot;bar&quot;}" time="0.000408"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:foo/:bar&quot; to_s should be == /:foo/:bar" time="0.000128"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:foo/:bar&quot; inspect should be == #&lt;Mustermann::Rails:&quot;/:foo/:bar&quot;&gt;" time="0.000143"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:foo/:bar&quot; names should be a kind of Array" time="0.000141"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/hello/:person&quot; string should be immune to external change" time="0.000094"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/hello/:person&quot; should match &quot;/hello/Frank&quot;" time="0.000423"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/hello/:person&quot; should expand {:person=&gt;&quot;Frank&quot;}" time="0.001085"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/hello/:person&quot; should expand {:person=&gt;&quot;Frank?&quot;}" time="0.002276"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/hello/:person&quot; to_s should be == /hello/:person" time="0.000136"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/hello/:person&quot; inspect should be == #&lt;Mustermann::Rails:&quot;/hello/:person&quot;&gt;" time="0.000146"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/hello/:person&quot; names should be a kind of Array" time="0.000171"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/?:foo?/?:bar?&quot; string should be immune to external change" time="0.000096"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/?:foo?/?:bar?&quot; should match &quot;/?hello?/?world?&quot;" time="0.000450"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/?:foo?/?:bar?&quot; should not match &quot;/hello/world/&quot;" time="0.000360"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/?:foo?/?:bar?&quot; should expand {:foo=&gt;&quot;hello&quot;, :bar=&gt;&quot;world&quot;}" time="0.003066"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/?:foo?/?:bar?&quot; to_s should be == /?:foo?/?:bar?" time="0.000152"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/?:foo?/?:bar?&quot; inspect should be == #&lt;Mustermann::Rails:&quot;/?:foo?/?:bar?&quot;&gt;" time="0.000144"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/?:foo?/?:bar?&quot; names should be a kind of Array" time="0.000145"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:foo_bar&quot; string should be immune to external change" time="0.000096"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo_bar&quot; should match &quot;/hello&quot;" time="0.000393"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo_bar&quot; should expand {:foo_bar=&gt;&quot;hello&quot;}" time="0.000791"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:foo_bar&quot; to_s should be == /:foo bar" time="0.000129"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:foo_bar&quot; inspect should be == #&lt;Mustermann::Rails:&quot;/:foo bar&quot;&gt;" time="0.000144"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:foo_bar&quot; names should be a kind of Array" time="0.000140"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/*foo&quot; string should be immune to external change" time="0.000093"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/*foo&quot; should match &quot;/&quot;" time="0.000373"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/*foo&quot; should match &quot;/foo&quot;" time="0.000360"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/*foo&quot; should match &quot;/foo/bar&quot;" time="0.000353"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/*foo&quot; should expand" time="0.000723"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/*foo&quot; should expand {:foo=&gt;nil}" time="0.000430"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/*foo&quot; should expand {:foo=&gt;&quot;&quot;}" time="0.000386"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/*foo&quot; should expand {:foo=&gt;&quot;foo&quot;}" time="0.000385"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/*foo&quot; should expand {:foo=&gt;&quot;foo/bar&quot;}" time="0.002036"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/*foo&quot; should expand {:foo=&gt;&quot;foo.bar&quot;}" time="0.000439"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/*foo&quot; to_s should be == /*foo" time="0.000128"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/*foo&quot; inspect should be == #&lt;Mustermann::Rails:&quot;/*foo&quot;&gt;" time="0.000144"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/*foo&quot; names should be a kind of Array" time="0.000143"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:foo/*bar&quot; string should be immune to external change" time="0.000096"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo/*bar&quot; should match &quot;/foo/bar/baz&quot;" time="0.000386"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo/*bar&quot; should match &quot;/foo%2Fbar/baz&quot;" time="0.000356"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo/*bar&quot; should match &quot;/foo/&quot;" time="0.000356"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo/*bar&quot; should match &quot;/h%20w/h%20a%20y&quot;" time="0.000388"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo/*bar&quot; should not match &quot;/foo&quot;" time="0.000360"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo/*bar&quot; should expand {:foo=&gt;&quot;foo&quot;}" time="0.000919"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo/*bar&quot; should expand {:foo=&gt;&quot;foo&quot;, :bar=&gt;&quot;bar&quot;}" time="0.000395"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo/*bar&quot; should expand {:foo=&gt;&quot;foo&quot;, :bar=&gt;&quot;foo/bar&quot;}" time="0.002045"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo/*bar&quot; should expand {:foo=&gt;&quot;foo/bar&quot;, :bar=&gt;&quot;bar&quot;}" time="0.000467"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:foo/*bar&quot; to_s should be == /:foo/*bar" time="0.000129"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:foo/*bar&quot; inspect should be == #&lt;Mustermann::Rails:&quot;/:foo/*bar&quot;&gt;" time="0.000144"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:foo/*bar&quot; names should be a kind of Array" time="0.000151"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/test$/&quot; string should be immune to external change" time="0.000111"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/test$/&quot; should match &quot;/test$/&quot;" time="0.000362"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/test$/&quot; should expand" time="0.002777"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/test$/&quot; to_s should be == /test$/" time="0.000136"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/test$/&quot; inspect should be == #&lt;Mustermann::Rails:&quot;/test$/&quot;&gt;" time="0.000165"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/test$/&quot; names should be a kind of Array" time="0.000160"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/te+st/&quot; string should be immune to external change" time="0.000102"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/te+st/&quot; should match &quot;/te+st/&quot;" time="0.000424"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/te+st/&quot; should not match &quot;/test/&quot;" time="0.000354"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/te+st/&quot; should not match &quot;/teest/&quot;" time="0.000349"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/te+st/&quot; should expand" time="0.002631"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/te+st/&quot; to_s should be == /te+st/" time="0.000128"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/te+st/&quot; inspect should be == #&lt;Mustermann::Rails:&quot;/te+st/&quot;&gt;" time="0.000143"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/te+st/&quot; names should be a kind of Array" time="0.000142"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/path with spaces&quot; string should be immune to external change" time="0.000094"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/path with spaces&quot; should match &quot;/path%20with%20spaces&quot;" time="0.000387"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/path with spaces&quot; should match &quot;/path%2Bwith%2Bspaces&quot;" time="0.000346"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/path with spaces&quot; should match &quot;/path+with+spaces&quot;" time="0.000380"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/path with spaces&quot; should expand" time="0.003394"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/path with spaces&quot; to_s should be == /path with spaces" time="0.000142"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/path with spaces&quot; inspect should be == #&lt;Mustermann::Rails:&quot;/path with spaces&quot;&gt;" time="0.000145"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/path with spaces&quot; names should be a kind of Array" time="0.000143"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/foo&amp;bar&quot; string should be immune to external change" time="0.000095"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/foo&amp;bar&quot; should match &quot;/foo&amp;bar&quot;" time="0.000376"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/foo&amp;bar&quot; to_s should be == /foo&amp;bar" time="0.000118"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/foo&amp;bar&quot; inspect should be == #&lt;Mustermann::Rails:&quot;/foo&amp;bar&quot;&gt;" time="0.000136"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/foo&amp;bar&quot; names should be a kind of Array" time="0.000137"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/*a/:foo/*b/*c&quot; string should be immune to external change" time="0.000089"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/*a/:foo/*b/*c&quot; should match &quot;/bar/foo/bling/baz/boom&quot;" time="0.000379"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/*a/:foo/*b/*c&quot; should be == {&quot;a&quot;=&gt;&quot;bar&quot;, &quot;foo&quot;=&gt;&quot;foo&quot;, &quot;b&quot;=&gt;&quot;bling&quot;, &quot;c&quot;=&gt;&quot;baz/boom&quot;}" time="0.001770"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/*a/:foo/*b/*c&quot; should expand {:a=&gt;&quot;bar&quot;, :foo=&gt;&quot;foo&quot;, :b=&gt;&quot;bling&quot;, :c=&gt;&quot;baz/boom&quot;}" time="0.002970"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/*a/:foo/*b/*c&quot; to_s should be == /*a/:foo/*b/*c" time="0.000128"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/*a/:foo/*b/*c&quot; inspect should be == #&lt;Mustermann::Rails:&quot;/*a/:foo/*b/*c&quot;&gt;" time="0.000141"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/*a/:foo/*b/*c&quot; names should be a kind of Array" time="0.000142"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/test.bar&quot; string should be immune to external change" time="0.000106"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/test.bar&quot; should match &quot;/test.bar&quot;" time="0.000430"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/test.bar&quot; should not match &quot;/test0bar&quot;" time="0.000395"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/test.bar&quot; to_s should be == /test.bar" time="0.000131"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/test.bar&quot; inspect should be == #&lt;Mustermann::Rails:&quot;/test.bar&quot;&gt;" time="0.000135"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/test.bar&quot; names should be a kind of Array" time="0.000136"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:file.:ext&quot; string should be immune to external change" time="0.000092"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:file.:ext&quot; should match &quot;/pony.jpg&quot;" time="0.000375"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:file.:ext&quot; should match &quot;/pony%2Ejpg&quot;" time="0.000355"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:file.:ext&quot; should match &quot;/pony%2ejpg&quot;" time="0.000349"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:file.:ext&quot; should match &quot;/pony%E6%AD%A3%2Ejpg&quot;" time="0.000347"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:file.:ext&quot; should match &quot;/pony%e6%ad%a3%2ejpg&quot;" time="0.000344"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:file.:ext&quot; should match &quot;/pony\u6B63%2Ejpg&quot;" time="0.000347"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:file.:ext&quot; should match &quot;/pony\u6B63%2ejpg&quot;" time="0.000345"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:file.:ext&quot; should match &quot;/pony\u6B63..jpg&quot;" time="0.000433"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:file.:ext&quot; should not match &quot;/.jpg&quot;" time="0.000347"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:file.:ext&quot; should expand {:file=&gt;&quot;pony&quot;, :ext=&gt;&quot;jpg&quot;}" time="0.002771"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:file.:ext&quot; to_s should be == /:file.:ext" time="0.000132"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:file.:ext&quot; inspect should be == #&lt;Mustermann::Rails:&quot;/:file.:ext&quot;&gt;" time="0.000142"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:file.:ext&quot; names should be a kind of Array" time="0.000145"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:a(x)&quot; string should be immune to external change" time="0.000094"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:a(x)&quot; should match &quot;/a&quot;" time="0.000373"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:a(x)&quot; should match &quot;/xa&quot;" time="0.000390"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:a(x)&quot; should match &quot;/axa&quot;" time="0.000348"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:a(x)&quot; should match &quot;/ax&quot;" time="0.000343"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:a(x)&quot; should match &quot;/axax&quot;" time="0.000343"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:a(x)&quot; should match &quot;/axaxx&quot;" time="0.000343"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:a(x)&quot; should expand {:a=&gt;&quot;x&quot;}" time="0.000955"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:a(x)&quot; should expand {:a=&gt;&quot;a&quot;}" time="0.000389"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:a(x)&quot; to_s should be == /:a(x)" time="0.000120"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:a(x)&quot; inspect should be == #&lt;Mustermann::Rails:&quot;/:a(x)&quot;&gt;" time="0.000138"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:a(x)&quot; names should be a kind of Array" time="0.000137"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:user(@:host)&quot; string should be immune to external change" time="0.000102"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:user(@:host)&quot; should match &quot;/foo@bar&quot;" time="0.000473"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:user(@:host)&quot; should match &quot;/foo.foo@bar&quot;" time="0.000351"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:user(@:host)&quot; should match &quot;/foo@bar.bar&quot;" time="0.000356"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:user(@:host)&quot; should expand {:user=&gt;&quot;foo&quot;}" time="0.002909"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:user(@:host)&quot; should expand {:user=&gt;&quot;foo&quot;, :host=&gt;&quot;bar&quot;}" time="0.000532"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:user(@:host)&quot; to_s should be == /:user(@:host)" time="0.000131"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:user(@:host)&quot; inspect should be == #&lt;Mustermann::Rails:&quot;/:user(@:host)&quot;&gt;" time="0.000171"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:user(@:host)&quot; names should be a kind of Array" time="0.000161"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:file(.:ext)&quot; string should be immune to external change" time="0.000105"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:file(.:ext)&quot; should match &quot;/pony&quot;" time="0.000390"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:file(.:ext)&quot; should match &quot;/pony.jpg&quot;" time="0.000356"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:file(.:ext)&quot; should match &quot;/pony%2Ejpg&quot;" time="0.000363"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:file(.:ext)&quot; should match &quot;/pony%2ejpg&quot;" time="0.000378"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:file(.:ext)&quot; should match &quot;/pony.png.jpg&quot;" time="0.000404"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:file(.:ext)&quot; should match &quot;/pony.&quot;" time="0.000425"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:file(.:ext)&quot; should not match &quot;/.jpg&quot;" time="0.000393"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:file(.:ext)&quot; should expand {:file=&gt;&quot;pony&quot;}" time="0.003163"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:file(.:ext)&quot; should expand {:file=&gt;&quot;pony&quot;, :ext=&gt;&quot;jpg&quot;}" time="0.000436"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:file(.:ext)&quot; to_s should be == /:file(.:ext)" time="0.000139"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:file(.:ext)&quot; inspect should be == #&lt;Mustermann::Rails:&quot;/:file(.:ext)&quot;&gt;" time="0.000145"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:file(.:ext)&quot; names should be a kind of Array" time="0.000148"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:id/test.bar&quot; string should be immune to external change" time="0.000095"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:id/test.bar&quot; should match &quot;/3/test.bar&quot;" time="0.000388"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:id/test.bar&quot; should match &quot;/2/test.bar&quot;" time="0.000350"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:id/test.bar&quot; should match &quot;/2E/test.bar&quot;" time="0.000349"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:id/test.bar&quot; should match &quot;/2e/test.bar&quot;" time="0.000365"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:id/test.bar&quot; should match &quot;/%2E/test.bar&quot;" time="0.000378"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:id/test.bar&quot; to_s should be == /:id/test.bar" time="0.000120"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:id/test.bar&quot; inspect should be == #&lt;Mustermann::Rails:&quot;/:id/test.bar&quot;&gt;" time="0.000136"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:id/test.bar&quot; names should be a kind of Array" time="0.000138"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/10/:id&quot; string should be immune to external change" time="0.000091"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/10/:id&quot; should match &quot;/10/test&quot;" time="0.000371"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/10/:id&quot; should match &quot;/10/te.st&quot;" time="0.000344"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/10/:id&quot; to_s should be == /10/:id" time="0.000119"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/10/:id&quot; inspect should be == #&lt;Mustermann::Rails:&quot;/10/:id&quot;&gt;" time="0.000136"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/10/:id&quot; names should be a kind of Array" time="0.000163"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/10.1/:id&quot; string should be immune to external change" time="0.000103"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/10.1/:id&quot; should match &quot;/10.1/test&quot;" time="0.000377"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/10.1/:id&quot; should match &quot;/10.1/te.st&quot;" time="0.000347"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/10.1/:id&quot; to_s should be == /10.1/:id" time="0.000131"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/10.1/:id&quot; inspect should be == #&lt;Mustermann::Rails:&quot;/10.1/:id&quot;&gt;" time="0.000157"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/10.1/:id&quot; names should be a kind of Array" time="0.000134"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:foo.:bar/:id&quot; string should be immune to external change" time="0.000090"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo.:bar/:id&quot; should match &quot;/10.1/te.st&quot;" time="0.000388"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo.:bar/:id&quot; should match &quot;/10.1.2/te.st&quot;" time="0.000377"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:foo.:bar/:id&quot; to_s should be == /:foo.:bar/:id" time="0.000118"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:foo.:bar/:id&quot; inspect should be == #&lt;Mustermann::Rails:&quot;/:foo.:bar/:id&quot;&gt;" time="0.000134"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:foo.:bar/:id&quot; names should be a kind of Array" time="0.000134"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:a/:b(.)(:c)&quot; string should be immune to external change" time="0.000092"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:a/:b(.)(:c)&quot; should match &quot;/a/b&quot;" time="0.000381"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:a/:b(.)(:c)&quot; should match &quot;/a/b.c&quot;" time="0.000394"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:a/:b(.)(:c)&quot; should match &quot;/a.b/c&quot;" time="0.000413"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:a/:b(.)(:c)&quot; should match &quot;/a.b/c.d&quot;" time="0.000349"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:a/:b(.)(:c)&quot; should not match &quot;/a.b/c.d/e&quot;" time="0.000358"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:a/:b(.)(:c)&quot; should expand {:a=&gt;&quot;a&quot;, :b=&gt;&quot;b&quot;}" time="0.003116"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:a/:b(.)(:c)&quot; should expand {:a=&gt;&quot;a&quot;, :b=&gt;&quot;b&quot;, :c=&gt;&quot;c&quot;}" time="0.000453"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:a/:b(.)(:c)&quot; to_s should be == /:a/:b(.)(:c)" time="0.000131"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:a/:b(.)(:c)&quot; inspect should be == #&lt;Mustermann::Rails:&quot;/:a/:b(.)(:c)&quot;&gt;" time="0.000169"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:a/:b(.)(:c)&quot; names should be a kind of Array" time="0.000142"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:a(foo:b)&quot; string should be immune to external change" time="0.000093"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:a(foo:b)&quot; should match &quot;/barfoobar&quot;" time="0.000414"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:a(foo:b)&quot; should match &quot;/barfoobarfoobar&quot;" time="0.000388"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:a(foo:b)&quot; should match &quot;/bar&quot;" time="0.000344"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:a(foo:b)&quot; should not match &quot;/&quot;" time="0.000337"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:a(foo:b)&quot; should expand {:a=&gt;&quot;a&quot;}" time="0.001140"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:a(foo:b)&quot; should expand {:a=&gt;&quot;a&quot;, :b=&gt;&quot;b&quot;}" time="0.000403"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:a(foo:b)&quot; to_s should be == /:a(foo:b)" time="0.000126"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:a(foo:b)&quot; inspect should be == #&lt;Mustermann::Rails:&quot;/:a(foo:b)&quot;&gt;" time="0.037353"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:a(foo:b)&quot; names should be a kind of Array" time="0.000240"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/fo(o)&quot; string should be immune to external change" time="0.000113"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/fo(o)&quot; should match &quot;/fo&quot;" time="0.000492"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/fo(o)&quot; should match &quot;/foo&quot;" time="0.000381"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/fo(o)&quot; should not match &quot;&quot;" time="0.000404"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/fo(o)&quot; should not match &quot;/&quot;" time="0.000397"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/fo(o)&quot; should not match &quot;/f&quot;" time="0.000398"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/fo(o)&quot; should not match &quot;/fooo&quot;" time="0.000369"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/fo(o)&quot; should expand" time="0.001030"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/fo(o)&quot; to_s should be == /fo(o)" time="0.000138"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/fo(o)&quot; inspect should be == #&lt;Mustermann::Rails:&quot;/fo(o)&quot;&gt;" time="0.000150"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/fo(o)&quot; names should be a kind of Array" time="0.000151"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/foo?&quot; string should be immune to external change" time="0.000098"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/foo?&quot; should match &quot;/foo?&quot;" time="0.000430"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/foo?&quot; should not match &quot;/foo\\?&quot;" time="0.000408"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/foo?&quot; should not match &quot;/fo&quot;" time="0.000356"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/foo?&quot; should not match &quot;/foo&quot;" time="0.000398"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/foo?&quot; should not match &quot;&quot;" time="0.000396"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/foo?&quot; should not match &quot;/&quot;" time="0.000351"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/foo?&quot; should not match &quot;/f&quot;" time="0.000355"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/foo?&quot; should not match &quot;/fooo&quot;" time="0.000406"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/foo?&quot; should expand" time="0.002940"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/foo?&quot; to_s should be == /foo?" time="0.000153"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/foo?&quot; inspect should be == #&lt;Mustermann::Rails:&quot;/foo?&quot;&gt;" time="0.000154"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/foo?&quot; names should be a kind of Array" time="0.000159"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:fOO&quot; string should be immune to external change" time="0.000099"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:fOO&quot; should match &quot;/a&quot;" time="0.000412"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:fOO&quot; to_s should be == /:fOO" time="0.000124"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:fOO&quot; inspect should be == #&lt;Mustermann::Rails:&quot;/:fOO&quot;&gt;" time="0.000142"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:fOO&quot; names should be a kind of Array" time="0.000145"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:_X&quot; string should be immune to external change" time="0.000093"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:_X&quot; should match &quot;/a&quot;" time="0.000382"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:_X&quot; to_s should be == /: X" time="0.000122"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:_X&quot; inspect should be == #&lt;Mustermann::Rails:&quot;/: X&quot;&gt;" time="0.000142"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:_X&quot; names should be a kind of Array" time="0.000136"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:f00&quot; string should be immune to external change" time="0.000092"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:f00&quot; should match &quot;/a&quot;" time="0.000374"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:f00&quot; to_s should be == /:f00" time="0.000118"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:f00&quot; inspect should be == #&lt;Mustermann::Rails:&quot;/:f00&quot;&gt;" time="0.000132"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:f00&quot; names should be a kind of Array" time="0.000150"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:foo(/:bar)/:baz&quot; string should be immune to external change" time="0.000090"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo(/:bar)/:baz&quot; should match &quot;/foo/bar/baz&quot;" time="0.000447"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo(/:bar)/:baz&quot; should expand {:foo=&gt;&quot;a&quot;, :baz=&gt;&quot;b&quot;}" time="0.001350"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo(/:bar)/:baz&quot; should expand {:foo=&gt;&quot;a&quot;, :baz=&gt;&quot;b&quot;, :bar=&gt;&quot;x&quot;}" time="0.000489"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:foo(/:bar)/:baz&quot; to_s should be == /:foo(/:bar)/:baz" time="0.000151"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:foo(/:bar)/:baz&quot; inspect should be == #&lt;Mustermann::Rails:&quot;/:foo(/:bar)/:baz&quot;&gt;" time="0.000146"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:foo(/:bar)/:baz&quot; names should be a kind of Array" time="0.000173"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:foo&quot; with options {:capture=&gt;/\d+/} string should be immune to external change" time="0.000104"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo&quot; with options {:capture=&gt;/\d+/} should match &quot;/1&quot;" time="0.000391"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo&quot; with options {:capture=&gt;/\d+/} should match &quot;/123&quot;" time="0.000362"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo&quot; with options {:capture=&gt;/\d+/} should not match &quot;/&quot;" time="0.000373"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo&quot; with options {:capture=&gt;/\d+/} should not match &quot;/foo&quot;" time="0.000388"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:foo&quot; with options {:capture=&gt;/\d+/} to_s should be == /:foo" time="0.000122"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:foo&quot; with options {:capture=&gt;/\d+/} inspect should be == #&lt;Mustermann::Rails:&quot;/:foo&quot;&gt;" time="0.000137"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:foo&quot; with options {:capture=&gt;/\d+/} names should be a kind of Array" time="0.000140"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:foo&quot; with options {:capture=&gt;/\d+/} string should be immune to external change" time="0.000093"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo&quot; with options {:capture=&gt;/\d+/} should match &quot;/1&quot;" time="0.000368"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo&quot; with options {:capture=&gt;/\d+/} should match &quot;/123&quot;" time="0.000356"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo&quot; with options {:capture=&gt;/\d+/} should not match &quot;/&quot;" time="0.000357"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo&quot; with options {:capture=&gt;/\d+/} should not match &quot;/foo&quot;" time="0.000402"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:foo&quot; with options {:capture=&gt;/\d+/} to_s should be == /:foo" time="0.000135"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:foo&quot; with options {:capture=&gt;/\d+/} inspect should be == #&lt;Mustermann::Rails:&quot;/:foo&quot;&gt;" time="0.000157"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:foo&quot; with options {:capture=&gt;/\d+/} names should be a kind of Array" time="0.000140"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:foo&quot; with options {:capture=&gt;&quot;1&quot;} string should be immune to external change" time="0.000103"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo&quot; with options {:capture=&gt;&quot;1&quot;} should match &quot;/1&quot;" time="0.000398"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo&quot; with options {:capture=&gt;&quot;1&quot;} should not match &quot;/&quot;" time="0.000354"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo&quot; with options {:capture=&gt;&quot;1&quot;} should not match &quot;/foo&quot;" time="0.000351"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo&quot; with options {:capture=&gt;&quot;1&quot;} should not match &quot;/123&quot;" time="0.000356"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:foo&quot; with options {:capture=&gt;&quot;1&quot;} to_s should be == /:foo" time="0.000121"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:foo&quot; with options {:capture=&gt;&quot;1&quot;} inspect should be == #&lt;Mustermann::Rails:&quot;/:foo&quot;&gt;" time="0.000153"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:foo&quot; with options {:capture=&gt;&quot;1&quot;} names should be a kind of Array" time="0.000153"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:foo&quot; with options {:capture=&gt;&quot;a.b&quot;} string should be immune to external change" time="0.000093"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo&quot; with options {:capture=&gt;&quot;a.b&quot;} should match &quot;/a.b&quot;" time="0.000376"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo&quot; with options {:capture=&gt;&quot;a.b&quot;} should match &quot;/a%2Eb&quot;" time="0.000424"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo&quot; with options {:capture=&gt;&quot;a.b&quot;} should match &quot;/a%2eb&quot;" time="0.000411"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo&quot; with options {:capture=&gt;&quot;a.b&quot;} should not match &quot;/ab&quot;" time="0.000386"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo&quot; with options {:capture=&gt;&quot;a.b&quot;} should not match &quot;/afb&quot;" time="0.000353"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo&quot; with options {:capture=&gt;&quot;a.b&quot;} should not match &quot;/a1b&quot;" time="0.000354"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo&quot; with options {:capture=&gt;&quot;a.b&quot;} should not match &quot;/a.bc&quot;" time="0.000351"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:foo&quot; with options {:capture=&gt;&quot;a.b&quot;} to_s should be == /:foo" time="0.000123"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:foo&quot; with options {:capture=&gt;&quot;a.b&quot;} inspect should be == #&lt;Mustermann::Rails:&quot;/:foo&quot;&gt;" time="0.000136"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:foo&quot; with options {:capture=&gt;&quot;a.b&quot;} names should be a kind of Array" time="0.000139"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:foo(/:bar)&quot; with options {:capture=&gt;:alpha} string should be immune to external change" time="0.000092"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo(/:bar)&quot; with options {:capture=&gt;:alpha} should match &quot;/abc&quot;" time="0.000433"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo(/:bar)&quot; with options {:capture=&gt;:alpha} should match &quot;/a/b&quot;" time="0.000352"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo(/:bar)&quot; with options {:capture=&gt;:alpha} should match &quot;/a&quot;" time="0.000351"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo(/:bar)&quot; with options {:capture=&gt;:alpha} should not match &quot;/1/2&quot;" time="0.000348"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo(/:bar)&quot; with options {:capture=&gt;:alpha} should not match &quot;/a/2&quot;" time="0.000415"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo(/:bar)&quot; with options {:capture=&gt;:alpha} should not match &quot;/1/b&quot;" time="0.000468"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo(/:bar)&quot; with options {:capture=&gt;:alpha} should not match &quot;/1&quot;" time="0.000369"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo(/:bar)&quot; with options {:capture=&gt;:alpha} should not match &quot;/1/&quot;" time="0.000349"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo(/:bar)&quot; with options {:capture=&gt;:alpha} should not match &quot;/a/&quot;" time="0.000346"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo(/:bar)&quot; with options {:capture=&gt;:alpha} should not match &quot;//a&quot;" time="0.000347"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:foo(/:bar)&quot; with options {:capture=&gt;:alpha} to_s should be == /:foo(/:bar)" time="0.000122"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:foo(/:bar)&quot; with options {:capture=&gt;:alpha} inspect should be == #&lt;Mustermann::Rails:&quot;/:foo(/:bar)&quot;&gt;" time="0.000139"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:foo(/:bar)&quot; with options {:capture=&gt;:alpha} names should be a kind of Array" time="0.000138"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:foo&quot; with options {:capture=&gt;[&quot;foo&quot;, &quot;bar&quot;, /\d+/]} string should be immune to external change" time="0.000091"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo&quot; with options {:capture=&gt;[&quot;foo&quot;, &quot;bar&quot;, /\d+/]} should match &quot;/1&quot;" time="0.000439"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo&quot; with options {:capture=&gt;[&quot;foo&quot;, &quot;bar&quot;, /\d+/]} should match &quot;/123&quot;" time="0.000395"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo&quot; with options {:capture=&gt;[&quot;foo&quot;, &quot;bar&quot;, /\d+/]} should match &quot;/foo&quot;" time="0.000391"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo&quot; with options {:capture=&gt;[&quot;foo&quot;, &quot;bar&quot;, /\d+/]} should match &quot;/bar&quot;" time="0.000390"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo&quot; with options {:capture=&gt;[&quot;foo&quot;, &quot;bar&quot;, /\d+/]} should not match &quot;/&quot;" time="0.000395"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo&quot; with options {:capture=&gt;[&quot;foo&quot;, &quot;bar&quot;, /\d+/]} should not match &quot;/baz&quot;" time="0.000389"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo&quot; with options {:capture=&gt;[&quot;foo&quot;, &quot;bar&quot;, /\d+/]} should not match &quot;/foo1&quot;" time="0.000407"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:foo&quot; with options {:capture=&gt;[&quot;foo&quot;, &quot;bar&quot;, /\d+/]} to_s should be == /:foo" time="0.000142"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:foo&quot; with options {:capture=&gt;[&quot;foo&quot;, &quot;bar&quot;, /\d+/]} inspect should be == #&lt;Mustermann::Rails:&quot;/:foo&quot;&gt;" time="0.000155"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:foo&quot; with options {:capture=&gt;[&quot;foo&quot;, &quot;bar&quot;, /\d+/]} names should be a kind of Array" time="0.000164"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:foo:bar:baz&quot; with options {:capture=&gt;{:foo=&gt;:alpha, :bar=&gt;/\d+/}} string should be immune to external change" time="0.000149"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo:bar:baz&quot; with options {:capture=&gt;{:foo=&gt;:alpha, :bar=&gt;/\d+/}} should match &quot;/ab123xy-1&quot;" time="0.000464"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo:bar:baz&quot; with options {:capture=&gt;{:foo=&gt;:alpha, :bar=&gt;/\d+/}} should match &quot;/ab123&quot;" time="0.000410"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo:bar:baz&quot; with options {:capture=&gt;{:foo=&gt;:alpha, :bar=&gt;/\d+/}} should not match &quot;/123abcxy-1&quot;" time="0.000392"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo:bar:baz&quot; with options {:capture=&gt;{:foo=&gt;:alpha, :bar=&gt;/\d+/}} should not match &quot;/abcxy-1&quot;" time="0.000416"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo:bar:baz&quot; with options {:capture=&gt;{:foo=&gt;:alpha, :bar=&gt;/\d+/}} should not match &quot;/abc1&quot;" time="0.000388"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:foo:bar:baz&quot; with options {:capture=&gt;{:foo=&gt;:alpha, :bar=&gt;/\d+/}} to_s should be == /:foo:bar:baz" time="0.000141"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:foo:bar:baz&quot; with options {:capture=&gt;{:foo=&gt;:alpha, :bar=&gt;/\d+/}} inspect should be == #&lt;Mustermann::Rails:&quot;/:foo:bar:baz&quot;&gt;" time="0.000141"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:foo:bar:baz&quot; with options {:capture=&gt;{:foo=&gt;:alpha, :bar=&gt;/\d+/}} names should be a kind of Array" time="0.000140"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:foo&quot; with options {:capture=&gt;{:foo=&gt;[&quot;foo&quot;, &quot;bar&quot;, /\d+/]}} string should be immune to external change" time="0.000092"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo&quot; with options {:capture=&gt;{:foo=&gt;[&quot;foo&quot;, &quot;bar&quot;, /\d+/]}} should match &quot;/1&quot;" time="0.000392"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo&quot; with options {:capture=&gt;{:foo=&gt;[&quot;foo&quot;, &quot;bar&quot;, /\d+/]}} should match &quot;/123&quot;" time="0.000344"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo&quot; with options {:capture=&gt;{:foo=&gt;[&quot;foo&quot;, &quot;bar&quot;, /\d+/]}} should match &quot;/foo&quot;" time="0.000343"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo&quot; with options {:capture=&gt;{:foo=&gt;[&quot;foo&quot;, &quot;bar&quot;, /\d+/]}} should match &quot;/bar&quot;" time="0.000343"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo&quot; with options {:capture=&gt;{:foo=&gt;[&quot;foo&quot;, &quot;bar&quot;, /\d+/]}} should not match &quot;/&quot;" time="0.000343"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo&quot; with options {:capture=&gt;{:foo=&gt;[&quot;foo&quot;, &quot;bar&quot;, /\d+/]}} should not match &quot;/baz&quot;" time="0.000384"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:foo&quot; with options {:capture=&gt;{:foo=&gt;[&quot;foo&quot;, &quot;bar&quot;, /\d+/]}} should not match &quot;/foo1&quot;" time="0.000343"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:foo&quot; with options {:capture=&gt;{:foo=&gt;[&quot;foo&quot;, &quot;bar&quot;, /\d+/]}} to_s should be == /:foo" time="0.000120"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:foo&quot; with options {:capture=&gt;{:foo=&gt;[&quot;foo&quot;, &quot;bar&quot;, /\d+/]}} inspect should be == #&lt;Mustermann::Rails:&quot;/:foo&quot;&gt;" time="0.000135"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:foo&quot; with options {:capture=&gt;{:foo=&gt;[&quot;foo&quot;, &quot;bar&quot;, /\d+/]}} names should be a kind of Array" time="0.000137"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:file(.:ext)&quot; with options {:capture=&gt;{:ext=&gt;[&quot;jpg&quot;, &quot;png&quot;]}} string should be immune to external change" time="0.000091"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:file(.:ext)&quot; with options {:capture=&gt;{:ext=&gt;[&quot;jpg&quot;, &quot;png&quot;]}} should match &quot;/pony&quot;" time="0.000406"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:file(.:ext)&quot; with options {:capture=&gt;{:ext=&gt;[&quot;jpg&quot;, &quot;png&quot;]}} should match &quot;/pony.jpg&quot;" time="0.000346"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:file(.:ext)&quot; with options {:capture=&gt;{:ext=&gt;[&quot;jpg&quot;, &quot;png&quot;]}} should match &quot;/pony%2Ejpg&quot;" time="0.000346"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:file(.:ext)&quot; with options {:capture=&gt;{:ext=&gt;[&quot;jpg&quot;, &quot;png&quot;]}} should match &quot;/pony%2ejpg&quot;" time="0.000345"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:file(.:ext)&quot; with options {:capture=&gt;{:ext=&gt;[&quot;jpg&quot;, &quot;png&quot;]}} should match &quot;/pony.png&quot;" time="0.000344"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:file(.:ext)&quot; with options {:capture=&gt;{:ext=&gt;[&quot;jpg&quot;, &quot;png&quot;]}} should match &quot;/pony%2Epng&quot;" time="0.000358"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:file(.:ext)&quot; with options {:capture=&gt;{:ext=&gt;[&quot;jpg&quot;, &quot;png&quot;]}} should match &quot;/pony%2epng&quot;" time="0.000385"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:file(.:ext)&quot; with options {:capture=&gt;{:ext=&gt;[&quot;jpg&quot;, &quot;png&quot;]}} should match &quot;/pony.png.jpg&quot;" time="0.000346"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:file(.:ext)&quot; with options {:capture=&gt;{:ext=&gt;[&quot;jpg&quot;, &quot;png&quot;]}} should match &quot;/pony.jpg.png&quot;" time="0.000349"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:file(.:ext)&quot; with options {:capture=&gt;{:ext=&gt;[&quot;jpg&quot;, &quot;png&quot;]}} should match &quot;/pony.gif&quot;" time="0.000362"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:file(.:ext)&quot; with options {:capture=&gt;{:ext=&gt;[&quot;jpg&quot;, &quot;png&quot;]}} should match &quot;/pony.&quot;" time="0.000381"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:file(.:ext)&quot; with options {:capture=&gt;{:ext=&gt;[&quot;jpg&quot;, &quot;png&quot;]}} should not match &quot;.jpg&quot;" time="0.000339"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:file(.:ext)&quot; with options {:capture=&gt;{:ext=&gt;[&quot;jpg&quot;, &quot;png&quot;]}} to_s should be == /:file(.:ext)" time="0.000122"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:file(.:ext)&quot; with options {:capture=&gt;{:ext=&gt;[&quot;jpg&quot;, &quot;png&quot;]}} inspect should be == #&lt;Mustermann::Rails:&quot;/:file(.:ext)&quot;&gt;" time="0.000135"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:file(.:ext)&quot; with options {:capture=&gt;{:ext=&gt;[&quot;jpg&quot;, &quot;png&quot;]}} names should be a kind of Array" time="0.000139"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:file(:ext)&quot; with options {:capture=&gt;{:ext=&gt;[&quot;.jpg&quot;, &quot;.png&quot;, &quot;.tar.gz&quot;]}} string should be immune to external change" time="0.000092"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:file(:ext)&quot; with options {:capture=&gt;{:ext=&gt;[&quot;.jpg&quot;, &quot;.png&quot;, &quot;.tar.gz&quot;]}} should match &quot;/pony&quot;" time="0.000439"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:file(:ext)&quot; with options {:capture=&gt;{:ext=&gt;[&quot;.jpg&quot;, &quot;.png&quot;, &quot;.tar.gz&quot;]}} should match &quot;/pony.jpg&quot;" time="0.000357"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:file(:ext)&quot; with options {:capture=&gt;{:ext=&gt;[&quot;.jpg&quot;, &quot;.png&quot;, &quot;.tar.gz&quot;]}} should match &quot;/pony.png&quot;" time="0.000349"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:file(:ext)&quot; with options {:capture=&gt;{:ext=&gt;[&quot;.jpg&quot;, &quot;.png&quot;, &quot;.tar.gz&quot;]}} should match &quot;/pony.png.jpg&quot;" time="0.000349"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:file(:ext)&quot; with options {:capture=&gt;{:ext=&gt;[&quot;.jpg&quot;, &quot;.png&quot;, &quot;.tar.gz&quot;]}} should match &quot;/pony.jpg.png&quot;" time="0.000355"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:file(:ext)&quot; with options {:capture=&gt;{:ext=&gt;[&quot;.jpg&quot;, &quot;.png&quot;, &quot;.tar.gz&quot;]}} should match &quot;/pony.tar.gz&quot;" time="0.000345"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:file(:ext)&quot; with options {:capture=&gt;{:ext=&gt;[&quot;.jpg&quot;, &quot;.png&quot;, &quot;.tar.gz&quot;]}} should match &quot;/pony.gif&quot;" time="0.000343"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:file(:ext)&quot; with options {:capture=&gt;{:ext=&gt;[&quot;.jpg&quot;, &quot;.png&quot;, &quot;.tar.gz&quot;]}} should match &quot;/pony.&quot;" time="0.000341"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:file(:ext)&quot; with options {:capture=&gt;{:ext=&gt;[&quot;.jpg&quot;, &quot;.png&quot;, &quot;.tar.gz&quot;]}} should not match &quot;/.jpg&quot;" time="0.000351"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:file(:ext)&quot; with options {:capture=&gt;{:ext=&gt;[&quot;.jpg&quot;, &quot;.png&quot;, &quot;.tar.gz&quot;]}} to_s should be == /:file(:ext)" time="0.000167"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:file(:ext)&quot; with options {:capture=&gt;{:ext=&gt;[&quot;.jpg&quot;, &quot;.png&quot;, &quot;.tar.gz&quot;]}} inspect should be == #&lt;Mustermann::Rails:&quot;/:file(:ext)&quot;&gt;" time="0.000166"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:file(:ext)&quot; with options {:capture=&gt;{:ext=&gt;[&quot;.jpg&quot;, &quot;.png&quot;, &quot;.tar.gz&quot;]}} names should be a kind of Array" time="0.000150"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:a(@:b)&quot; with options {:capture=&gt;{:b=&gt;/\d+/}} string should be immune to external change" time="0.000092"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:a(@:b)&quot; with options {:capture=&gt;{:b=&gt;/\d+/}} should match &quot;/a&quot;" time="0.000384"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:a(@:b)&quot; with options {:capture=&gt;{:b=&gt;/\d+/}} should match &quot;/a@1&quot;" time="0.000345"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:a(@:b)&quot; with options {:capture=&gt;{:b=&gt;/\d+/}} should match &quot;/a@b&quot;" time="0.000340"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:a(@:b)&quot; with options {:capture=&gt;{:b=&gt;/\d+/}} should match &quot;/a@1@2&quot;" time="0.000344"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:a(@:b)&quot; with options {:capture=&gt;{:b=&gt;/\d+/}} to_s should be == /:a(@:b)" time="0.000117"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:a(@:b)&quot; with options {:capture=&gt;{:b=&gt;/\d+/}} inspect should be == #&lt;Mustermann::Rails:&quot;/:a(@:b)&quot;&gt;" time="0.000137"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:a(@:b)&quot; with options {:capture=&gt;{:b=&gt;/\d+/}} names should be a kind of Array" time="0.000137"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:a(b)&quot; with options {:greedy=&gt;false} string should be immune to external change" time="0.000090"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:a(b)&quot; with options {:greedy=&gt;false} should match &quot;/ab&quot;" time="0.000364"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:a(b)&quot; with options {:greedy=&gt;false} to_s should be == /:a(b)" time="0.000116"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:a(b)&quot; with options {:greedy=&gt;false} inspect should be == #&lt;Mustermann::Rails:&quot;/:a(b)&quot;&gt;" time="0.000133"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:a(b)&quot; with options {:greedy=&gt;false} names should be a kind of Array" time="0.000136"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:file(.:ext)&quot; with options {:greedy=&gt;false} string should be immune to external change" time="0.000089"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:file(.:ext)&quot; with options {:greedy=&gt;false} should match &quot;/pony&quot;" time="0.000374"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:file(.:ext)&quot; with options {:greedy=&gt;false} should match &quot;/pony.jpg&quot;" time="0.000349"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:file(.:ext)&quot; with options {:greedy=&gt;false} should match &quot;/pony.png.jpg&quot;" time="0.000349"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:file(.:ext)&quot; with options {:greedy=&gt;false} to_s should be == /:file(.:ext)" time="0.000117"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:file(.:ext)&quot; with options {:greedy=&gt;false} inspect should be == #&lt;Mustermann::Rails:&quot;/:file(.:ext)&quot;&gt;" time="0.000132"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:file(.:ext)&quot; with options {:greedy=&gt;false} names should be a kind of Array" time="0.000134"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:controller(/:action(/:id(.:format)))&quot; string should be immune to external change" time="0.000117"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/:controller(/:action(/:id(.:format)))&quot; should match &quot;/content&quot;" time="0.000447"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:controller(/:action(/:id(.:format)))&quot; to_s should be == /:controller(/:action(/:id(.:format)))" time="0.000118"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:controller(/:action(/:id(.:format)))&quot; inspect should be == #&lt;Mustermann::Rails:&quot;/:controller(/:action(/:id(.:format)))&quot;&gt;" time="0.000136"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/:controller(/:action(/:id(.:format)))&quot; names should be a kind of Array" time="0.000137"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/fo(o)&quot; with options {:uri_decode=&gt;false} string should be immune to external change" time="0.000090"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/fo(o)&quot; with options {:uri_decode=&gt;false} should match &quot;/foo&quot;" time="0.000356"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/fo(o)&quot; with options {:uri_decode=&gt;false} should match &quot;/fo&quot;" time="0.000341"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/fo(o)&quot; with options {:uri_decode=&gt;false} should not match &quot;/fo(o)&quot;" time="0.000345"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/fo(o)&quot; with options {:uri_decode=&gt;false} to_s should be == /fo(o)" time="0.000116"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/fo(o)&quot; with options {:uri_decode=&gt;false} inspect should be == #&lt;Mustermann::Rails:&quot;/fo(o)&quot;&gt;" time="0.000132"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/fo(o)&quot; with options {:uri_decode=&gt;false} names should be a kind of Array" time="0.000136"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/foo/bar&quot; with options {:uri_decode=&gt;false} string should be immune to external change" time="0.000093"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/foo/bar&quot; with options {:uri_decode=&gt;false} should match &quot;/foo/bar&quot;" time="0.000352"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/foo/bar&quot; with options {:uri_decode=&gt;false} should not match &quot;/foo%2Fbar&quot;" time="0.000341"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/foo/bar&quot; with options {:uri_decode=&gt;false} should not match &quot;/foo%2fbar&quot;" time="0.000342"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/foo/bar&quot; with options {:uri_decode=&gt;false} to_s should be == /foo/bar" time="0.000215"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/foo/bar&quot; with options {:uri_decode=&gt;false} inspect should be == #&lt;Mustermann::Rails:&quot;/foo/bar&quot;&gt;" time="0.000135"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/foo/bar&quot; with options {:uri_decode=&gt;false} names should be a kind of Array" time="0.000136"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/path with spaces&quot; with options {:uri_decode=&gt;false} string should be immune to external change" time="0.000098"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/path with spaces&quot; with options {:uri_decode=&gt;false} should match &quot;/path with spaces&quot;" time="0.000469"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/path with spaces&quot; with options {:uri_decode=&gt;false} should not match &quot;/path%20with%20spaces&quot;" time="0.000382"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/path with spaces&quot; with options {:uri_decode=&gt;false} should not match &quot;/path%2Bwith%2Bspaces&quot;" time="0.000388"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/path with spaces&quot; with options {:uri_decode=&gt;false} should not match &quot;/path+with+spaces&quot;" time="0.000344"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/path with spaces&quot; with options {:uri_decode=&gt;false} to_s should be == /path with spaces" time="0.000119"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/path with spaces&quot; with options {:uri_decode=&gt;false} inspect should be == #&lt;Mustermann::Rails:&quot;/path with spaces&quot;&gt;" time="0.000134"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/path with spaces&quot; with options {:uri_decode=&gt;false} names should be a kind of Array" time="0.000136"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/path with spaces&quot; with options {:space_matches_plus=&gt;false} string should be immune to external change" time="0.000088"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/path with spaces&quot; with options {:space_matches_plus=&gt;false} should match &quot;/path%20with%20spaces&quot;" time="0.000371"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/path with spaces&quot; with options {:space_matches_plus=&gt;false} should not match &quot;/path%2Bwith%2Bspaces&quot;" time="0.000344"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails pattern &quot;/path with spaces&quot; with options {:space_matches_plus=&gt;false} should not match &quot;/path+with+spaces&quot;" time="0.000342"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/path with spaces&quot; with options {:space_matches_plus=&gt;false} to_s should be == /path with spaces" time="0.000117"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/path with spaces&quot; with options {:space_matches_plus=&gt;false} inspect should be == #&lt;Mustermann::Rails:&quot;/path with spaces&quot;&gt;" time="0.000132"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Rails pattern &quot;/path with spaces&quot; with options {:space_matches_plus=&gt;false} names should be a kind of Array" time="0.000170"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails invalid syntax unexpected closing parenthesis" time="0.001570"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails invalid syntax missing closing parenthesis" time="0.000564"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails invalid capture names empty name" time="0.001281"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails invalid capture names named splat" time="0.000592"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails invalid capture names named captures" time="0.000581"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails invalid capture names with capital letter" time="0.000529"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails invalid capture names with integer" time="0.000527"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails invalid capture names same name twice" time="0.000844"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails Regexp compatibility === non-matching" time="0.000119"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails Regexp compatibility === matching" time="0.000095"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails Regexp compatibility =~ non-matching" time="0.000104"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails Regexp compatibility =~ matching" time="0.000088"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails Regexp compatibility =~ String#=~ non-matching" time="0.000106"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails Regexp compatibility =~ String#=~ matching" time="0.000093"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails Regexp compatibility to_regexp empty pattern" time="0.000092"/>
  <testcase classname="spec.rails_spec" name="Mustermann::Rails Regexp compatibility to_regexp Regexp.try_convert empty pattern" time="0.000114"/>
  <testcase classname="spec.regexp_based_spec" name="Mustermann::RegexpBased raises a NotImplementedError when used directly" time="0.000191"/>
  <testcase classname="spec.router.rack_spec" name="Mustermann::Router::Rack matching should be == 418" time="0.000504"/>
  <testcase classname="spec.router.rack_spec" name="Mustermann::Router::Rack matching should be == 404" time="0.000358"/>
  <testcase classname="spec.router.rack_spec" name="Mustermann::Router::Rack params should be == foo" time="0.002478"/>
  <testcase classname="spec.router.rack_spec" name="Mustermann::Router::Rack params should be == bar" time="0.000456"/>
  <testcase classname="spec.router.rack_spec" name="Mustermann::Router::Rack X-Cascade: pass should be == c" time="0.000436"/>
  <testcase classname="spec.router.rack_spec" name="Mustermann::Router::Rack throw :pass should be == b" time="0.000396"/>
  <testcase classname="spec.router.simple_spec" name="Mustermann::Router::Simple initialize with implicit receiver should be == bar" time="0.000170"/>
  <testcase classname="spec.router.simple_spec" name="Mustermann::Router::Simple initialize with explicit receiver should be == bar" time="0.000163"/>
  <testcase classname="spec.router.simple_spec" name="Mustermann::Router::Simple initialize with default should be == bar" time="0.000128"/>
  <testcase classname="spec.router.simple_spec" name="Mustermann::Router::Simple []= should be == [&quot;/foo&quot;, {&quot;name&quot;=&gt;&quot;foo&quot;}]" time="0.000193"/>
  <testcase classname="spec.router.simple_spec" name="Mustermann::Router::Simple [] should be == 42" time="0.002298"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Shell pattern &quot;&quot; string should be immune to external change" time="0.000107"/>
  <testcase classname="spec.shell_spec" name="Mustermann::Shell pattern &quot;&quot; should match &quot;&quot;" time="0.002120"/>
  <testcase classname="spec.shell_spec" name="Mustermann::Shell pattern &quot;&quot; should not match &quot;/&quot;" time="0.000396"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Shell pattern &quot;&quot; to_s should be == " time="0.000127"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Shell pattern &quot;&quot; inspect should be == #&lt;Mustermann::Shell:&quot;&quot;&gt;" time="0.000140"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Shell pattern &quot;&quot; names should be a kind of Array" time="0.000150"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Shell pattern &quot;/&quot; string should be immune to external change" time="0.000091"/>
  <testcase classname="spec.shell_spec" name="Mustermann::Shell pattern &quot;/&quot; should match &quot;/&quot;" time="0.002015"/>
  <testcase classname="spec.shell_spec" name="Mustermann::Shell pattern &quot;/&quot; should not match &quot;/foo&quot;" time="0.000371"/>
  <testcase classname="spec.shell_spec" name="Mustermann::Shell pattern &quot;/&quot; should be == {}" time="0.000112"/>
  <testcase classname="spec.shell_spec" name="Mustermann::Shell pattern &quot;/&quot; should be nil" time="0.000116"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Shell pattern &quot;/&quot; to_s should be == /" time="0.000121"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Shell pattern &quot;/&quot; inspect should be == #&lt;Mustermann::Shell:&quot;/&quot;&gt;" time="0.000138"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Shell pattern &quot;/&quot; names should be a kind of Array" time="0.000137"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Shell pattern &quot;/foo&quot; string should be immune to external change" time="0.000093"/>
  <testcase classname="spec.shell_spec" name="Mustermann::Shell pattern &quot;/foo&quot; should match &quot;/foo&quot;" time="0.002044"/>
  <testcase classname="spec.shell_spec" name="Mustermann::Shell pattern &quot;/foo&quot; should not match &quot;/bar&quot;" time="0.000369"/>
  <testcase classname="spec.shell_spec" name="Mustermann::Shell pattern &quot;/foo&quot; should not match &quot;/foo.bar&quot;" time="0.000353"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Shell pattern &quot;/foo&quot; to_s should be == /foo" time="0.000122"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Shell pattern &quot;/foo&quot; inspect should be == #&lt;Mustermann::Shell:&quot;/foo&quot;&gt;" time="0.000136"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Shell pattern &quot;/foo&quot; names should be a kind of Array" time="0.000143"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Shell pattern &quot;/foo/bar&quot; string should be immune to external change" time="0.000094"/>
  <testcase classname="spec.shell_spec" name="Mustermann::Shell pattern &quot;/foo/bar&quot; should match &quot;/foo/bar&quot;" time="0.002068"/>
  <testcase classname="spec.shell_spec" name="Mustermann::Shell pattern &quot;/foo/bar&quot; should match &quot;/foo%2Fbar&quot;" time="0.000381"/>
  <testcase classname="spec.shell_spec" name="Mustermann::Shell pattern &quot;/foo/bar&quot; should match &quot;/foo%2fbar&quot;" time="0.000358"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Shell pattern &quot;/foo/bar&quot; to_s should be == /foo/bar" time="0.000122"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Shell pattern &quot;/foo/bar&quot; inspect should be == #&lt;Mustermann::Shell:&quot;/foo/bar&quot;&gt;" time="0.000135"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Shell pattern &quot;/foo/bar&quot; names should be a kind of Array" time="0.000139"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Shell pattern &quot;/*/bar&quot; string should be immune to external change" time="0.000090"/>
  <testcase classname="spec.shell_spec" name="Mustermann::Shell pattern &quot;/*/bar&quot; should match &quot;/foo/bar&quot;" time="0.044265"/>
  <testcase classname="spec.shell_spec" name="Mustermann::Shell pattern &quot;/*/bar&quot; should match &quot;/bar/bar&quot;" time="0.000385"/>
  <testcase classname="spec.shell_spec" name="Mustermann::Shell pattern &quot;/*/bar&quot; should match &quot;/foo%2Fbar&quot;" time="0.000398"/>
  <testcase classname="spec.shell_spec" name="Mustermann::Shell pattern &quot;/*/bar&quot; should match &quot;/foo%2fbar&quot;" time="0.000398"/>
  <testcase classname="spec.shell_spec" name="Mustermann::Shell pattern &quot;/*/bar&quot; should not match &quot;/foo/foo/bar&quot;" time="0.000378"/>
  <testcase classname="spec.shell_spec" name="Mustermann::Shell pattern &quot;/*/bar&quot; should not match &quot;/bar/foo&quot;" time="0.000370"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Shell pattern &quot;/*/bar&quot; to_s should be == /*/bar" time="0.000141"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Shell pattern &quot;/*/bar&quot; inspect should be == #&lt;Mustermann::Shell:&quot;/*/bar&quot;&gt;" time="0.000180"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Shell pattern &quot;/*/bar&quot; names should be a kind of Array" time="0.000182"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Shell pattern &quot;/**/foo&quot; string should be immune to external change" time="0.000141"/>
  <testcase classname="spec.shell_spec" name="Mustermann::Shell pattern &quot;/**/foo&quot; should match &quot;/a/b/c/foo&quot;" time="0.002105"/>
  <testcase classname="spec.shell_spec" name="Mustermann::Shell pattern &quot;/**/foo&quot; should match &quot;/a/b/c/foo&quot;" time="0.000486"/>
  <testcase classname="spec.shell_spec" name="Mustermann::Shell pattern &quot;/**/foo&quot; should match &quot;/a/.b/c/foo&quot;" time="0.000470"/>
  <testcase classname="spec.shell_spec" name="Mustermann::Shell pattern &quot;/**/foo&quot; should match &quot;/a/.b/c/foo&quot;" time="0.000418"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Shell pattern &quot;/**/foo&quot; to_s should be == /**/foo" time="0.000129"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Shell pattern &quot;/**/foo&quot; inspect should be == #&lt;Mustermann::Shell:&quot;/**/foo&quot;&gt;" time="0.000144"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Shell pattern &quot;/**/foo&quot; names should be a kind of Array" time="0.000142"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Shell pattern &quot;/:foo&quot; string should be immune to external change" time="0.000092"/>
  <testcase classname="spec.shell_spec" name="Mustermann::Shell pattern &quot;/:foo&quot; should match &quot;/:foo&quot;" time="0.002093"/>
  <testcase classname="spec.shell_spec" name="Mustermann::Shell pattern &quot;/:foo&quot; should match &quot;/%3Afoo&quot;" time="0.000417"/>
  <testcase classname="spec.shell_spec" name="Mustermann::Shell pattern &quot;/:foo&quot; should not match &quot;/foo&quot;" time="0.000373"/>
  <testcase classname="spec.shell_spec" name="Mustermann::Shell pattern &quot;/:foo&quot; should not match &quot;/foo?&quot;" time="0.000370"/>
  <testcase classname="spec.shell_spec" name="Mustermann::Shell pattern &quot;/:foo&quot; should not match &quot;/foo/bar&quot;" time="0.000360"/>
  <testcase classname="spec.shell_spec" name="Mustermann::Shell pattern &quot;/:foo&quot; should not match &quot;/&quot;" time="0.000362"/>
  <testcase classname="spec.shell_spec" name="Mustermann::Shell pattern &quot;/:foo&quot; should not match &quot;/foo/&quot;" time="0.000357"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Shell pattern &quot;/:foo&quot; to_s should be == /:foo" time="0.000126"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Shell pattern &quot;/:foo&quot; inspect should be == #&lt;Mustermann::Shell:&quot;/:foo&quot;&gt;" time="0.000141"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Shell pattern &quot;/:foo&quot; names should be a kind of Array" time="0.000139"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Shell pattern &quot;/f\u00F6\u00F6&quot; string should be immune to external change" time="0.000092"/>
  <testcase classname="spec.shell_spec" name="Mustermann::Shell pattern &quot;/f\u00F6\u00F6&quot; should match &quot;/f%C3%B6%C3%B6&quot;" time="0.001974"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Shell pattern &quot;/f\u00F6\u00F6&quot; to_s should be == /föö" time="0.000126"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Shell pattern &quot;/f\u00F6\u00F6&quot; inspect should be == #&lt;Mustermann::Shell:&quot;/f\u00F6\u00F6&quot;&gt;" time="0.000144"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Shell pattern &quot;/f\u00F6\u00F6&quot; names should be a kind of Array" time="0.000139"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Shell pattern &quot;/test$/&quot; string should be immune to external change" time="0.000093"/>
  <testcase classname="spec.shell_spec" name="Mustermann::Shell pattern &quot;/test$/&quot; should match &quot;/test$/&quot;" time="0.002007"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Shell pattern &quot;/test$/&quot; to_s should be == /test$/" time="0.000127"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Shell pattern &quot;/test$/&quot; inspect should be == #&lt;Mustermann::Shell:&quot;/test$/&quot;&gt;" time="0.000140"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Shell pattern &quot;/test$/&quot; names should be a kind of Array" time="0.000141"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Shell pattern &quot;/te+st/&quot; string should be immune to external change" time="0.000092"/>
  <testcase classname="spec.shell_spec" name="Mustermann::Shell pattern &quot;/te+st/&quot; should match &quot;/te+st/&quot;" time="0.002490"/>
  <testcase classname="spec.shell_spec" name="Mustermann::Shell pattern &quot;/te+st/&quot; should not match &quot;/test/&quot;" time="0.000384"/>
  <testcase classname="spec.shell_spec" name="Mustermann::Shell pattern &quot;/te+st/&quot; should not match &quot;/teest/&quot;" time="0.000362"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Shell pattern &quot;/te+st/&quot; to_s should be == /te+st/" time="0.000132"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Shell pattern &quot;/te+st/&quot; inspect should be == #&lt;Mustermann::Shell:&quot;/te+st/&quot;&gt;" time="0.000158"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Shell pattern &quot;/te+st/&quot; names should be a kind of Array" time="0.000140"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Shell pattern &quot;/path with spaces&quot; string should be immune to external change" time="0.000091"/>
  <testcase classname="spec.shell_spec" name="Mustermann::Shell pattern &quot;/path with spaces&quot; should match &quot;/path%20with%20spaces&quot;" time="0.002154"/>
  <testcase classname="spec.shell_spec" name="Mustermann::Shell pattern &quot;/path with spaces&quot; should not match &quot;/path%2Bwith%2Bspaces&quot;" time="0.000414"/>
  <testcase classname="spec.shell_spec" name="Mustermann::Shell pattern &quot;/path with spaces&quot; should not match &quot;/path+with+spaces&quot;" time="0.000362"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Shell pattern &quot;/path with spaces&quot; to_s should be == /path with spaces" time="0.000129"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Shell pattern &quot;/path with spaces&quot; inspect should be == #&lt;Mustermann::Shell:&quot;/path with spaces&quot;&gt;" time="0.000161"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Shell pattern &quot;/path with spaces&quot; names should be a kind of Array" time="0.000154"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Shell pattern &quot;/foo&amp;bar&quot; string should be immune to external change" time="0.000093"/>
  <testcase classname="spec.shell_spec" name="Mustermann::Shell pattern &quot;/foo&amp;bar&quot; should match &quot;/foo&amp;bar&quot;" time="0.001973"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Shell pattern &quot;/foo&amp;bar&quot; to_s should be == /foo&amp;bar" time="0.000126"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Shell pattern &quot;/foo&amp;bar&quot; inspect should be == #&lt;Mustermann::Shell:&quot;/foo&amp;bar&quot;&gt;" time="0.000143"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Shell pattern &quot;/foo&amp;bar&quot; names should be a kind of Array" time="0.000154"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Shell pattern &quot;/test.bar&quot; string should be immune to external change" time="0.000107"/>
  <testcase classname="spec.shell_spec" name="Mustermann::Shell pattern &quot;/test.bar&quot; should match &quot;/test.bar&quot;" time="0.001960"/>
  <testcase classname="spec.shell_spec" name="Mustermann::Shell pattern &quot;/test.bar&quot; should not match &quot;/test0bar&quot;" time="0.000358"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Shell pattern &quot;/test.bar&quot; to_s should be == /test.bar" time="0.000124"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Shell pattern &quot;/test.bar&quot; inspect should be == #&lt;Mustermann::Shell:&quot;/test.bar&quot;&gt;" time="0.000138"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Shell pattern &quot;/test.bar&quot; names should be a kind of Array" time="0.000135"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Shell pattern &quot;/{foo,bar}&quot; string should be immune to external change" time="0.000091"/>
  <testcase classname="spec.shell_spec" name="Mustermann::Shell pattern &quot;/{foo,bar}&quot; should match &quot;/foo&quot;" time="0.000348"/>
  <testcase classname="spec.shell_spec" name="Mustermann::Shell pattern &quot;/{foo,bar}&quot; should match &quot;/bar&quot;" time="0.000370"/>
  <testcase classname="spec.shell_spec" name="Mustermann::Shell pattern &quot;/{foo,bar}&quot; should not match &quot;/foobar&quot;" time="0.000366"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Shell pattern &quot;/{foo,bar}&quot; to_s should be == /{foo,bar}" time="0.000120"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Shell pattern &quot;/{foo,bar}&quot; inspect should be == #&lt;Mustermann::Shell:&quot;/{foo,bar}&quot;&gt;" time="0.000134"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Shell pattern &quot;/{foo,bar}&quot; names should be a kind of Array" time="0.000135"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Shell pattern &quot;/foo/bar&quot; with options {:uri_decode=&gt;false} string should be immune to external change" time="0.000150"/>
  <testcase classname="spec.shell_spec" name="Mustermann::Shell pattern &quot;/foo/bar&quot; with options {:uri_decode=&gt;false} should match &quot;/foo/bar&quot;" time="0.000343"/>
  <testcase classname="spec.shell_spec" name="Mustermann::Shell pattern &quot;/foo/bar&quot; with options {:uri_decode=&gt;false} should not match &quot;/foo%2Fbar&quot;" time="0.000341"/>
  <testcase classname="spec.shell_spec" name="Mustermann::Shell pattern &quot;/foo/bar&quot; with options {:uri_decode=&gt;false} should not match &quot;/foo%2fbar&quot;" time="0.000422"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Shell pattern &quot;/foo/bar&quot; with options {:uri_decode=&gt;false} to_s should be == /foo/bar" time="0.000165"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Shell pattern &quot;/foo/bar&quot; with options {:uri_decode=&gt;false} inspect should be == #&lt;Mustermann::Shell:&quot;/foo/bar&quot;&gt;" time="0.000207"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Shell pattern &quot;/foo/bar&quot; with options {:uri_decode=&gt;false} names should be a kind of Array" time="0.000151"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Shell pattern &quot;/path with spaces&quot; with options {:uri_decode=&gt;false} string should be immune to external change" time="0.000108"/>
  <testcase classname="spec.shell_spec" name="Mustermann::Shell pattern &quot;/path with spaces&quot; with options {:uri_decode=&gt;false} should not match &quot;/path%20with%20spaces&quot;" time="0.000354"/>
  <testcase classname="spec.shell_spec" name="Mustermann::Shell pattern &quot;/path with spaces&quot; with options {:uri_decode=&gt;false} should not match &quot;/path%2Bwith%2Bspaces&quot;" time="0.000344"/>
  <testcase classname="spec.shell_spec" name="Mustermann::Shell pattern &quot;/path with spaces&quot; with options {:uri_decode=&gt;false} should not match &quot;/path+with+spaces&quot;" time="0.000343"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Shell pattern &quot;/path with spaces&quot; with options {:uri_decode=&gt;false} to_s should be == /path with spaces" time="0.000119"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Shell pattern &quot;/path with spaces&quot; with options {:uri_decode=&gt;false} inspect should be == #&lt;Mustermann::Shell:&quot;/path with spaces&quot;&gt;" time="0.000141"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Shell pattern &quot;/path with spaces&quot; with options {:uri_decode=&gt;false} names should be a kind of Array" time="0.000179"/>
  <testcase classname="spec.shell_spec" name="Mustermann::Shell =~ should be =~ /foo" time="0.000139"/>
  <testcase classname="spec.simple_match_spec" name="Mustermann::SimpleMatch should be == " time="0.000122"/>
  <testcase classname="spec.simple_match_spec" name="Mustermann::SimpleMatch to_s should be == example" time="0.000126"/>
  <testcase classname="spec.simple_match_spec" name="Mustermann::SimpleMatch names should be == []" time="0.000127"/>
  <testcase classname="spec.simple_match_spec" name="Mustermann::SimpleMatch captures should be == []" time="0.000148"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;&quot; string should be immune to external change" time="0.000100"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;&quot; should match &quot;&quot;" time="0.000375"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;&quot; should not match &quot;/&quot;" time="0.000372"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;&quot; to_s should be == " time="0.000121"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;&quot; inspect should be == #&lt;Mustermann::Simple:&quot;&quot;&gt;" time="0.000137"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;&quot; names should be a kind of Array" time="0.000142"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/&quot; string should be immune to external change" time="0.000094"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/&quot; should match &quot;/&quot;" time="0.000361"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/&quot; should not match &quot;/foo&quot;" time="0.000349"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/&quot; to_s should be == /" time="0.000116"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/&quot; inspect should be == #&lt;Mustermann::Simple:&quot;/&quot;&gt;" time="0.000149"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/&quot; names should be a kind of Array" time="0.000156"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/foo&quot; string should be immune to external change" time="0.000090"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/foo&quot; should match &quot;/foo&quot;" time="0.000394"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/foo&quot; should not match &quot;/bar&quot;" time="0.000344"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/foo&quot; should not match &quot;/foo.bar&quot;" time="0.000344"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/foo&quot; to_s should be == /foo" time="0.000119"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/foo&quot; inspect should be == #&lt;Mustermann::Simple:&quot;/foo&quot;&gt;" time="0.000132"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/foo&quot; names should be a kind of Array" time="0.000138"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/foo/bar&quot; string should be immune to external change" time="0.000089"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/foo/bar&quot; should match &quot;/foo/bar&quot;" time="0.000355"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/foo/bar&quot; should not match &quot;/foo%2Fbar&quot;" time="0.000342"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/foo/bar&quot; should not match &quot;/foo%2fbar&quot;" time="0.000339"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/foo/bar&quot; to_s should be == /foo/bar" time="0.000116"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/foo/bar&quot; inspect should be == #&lt;Mustermann::Simple:&quot;/foo/bar&quot;&gt;" time="0.000134"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/foo/bar&quot; names should be a kind of Array" time="0.000136"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/:foo&quot; string should be immune to external change" time="0.000089"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/:foo&quot; should match &quot;/foo&quot;" time="0.000401"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/:foo&quot; should match &quot;/bar&quot;" time="0.000345"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/:foo&quot; should match &quot;/foo.bar&quot;" time="0.000341"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/:foo&quot; should match &quot;/%0Afoo&quot;" time="0.000340"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/:foo&quot; should match &quot;/foo%2Fbar&quot;" time="0.000337"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/:foo&quot; should not match &quot;/foo?&quot;" time="0.000337"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/:foo&quot; should not match &quot;/foo/bar&quot;" time="0.000338"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/:foo&quot; should not match &quot;/&quot;" time="0.000416"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/:foo&quot; should not match &quot;/foo/&quot;" time="0.000350"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/:foo&quot; to_s should be == /:foo" time="0.000117"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/:foo&quot; inspect should be == #&lt;Mustermann::Simple:&quot;/:foo&quot;&gt;" time="0.000135"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/:foo&quot; names should be a kind of Array" time="0.000141"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/f\u00F6\u00F6&quot; string should be immune to external change" time="0.000091"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/f\u00F6\u00F6&quot; should match &quot;/f%C3%B6%C3%B6&quot;" time="0.000365"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/f\u00F6\u00F6&quot; to_s should be == /föö" time="0.000117"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/f\u00F6\u00F6&quot; inspect should be == #&lt;Mustermann::Simple:&quot;/f\u00F6\u00F6&quot;&gt;" time="0.000137"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/f\u00F6\u00F6&quot; names should be a kind of Array" time="0.000141"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/:foo/:bar&quot; string should be immune to external change" time="0.000104"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/:foo/:bar&quot; should match &quot;/foo/bar&quot;" time="0.000375"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/:foo/:bar&quot; should match &quot;/foo.bar/bar.foo&quot;" time="0.000348"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/:foo/:bar&quot; should match &quot;/user@example.com/name&quot;" time="0.000348"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/:foo/:bar&quot; should match &quot;/10.1/te.st&quot;" time="0.000372"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/:foo/:bar&quot; should match &quot;/10.1.2/te.st&quot;" time="0.000354"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/:foo/:bar&quot; should not match &quot;/foo%2Fbar&quot;" time="0.000357"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/:foo/:bar&quot; should not match &quot;/foo%2fbar&quot;" time="0.000336"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/:foo/:bar&quot; should be == {&quot;foo&quot;=&gt;&quot;bar&quot;, &quot;bar&quot;=&gt;&quot;foo&quot;}" time="0.001922"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/:foo/:bar&quot; should be nil" time="0.000137"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/:foo/:bar&quot; to_s should be == /:foo/:bar" time="0.000142"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/:foo/:bar&quot; inspect should be == #&lt;Mustermann::Simple:&quot;/:foo/:bar&quot;&gt;" time="0.000167"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/:foo/:bar&quot; names should be a kind of Array" time="0.000145"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/hello/:person&quot; string should be immune to external change" time="0.000097"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/hello/:person&quot; should match &quot;/hello/Frank&quot;" time="0.000382"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/hello/:person&quot; to_s should be == /hello/:person" time="0.000121"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/hello/:person&quot; inspect should be == #&lt;Mustermann::Simple:&quot;/hello/:person&quot;&gt;" time="0.000163"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/hello/:person&quot; names should be a kind of Array" time="0.000213"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/?:foo?/?:bar?&quot; string should be immune to external change" time="0.000102"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/?:foo?/?:bar?&quot; should match &quot;/hello/world&quot;" time="0.000451"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/?:foo?/?:bar?&quot; should match &quot;/hello&quot;" time="0.000399"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/?:foo?/?:bar?&quot; should match &quot;/&quot;" time="0.000369"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/?:foo?/?:bar?&quot; should match &quot;&quot;" time="0.000349"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/?:foo?/?:bar?&quot; should not match &quot;/hello/world/&quot;" time="0.000356"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/?:foo?/?:bar?&quot; to_s should be == /?:foo?/?:bar?" time="0.000121"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/?:foo?/?:bar?&quot; inspect should be == #&lt;Mustermann::Simple:&quot;/?:foo?/?:bar?&quot;&gt;" time="0.000138"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/?:foo?/?:bar?&quot; names should be a kind of Array" time="0.000142"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/*&quot; string should be immune to external change" time="0.000090"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/*&quot; should match &quot;/&quot;" time="0.000367"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/*&quot; should match &quot;/foo&quot;" time="0.000348"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/*&quot; should match &quot;/foo/bar&quot;" time="0.000346"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/*&quot; should be == {&quot;splat&quot;=&gt;[&quot;foo&quot;]}" time="0.001796"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/*&quot; to_s should be == /*" time="0.000128"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/*&quot; inspect should be == #&lt;Mustermann::Simple:&quot;/*&quot;&gt;" time="0.000142"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/*&quot; names should be a kind of Array" time="0.000217"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/:foo/*&quot; string should be immune to external change" time="0.000126"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/:foo/*&quot; should match &quot;/foo/bar/baz&quot;" time="0.000433"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/:foo/*&quot; should match &quot;/foo/&quot;" time="0.000426"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/:foo/*&quot; should match &quot;/h%20w/h%20a%20y&quot;" time="0.000354"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/:foo/*&quot; should not match &quot;/foo&quot;" time="0.000348"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/:foo/*&quot; should be == {&quot;splat&quot;=&gt;[&quot;foo&quot;], &quot;foo&quot;=&gt;&quot;bar&quot;}" time="0.002135"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/:foo/*&quot; should be == {&quot;splat&quot;=&gt;[&quot;foo/f o&quot;], &quot;foo&quot;=&gt;&quot;bar&quot;}" time="0.000158"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/:foo/*&quot; to_s should be == /:foo/*" time="0.000128"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/:foo/*&quot; inspect should be == #&lt;Mustermann::Simple:&quot;/:foo/*&quot;&gt;" time="0.000142"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/:foo/*&quot; names should be a kind of Array" time="0.000146"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/test$/&quot; string should be immune to external change" time="0.000091"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/test$/&quot; should match &quot;/test$/&quot;" time="0.000408"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/test$/&quot; to_s should be == /test$/" time="0.000117"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/test$/&quot; inspect should be == #&lt;Mustermann::Simple:&quot;/test$/&quot;&gt;" time="0.000137"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/test$/&quot; names should be a kind of Array" time="0.000137"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/te+st/&quot; string should be immune to external change" time="0.000092"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/te+st/&quot; should match &quot;/te+st/&quot;" time="0.000369"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/te+st/&quot; should not match &quot;/test/&quot;" time="0.000350"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/te+st/&quot; should not match &quot;/teest/&quot;" time="0.000351"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/te+st/&quot; to_s should be == /te+st/" time="0.000118"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/te+st/&quot; inspect should be == #&lt;Mustermann::Simple:&quot;/te+st/&quot;&gt;" time="0.000134"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/te+st/&quot; names should be a kind of Array" time="0.000143"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/path with spaces&quot; string should be immune to external change" time="0.000094"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/path with spaces&quot; should match &quot;/path%20with%20spaces&quot;" time="0.000376"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/path with spaces&quot; should match &quot;/path%2Bwith%2Bspaces&quot;" time="0.000343"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/path with spaces&quot; should match &quot;/path+with+spaces&quot;" time="0.000340"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/path with spaces&quot; to_s should be == /path with spaces" time="0.000119"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/path with spaces&quot; inspect should be == #&lt;Mustermann::Simple:&quot;/path with spaces&quot;&gt;" time="0.000135"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/path with spaces&quot; names should be a kind of Array" time="0.000142"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/foo&amp;bar&quot; string should be immune to external change" time="0.000095"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/foo&amp;bar&quot; should match &quot;/foo&amp;bar&quot;" time="0.000429"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/foo&amp;bar&quot; to_s should be == /foo&amp;bar" time="0.000131"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/foo&amp;bar&quot; inspect should be == #&lt;Mustermann::Simple:&quot;/foo&amp;bar&quot;&gt;" time="0.000133"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/foo&amp;bar&quot; names should be a kind of Array" time="0.000136"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/*/:foo/*/*&quot; string should be immune to external change" time="0.000093"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/*/:foo/*/*&quot; should match &quot;/bar/foo/bling/baz/boom&quot;" time="0.000374"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/*/:foo/*/*&quot; should capture all splat parts" time="0.000096"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/*/:foo/*/*&quot; should map to proper params" time="0.001784"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/*/:foo/*/*&quot; to_s should be == /*/:foo/*/*" time="0.000129"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/*/:foo/*/*&quot; inspect should be == #&lt;Mustermann::Simple:&quot;/*/:foo/*/*&quot;&gt;" time="0.000171"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/*/:foo/*/*&quot; names should be a kind of Array" time="0.000142"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/test.bar&quot; string should be immune to external change" time="0.000106"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/test.bar&quot; should match &quot;/test.bar&quot;" time="0.000386"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/test.bar&quot; should not match &quot;/test0bar&quot;" time="0.000353"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/test.bar&quot; to_s should be == /test.bar" time="0.000117"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/test.bar&quot; inspect should be == #&lt;Mustermann::Simple:&quot;/test.bar&quot;&gt;" time="0.000133"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/test.bar&quot; names should be a kind of Array" time="0.000138"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/:file.:ext&quot; string should be immune to external change" time="0.000104"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/:file.:ext&quot; should match &quot;/pony.jpg&quot;" time="0.000401"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/:file.:ext&quot; should match &quot;/pony%2Ejpg&quot;" time="0.000349"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/:file.:ext&quot; should match &quot;/pony%2ejpg&quot;" time="0.000349"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/:file.:ext&quot; should match &quot;/pony%E6%AD%A3%2Ejpg&quot;" time="0.000346"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/:file.:ext&quot; should match &quot;/pony%e6%ad%a3%2ejpg&quot;" time="0.000393"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/:file.:ext&quot; should match &quot;/pony\u6B63%2Ejpg&quot;" time="0.000344"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/:file.:ext&quot; should match &quot;/pony\u6B63%2ejpg&quot;" time="0.000343"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/:file.:ext&quot; should match &quot;/pony\u6B63..jpg&quot;" time="0.000342"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/:file.:ext&quot; should not match &quot;/.jpg&quot;" time="0.000383"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/:file.:ext&quot; to_s should be == /:file.:ext" time="0.000120"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/:file.:ext&quot; inspect should be == #&lt;Mustermann::Simple:&quot;/:file.:ext&quot;&gt;" time="0.000135"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/:file.:ext&quot; names should be a kind of Array" time="0.000142"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/:id/test.bar&quot; string should be immune to external change" time="0.000093"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/:id/test.bar&quot; should match &quot;/3/test.bar&quot;" time="0.000371"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/:id/test.bar&quot; should match &quot;/2/test.bar&quot;" time="0.000369"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/:id/test.bar&quot; should match &quot;/2E/test.bar&quot;" time="0.000354"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/:id/test.bar&quot; should match &quot;/2e/test.bar&quot;" time="0.000345"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/:id/test.bar&quot; should match &quot;/%2E/test.bar&quot;" time="0.000340"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/:id/test.bar&quot; to_s should be == /:id/test.bar" time="0.000118"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/:id/test.bar&quot; inspect should be == #&lt;Mustermann::Simple:&quot;/:id/test.bar&quot;&gt;" time="0.000165"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/:id/test.bar&quot; names should be a kind of Array" time="0.000139"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/10/:id&quot; string should be immune to external change" time="0.000092"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/10/:id&quot; should match &quot;/10/test&quot;" time="0.000365"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/10/:id&quot; should match &quot;/10/te.st&quot;" time="0.000346"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/10/:id&quot; to_s should be == /10/:id" time="0.000116"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/10/:id&quot; inspect should be == #&lt;Mustermann::Simple:&quot;/10/:id&quot;&gt;" time="0.000167"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/10/:id&quot; names should be a kind of Array" time="0.000147"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/10.1/:id&quot; string should be immune to external change" time="0.000094"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/10.1/:id&quot; should match &quot;/10.1/test&quot;" time="0.000376"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/10.1/:id&quot; should match &quot;/10.1/te.st&quot;" time="0.000346"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/10.1/:id&quot; to_s should be == /10.1/:id" time="0.000116"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/10.1/:id&quot; inspect should be == #&lt;Mustermann::Simple:&quot;/10.1/:id&quot;&gt;" time="0.000139"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/10.1/:id&quot; names should be a kind of Array" time="0.000140"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/foo?&quot; string should be immune to external change" time="0.000089"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/foo?&quot; should match &quot;/fo&quot;" time="0.000389"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/foo?&quot; should match &quot;/foo&quot;" time="0.000354"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/foo?&quot; should not match &quot;&quot;" time="0.000344"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/foo?&quot; should not match &quot;/&quot;" time="0.000375"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/foo?&quot; should not match &quot;/f&quot;" time="0.000341"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/foo?&quot; should not match &quot;/fooo&quot;" time="0.000341"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/foo?&quot; to_s should be == /foo?" time="0.000116"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/foo?&quot; inspect should be == #&lt;Mustermann::Simple:&quot;/foo?&quot;&gt;" time="0.000133"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/foo?&quot; names should be a kind of Array" time="0.000141"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/:fOO&quot; string should be immune to external change" time="0.000093"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/:fOO&quot; should match &quot;/a&quot;" time="0.000367"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/:fOO&quot; to_s should be == /:fOO" time="0.000115"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/:fOO&quot; inspect should be == #&lt;Mustermann::Simple:&quot;/:fOO&quot;&gt;" time="0.000133"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/:fOO&quot; names should be a kind of Array" time="0.000135"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/:_X&quot; string should be immune to external change" time="0.000088"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/:_X&quot; should match &quot;/a&quot;" time="0.000364"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/:_X&quot; to_s should be == /: X" time="0.000118"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/:_X&quot; inspect should be == #&lt;Mustermann::Simple:&quot;/: X&quot;&gt;" time="0.000134"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/:_X&quot; names should be a kind of Array" time="0.000137"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/:f00&quot; string should be immune to external change" time="0.000094"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/:f00&quot; should match &quot;/a&quot;" time="0.000459"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/:f00&quot; to_s should be == /:f00" time="0.000128"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/:f00&quot; inspect should be == #&lt;Mustermann::Simple:&quot;/:f00&quot;&gt;" time="0.000146"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/:f00&quot; names should be a kind of Array" time="0.000152"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/:foo.?&quot; string should be immune to external change" time="0.000103"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/:foo.?&quot; should match &quot;/a.&quot;" time="0.000422"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/:foo.?&quot; should match &quot;/xy&quot;" time="0.000374"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/:foo.?&quot; to_s should be == /:foo.?" time="0.000117"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/:foo.?&quot; inspect should be == #&lt;Mustermann::Simple:&quot;/:foo.?&quot;&gt;" time="0.000133"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/:foo.?&quot; names should be a kind of Array" time="0.000137"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/(a)&quot; string should be immune to external change" time="0.000092"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/(a)&quot; should match &quot;/(a)&quot;" time="0.000381"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/(a)&quot; should not match &quot;/a&quot;" time="0.000367"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/(a)&quot; to_s should be == /(a)" time="0.000115"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/(a)&quot; inspect should be == #&lt;Mustermann::Simple:&quot;/(a)&quot;&gt;" time="0.000133"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/(a)&quot; names should be a kind of Array" time="0.000152"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/:foo.?&quot; with options {:greedy=&gt;false} string should be immune to external change" time="0.000115"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/:foo.?&quot; with options {:greedy=&gt;false} should match &quot;/a.&quot;" time="0.039869"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/:foo.?&quot; with options {:greedy=&gt;false} should match &quot;/xy&quot;" time="0.000411"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/:foo.?&quot; with options {:greedy=&gt;false} to_s should be == /:foo.?" time="0.000141"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/:foo.?&quot; with options {:greedy=&gt;false} inspect should be == #&lt;Mustermann::Simple:&quot;/:foo.?&quot;&gt;" time="0.000150"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/:foo.?&quot; with options {:greedy=&gt;false} names should be a kind of Array" time="0.000149"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/foo?&quot; with options {:uri_decode=&gt;false} string should be immune to external change" time="0.000094"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/foo?&quot; with options {:uri_decode=&gt;false} should match &quot;/foo&quot;" time="0.000399"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/foo?&quot; with options {:uri_decode=&gt;false} should match &quot;/fo&quot;" time="0.000389"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/foo?&quot; with options {:uri_decode=&gt;false} should not match &quot;/foo?&quot;" time="0.000471"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/foo?&quot; with options {:uri_decode=&gt;false} to_s should be == /foo?" time="0.000123"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/foo?&quot; with options {:uri_decode=&gt;false} inspect should be == #&lt;Mustermann::Simple:&quot;/foo?&quot;&gt;" time="0.000136"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/foo?&quot; with options {:uri_decode=&gt;false} names should be a kind of Array" time="0.000166"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/foo/bar&quot; with options {:uri_decode=&gt;false} string should be immune to external change" time="0.000106"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/foo/bar&quot; with options {:uri_decode=&gt;false} should match &quot;/foo/bar&quot;" time="0.000356"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/foo/bar&quot; with options {:uri_decode=&gt;false} should not match &quot;/foo%2Fbar&quot;" time="0.000456"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/foo/bar&quot; with options {:uri_decode=&gt;false} should not match &quot;/foo%2fbar&quot;" time="0.000362"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/foo/bar&quot; with options {:uri_decode=&gt;false} to_s should be == /foo/bar" time="0.000121"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/foo/bar&quot; with options {:uri_decode=&gt;false} inspect should be == #&lt;Mustermann::Simple:&quot;/foo/bar&quot;&gt;" time="0.000137"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/foo/bar&quot; with options {:uri_decode=&gt;false} names should be a kind of Array" time="0.000138"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/path with spaces&quot; with options {:uri_decode=&gt;false} string should be immune to external change" time="0.000090"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/path with spaces&quot; with options {:uri_decode=&gt;false} should match &quot;/path with spaces&quot;" time="0.000362"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/path with spaces&quot; with options {:uri_decode=&gt;false} should not match &quot;/path%20with%20spaces&quot;" time="0.000356"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/path with spaces&quot; with options {:uri_decode=&gt;false} should not match &quot;/path%2Bwith%2Bspaces&quot;" time="0.000363"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/path with spaces&quot; with options {:uri_decode=&gt;false} should not match &quot;/path+with+spaces&quot;" time="0.000350"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/path with spaces&quot; with options {:uri_decode=&gt;false} to_s should be == /path with spaces" time="0.000119"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/path with spaces&quot; with options {:uri_decode=&gt;false} inspect should be == #&lt;Mustermann::Simple:&quot;/path with spaces&quot;&gt;" time="0.000135"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/path with spaces&quot; with options {:uri_decode=&gt;false} names should be a kind of Array" time="0.000134"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/path with spaces&quot; with options {:space_matches_plus=&gt;false} string should be immune to external change" time="0.000091"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/path with spaces&quot; with options {:space_matches_plus=&gt;false} should match &quot;/path%20with%20spaces&quot;" time="0.000367"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/path with spaces&quot; with options {:space_matches_plus=&gt;false} should not match &quot;/path%2Bwith%2Bspaces&quot;" time="0.000350"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple pattern &quot;/path with spaces&quot; with options {:space_matches_plus=&gt;false} should not match &quot;/path+with+spaces&quot;" time="0.000457"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/path with spaces&quot; with options {:space_matches_plus=&gt;false} to_s should be == /path with spaces" time="0.000124"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/path with spaces&quot; with options {:space_matches_plus=&gt;false} inspect should be == #&lt;Mustermann::Simple:&quot;/path with spaces&quot;&gt;" time="0.000137"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Simple pattern &quot;/path with spaces&quot; with options {:space_matches_plus=&gt;false} names should be a kind of Array" time="0.000140"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple error handling ? at beginning of route" time="0.000303"/>
  <testcase classname="spec.simple_spec" name="Mustermann::Simple error handling invalid capture name" time="0.000183"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;&quot; string should be immune to external change" time="0.000119"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;&quot; should match &quot;&quot;" time="0.000440"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;&quot; should not match &quot;/&quot;" time="0.000402"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;&quot; to_s should be == " time="0.000123"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;&quot; inspect should be == #&lt;Mustermann::Sinatra:&quot;&quot;&gt;" time="0.000139"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;&quot; names should be a kind of Array" time="0.000142"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/&quot; string should be immune to external change" time="0.000092"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/&quot; should match &quot;/&quot;" time="0.000357"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/&quot; should not match &quot;/foo&quot;" time="0.000355"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/&quot; to_s should be == /" time="0.000123"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/&quot; inspect should be == #&lt;Mustermann::Sinatra:&quot;/&quot;&gt;" time="0.000160"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/&quot; names should be a kind of Array" time="0.000135"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/foo&quot; string should be immune to external change" time="0.000091"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/foo&quot; should match &quot;/foo&quot;" time="0.000382"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/foo&quot; should not match &quot;/bar&quot;" time="0.000369"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/foo&quot; should not match &quot;/foo.bar&quot;" time="0.000392"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/foo&quot; to_s should be == /foo" time="0.000134"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/foo&quot; inspect should be == #&lt;Mustermann::Sinatra:&quot;/foo&quot;&gt;" time="0.000137"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/foo&quot; names should be a kind of Array" time="0.000134"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/foo/bar&quot; string should be immune to external change" time="0.000088"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/foo/bar&quot; should match &quot;/foo/bar&quot;" time="0.000373"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/foo/bar&quot; should not match &quot;/foo%2Fbar&quot;" time="0.000353"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/foo/bar&quot; should not match &quot;/foo%2fbar&quot;" time="0.000354"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/foo/bar&quot; to_s should be == /foo/bar" time="0.000118"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/foo/bar&quot; inspect should be == #&lt;Mustermann::Sinatra:&quot;/foo/bar&quot;&gt;" time="0.000134"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/foo/bar&quot; names should be a kind of Array" time="0.000154"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/foo\\/bar&quot; string should be immune to external change" time="0.000090"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/foo\\/bar&quot; should match &quot;/foo/bar&quot;" time="0.000368"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/foo\\/bar&quot; should match &quot;/foo%2Fbar&quot;" time="0.000345"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/foo\\/bar&quot; should match &quot;/foo%2fbar&quot;" time="0.000351"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/foo\\/bar&quot; to_s should be == /foo\/bar" time="0.000121"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/foo\\/bar&quot; inspect should be == #&lt;Mustermann::Sinatra:&quot;/foo\\/bar&quot;&gt;" time="0.000134"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/foo\\/bar&quot; names should be a kind of Array" time="0.000137"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:foo&quot; string should be immune to external change" time="0.000091"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo&quot; should match &quot;/foo&quot;" time="0.000373"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo&quot; should match &quot;/bar&quot;" time="0.000358"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo&quot; should match &quot;/foo.bar&quot;" time="0.000355"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo&quot; should match &quot;/%0Afoo&quot;" time="0.000354"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo&quot; should match &quot;/foo%2Fbar&quot;" time="0.000352"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo&quot; should not match &quot;/foo?&quot;" time="0.000356"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo&quot; should not match &quot;/foo/bar&quot;" time="0.000348"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo&quot; should not match &quot;/&quot;" time="0.000342"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo&quot; should not match &quot;/foo/&quot;" time="0.000341"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:foo&quot; to_s should be == /:foo" time="0.000119"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:foo&quot; inspect should be == #&lt;Mustermann::Sinatra:&quot;/:foo&quot;&gt;" time="0.000136"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:foo&quot; names should be a kind of Array" time="0.000136"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/f\u00F6\u00F6&quot; string should be immune to external change" time="0.000089"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/f\u00F6\u00F6&quot; should match &quot;/f%C3%B6%C3%B6&quot;" time="0.000538"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/f\u00F6\u00F6&quot; to_s should be == /föö" time="0.000144"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/f\u00F6\u00F6&quot; inspect should be == #&lt;Mustermann::Sinatra:&quot;/f\u00F6\u00F6&quot;&gt;" time="0.000162"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/f\u00F6\u00F6&quot; names should be a kind of Array" time="0.000197"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:foo/:bar&quot; string should be immune to external change" time="0.000106"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo/:bar&quot; should match &quot;/foo/bar&quot;" time="0.000431"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo/:bar&quot; should match &quot;/foo.bar/bar.foo&quot;" time="0.000348"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo/:bar&quot; should match &quot;/user@example.com/name&quot;" time="0.000344"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo/:bar&quot; should match &quot;/10.1/te.st&quot;" time="0.000344"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo/:bar&quot; should match &quot;/10.1.2/te.st&quot;" time="0.000342"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo/:bar&quot; should not match &quot;/foo%2Fbar&quot;" time="0.000342"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo/:bar&quot; should not match &quot;/foo%2fbar&quot;" time="0.000337"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo/:bar&quot; should be == {&quot;foo&quot;=&gt;&quot;bar&quot;, &quot;bar&quot;=&gt;&quot;foo&quot;}" time="0.001839"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo/:bar&quot; should be nil" time="0.000122"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:foo/:bar&quot; to_s should be == /:foo/:bar" time="0.000124"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:foo/:bar&quot; inspect should be == #&lt;Mustermann::Sinatra:&quot;/:foo/:bar&quot;&gt;" time="0.000143"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:foo/:bar&quot; names should be a kind of Array" time="0.000138"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/hello/:person&quot; string should be immune to external change" time="0.000096"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/hello/:person&quot; should match &quot;/hello/Frank&quot;" time="0.000380"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/hello/:person&quot; to_s should be == /hello/:person" time="0.000120"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/hello/:person&quot; inspect should be == #&lt;Mustermann::Sinatra:&quot;/hello/:person&quot;&gt;" time="0.000138"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/hello/:person&quot; names should be a kind of Array" time="0.000136"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/?:foo?/?:bar?&quot; string should be immune to external change" time="0.000090"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/?:foo?/?:bar?&quot; should match &quot;/hello/world&quot;" time="0.000371"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/?:foo?/?:bar?&quot; should match &quot;/hello&quot;" time="0.000347"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/?:foo?/?:bar?&quot; should match &quot;/&quot;" time="0.000341"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/?:foo?/?:bar?&quot; should match &quot;&quot;" time="0.000340"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/?:foo?/?:bar?&quot; should not match &quot;/hello/world/&quot;" time="0.000340"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/?:foo?/?:bar?&quot; to_s should be == /?:foo?/?:bar?" time="0.000118"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/?:foo?/?:bar?&quot; inspect should be == #&lt;Mustermann::Sinatra:&quot;/?:foo?/?:bar?&quot;&gt;" time="0.000135"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/?:foo?/?:bar?&quot; names should be a kind of Array" time="0.000150"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:foo_bar&quot; string should be immune to external change" time="0.000103"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo_bar&quot; should match &quot;/hello&quot;" time="0.000360"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:foo_bar&quot; to_s should be == /:foo bar" time="0.000122"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:foo_bar&quot; inspect should be == #&lt;Mustermann::Sinatra:&quot;/:foo bar&quot;&gt;" time="0.000136"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:foo_bar&quot; names should be a kind of Array" time="0.000133"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/*&quot; string should be immune to external change" time="0.000090"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/*&quot; should match &quot;/&quot;" time="0.000355"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/*&quot; should match &quot;/foo&quot;" time="0.000342"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/*&quot; should match &quot;/foo/bar&quot;" time="0.000340"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/*&quot; should be == {&quot;splat&quot;=&gt;[&quot;foo&quot;]}" time="0.001816"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/*&quot; to_s should be == /*" time="0.000125"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/*&quot; inspect should be == #&lt;Mustermann::Sinatra:&quot;/*&quot;&gt;" time="0.000140"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/*&quot; names should be a kind of Array" time="0.000143"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:foo/*&quot; string should be immune to external change" time="0.000118"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo/*&quot; should match &quot;/foo/bar/baz&quot;" time="0.000627"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo/*&quot; should match &quot;/foo/&quot;" time="0.000557"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo/*&quot; should match &quot;/h%20w/h%20a%20y&quot;" time="0.000350"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo/*&quot; should not match &quot;/foo&quot;" time="0.000444"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo/*&quot; should be == {&quot;splat&quot;=&gt;[&quot;foo&quot;], &quot;foo&quot;=&gt;&quot;bar&quot;}" time="0.001800"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo/*&quot; should be == {&quot;splat&quot;=&gt;[&quot;foo/f o&quot;], &quot;foo&quot;=&gt;&quot;bar&quot;}" time="0.000150"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:foo/*&quot; to_s should be == /:foo/*" time="0.000128"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:foo/*&quot; inspect should be == #&lt;Mustermann::Sinatra:&quot;/:foo/*&quot;&gt;" time="0.000146"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:foo/*&quot; names should be a kind of Array" time="0.000147"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/test$/&quot; string should be immune to external change" time="0.000091"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/test$/&quot; should match &quot;/test$/&quot;" time="0.000363"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/test$/&quot; to_s should be == /test$/" time="0.000119"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/test$/&quot; inspect should be == #&lt;Mustermann::Sinatra:&quot;/test$/&quot;&gt;" time="0.000134"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/test$/&quot; names should be a kind of Array" time="0.000137"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/te+st/&quot; string should be immune to external change" time="0.000090"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/te+st/&quot; should match &quot;/te+st/&quot;" time="0.000360"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/te+st/&quot; should not match &quot;/test/&quot;" time="0.000345"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/te+st/&quot; should not match &quot;/teest/&quot;" time="0.000555"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/te+st/&quot; to_s should be == /te+st/" time="0.000124"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/te+st/&quot; inspect should be == #&lt;Mustermann::Sinatra:&quot;/te+st/&quot;&gt;" time="0.000138"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/te+st/&quot; names should be a kind of Array" time="0.000137"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/path with spaces&quot; string should be immune to external change" time="0.000092"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/path with spaces&quot; should match &quot;/path%20with%20spaces&quot;" time="0.000457"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/path with spaces&quot; should match &quot;/path%2Bwith%2Bspaces&quot;" time="0.000342"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/path with spaces&quot; should match &quot;/path+with+spaces&quot;" time="0.000345"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/path with spaces&quot; to_s should be == /path with spaces" time="0.000120"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/path with spaces&quot; inspect should be == #&lt;Mustermann::Sinatra:&quot;/path with spaces&quot;&gt;" time="0.000135"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/path with spaces&quot; names should be a kind of Array" time="0.000135"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/foo&amp;bar&quot; string should be immune to external change" time="0.000090"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/foo&amp;bar&quot; should match &quot;/foo&amp;bar&quot;" time="0.000376"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/foo&amp;bar&quot; to_s should be == /foo&amp;bar" time="0.000130"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/foo&amp;bar&quot; inspect should be == #&lt;Mustermann::Sinatra:&quot;/foo&amp;bar&quot;&gt;" time="0.000131"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/foo&amp;bar&quot; names should be a kind of Array" time="0.000133"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/*/:foo/*/*&quot; string should be immune to external change" time="0.000088"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/*/:foo/*/*&quot; should match &quot;/bar/foo/bling/baz/boom&quot;" time="0.000398"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/*/:foo/*/*&quot; should capture all splat parts" time="0.000098"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/*/:foo/*/*&quot; should map to proper params" time="0.001791"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/*/:foo/*/*&quot; to_s should be == /*/:foo/*/*" time="0.000124"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/*/:foo/*/*&quot; inspect should be == #&lt;Mustermann::Sinatra:&quot;/*/:foo/*/*&quot;&gt;" time="0.000143"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/*/:foo/*/*&quot; names should be a kind of Array" time="0.000139"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/test.bar&quot; string should be immune to external change" time="0.000090"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/test.bar&quot; should match &quot;/test.bar&quot;" time="0.000369"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/test.bar&quot; should not match &quot;/test0bar&quot;" time="0.000348"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/test.bar&quot; to_s should be == /test.bar" time="0.000116"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/test.bar&quot; inspect should be == #&lt;Mustermann::Sinatra:&quot;/test.bar&quot;&gt;" time="0.000136"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/test.bar&quot; names should be a kind of Array" time="0.000150"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:file.:ext&quot; string should be immune to external change" time="0.000098"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:file.:ext&quot; should match &quot;/pony.jpg&quot;" time="0.000374"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:file.:ext&quot; should match &quot;/pony%2Ejpg&quot;" time="0.000346"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:file.:ext&quot; should match &quot;/pony%2ejpg&quot;" time="0.000349"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:file.:ext&quot; should match &quot;/pony%E6%AD%A3%2Ejpg&quot;" time="0.000343"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:file.:ext&quot; should match &quot;/pony%e6%ad%a3%2ejpg&quot;" time="0.000342"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:file.:ext&quot; should match &quot;/pony\u6B63%2Ejpg&quot;" time="0.000343"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:file.:ext&quot; should match &quot;/pony\u6B63%2ejpg&quot;" time="0.000439"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:file.:ext&quot; should match &quot;/pony\u6B63..jpg&quot;" time="0.000347"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:file.:ext&quot; should not match &quot;/.jpg&quot;" time="0.000338"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:file.:ext&quot; to_s should be == /:file.:ext" time="0.000119"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:file.:ext&quot; inspect should be == #&lt;Mustermann::Sinatra:&quot;/:file.:ext&quot;&gt;" time="0.000137"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:file.:ext&quot; names should be a kind of Array" time="0.000138"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/(:a)x?&quot; string should be immune to external change" time="0.000092"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/(:a)x?&quot; should match &quot;/a&quot;" time="0.000369"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/(:a)x?&quot; should match &quot;/xa&quot;" time="0.000347"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/(:a)x?&quot; should match &quot;/axa&quot;" time="0.000346"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/(:a)x?&quot; should match &quot;/ax&quot;" time="0.000343"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/(:a)x?&quot; should match &quot;/axax&quot;" time="0.000343"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/(:a)x?&quot; should match &quot;/axaxx&quot;" time="0.000350"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/(:a)x?&quot; to_s should be == /(:a)x?" time="0.000117"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/(:a)x?&quot; inspect should be == #&lt;Mustermann::Sinatra:&quot;/(:a)x?&quot;&gt;" time="0.000135"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/(:a)x?&quot; names should be a kind of Array" time="0.000135"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:user(@:host)?&quot; string should be immune to external change" time="0.000089"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:user(@:host)?&quot; should match &quot;/foo@bar&quot;" time="0.000380"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:user(@:host)?&quot; should match &quot;/foo.foo@bar&quot;" time="0.000373"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:user(@:host)?&quot; should match &quot;/foo@bar.bar&quot;" time="0.000379"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:user(@:host)?&quot; to_s should be == /:user(@:host)?" time="0.000117"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:user(@:host)?&quot; inspect should be == #&lt;Mustermann::Sinatra:&quot;/:user(@:host)?&quot;&gt;" time="0.000136"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:user(@:host)?&quot; names should be a kind of Array" time="0.000136"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:file(.:ext)?&quot; string should be immune to external change" time="0.000090"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:file(.:ext)?&quot; should match &quot;/pony&quot;" time="0.000377"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:file(.:ext)?&quot; should match &quot;/pony.jpg&quot;" time="0.000346"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:file(.:ext)?&quot; should match &quot;/pony%2Ejpg&quot;" time="0.000347"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:file(.:ext)?&quot; should match &quot;/pony%2ejpg&quot;" time="0.000369"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:file(.:ext)?&quot; should match &quot;/pony.png.jpg&quot;" time="0.000356"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:file(.:ext)?&quot; should match &quot;/pony.&quot;" time="0.000343"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:file(.:ext)?&quot; should not match &quot;/.jpg&quot;" time="0.000339"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:file(.:ext)?&quot; to_s should be == /:file(.:ext)?" time="0.000118"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:file(.:ext)?&quot; inspect should be == #&lt;Mustermann::Sinatra:&quot;/:file(.:ext)?&quot;&gt;" time="0.000134"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:file(.:ext)?&quot; names should be a kind of Array" time="0.000193"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:id/test.bar&quot; string should be immune to external change" time="0.000108"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:id/test.bar&quot; should match &quot;/3/test.bar&quot;" time="0.000383"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:id/test.bar&quot; should match &quot;/2/test.bar&quot;" time="0.000381"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:id/test.bar&quot; should match &quot;/2E/test.bar&quot;" time="0.000353"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:id/test.bar&quot; should match &quot;/2e/test.bar&quot;" time="0.000348"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:id/test.bar&quot; should match &quot;/%2E/test.bar&quot;" time="0.000338"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:id/test.bar&quot; to_s should be == /:id/test.bar" time="0.000118"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:id/test.bar&quot; inspect should be == #&lt;Mustermann::Sinatra:&quot;/:id/test.bar&quot;&gt;" time="0.000135"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:id/test.bar&quot; names should be a kind of Array" time="0.000139"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/10/:id&quot; string should be immune to external change" time="0.000092"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/10/:id&quot; should match &quot;/10/test&quot;" time="0.000372"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/10/:id&quot; should match &quot;/10/te.st&quot;" time="0.000342"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/10/:id&quot; to_s should be == /10/:id" time="0.000114"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/10/:id&quot; inspect should be == #&lt;Mustermann::Sinatra:&quot;/10/:id&quot;&gt;" time="0.000133"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/10/:id&quot; names should be a kind of Array" time="0.000137"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/10.1/:id&quot; string should be immune to external change" time="0.000086"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/10.1/:id&quot; should match &quot;/10.1/test&quot;" time="0.000377"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/10.1/:id&quot; should match &quot;/10.1/te.st&quot;" time="0.000346"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/10.1/:id&quot; to_s should be == /10.1/:id" time="0.000116"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/10.1/:id&quot; inspect should be == #&lt;Mustermann::Sinatra:&quot;/10.1/:id&quot;&gt;" time="0.000134"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/10.1/:id&quot; names should be a kind of Array" time="0.000141"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:foo.:bar/:id&quot; string should be immune to external change" time="0.000094"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo.:bar/:id&quot; should match &quot;/10.1/te.st&quot;" time="0.000470"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo.:bar/:id&quot; should match &quot;/10.1.2/te.st&quot;" time="0.000420"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:foo.:bar/:id&quot; to_s should be == /:foo.:bar/:id" time="0.000114"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:foo.:bar/:id&quot; inspect should be == #&lt;Mustermann::Sinatra:&quot;/:foo.:bar/:id&quot;&gt;" time="0.000133"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:foo.:bar/:id&quot; names should be a kind of Array" time="0.000137"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:a/:b.?:c?&quot; string should be immune to external change" time="0.000093"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:a/:b.?:c?&quot; should match &quot;/a/b&quot;" time="0.000465"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:a/:b.?:c?&quot; should match &quot;/a/b.c&quot;" time="0.000349"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:a/:b.?:c?&quot; should match &quot;/a.b/c&quot;" time="0.000347"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:a/:b.?:c?&quot; should match &quot;/a.b/c.d&quot;" time="0.000343"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:a/:b.?:c?&quot; should not match &quot;/a.b/c.d/e&quot;" time="0.000346"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:a/:b.?:c?&quot; to_s should be == /:a/:b.?:c?" time="0.000121"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:a/:b.?:c?&quot; inspect should be == #&lt;Mustermann::Sinatra:&quot;/:a/:b.?:c?&quot;&gt;" time="0.000135"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:a/:b.?:c?&quot; names should be a kind of Array" time="0.000140"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:a(foo:b)?&quot; string should be immune to external change" time="0.000091"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:a(foo:b)?&quot; should match &quot;/barfoobar&quot;" time="0.000465"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:a(foo:b)?&quot; should match &quot;/barfoobarfoobar&quot;" time="0.000483"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:a(foo:b)?&quot; should match &quot;/bar&quot;" time="0.000352"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:a(foo:b)?&quot; should not match &quot;/&quot;" time="0.000346"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:a(foo:b)?&quot; to_s should be == /:a(foo:b)?" time="0.000123"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:a(foo:b)?&quot; inspect should be == #&lt;Mustermann::Sinatra:&quot;/:a(foo:b)?&quot;&gt;" time="0.000139"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:a(foo:b)?&quot; names should be a kind of Array" time="0.000142"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/foo?&quot; string should be immune to external change" time="0.000097"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/foo?&quot; should match &quot;/fo&quot;" time="0.000361"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/foo?&quot; should match &quot;/foo&quot;" time="0.000341"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/foo?&quot; should not match &quot;&quot;" time="0.000339"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/foo?&quot; should not match &quot;/&quot;" time="0.000341"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/foo?&quot; should not match &quot;/f&quot;" time="0.000339"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/foo?&quot; should not match &quot;/fooo&quot;" time="0.000338"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/foo?&quot; to_s should be == /foo?" time="0.000117"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/foo?&quot; inspect should be == #&lt;Mustermann::Sinatra:&quot;/foo?&quot;&gt;" time="0.000133"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/foo?&quot; names should be a kind of Array" time="0.000138"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/foo\\?&quot; string should be immune to external change" time="0.000118"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/foo\\?&quot; should match &quot;/foo?&quot;" time="0.000438"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/foo\\?&quot; should not match &quot;/foo\\?&quot;" time="0.000345"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/foo\\?&quot; should not match &quot;/fo&quot;" time="0.000341"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/foo\\?&quot; should not match &quot;/foo&quot;" time="0.000342"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/foo\\?&quot; should not match &quot;&quot;" time="0.000333"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/foo\\?&quot; should not match &quot;/&quot;" time="0.000336"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/foo\\?&quot; should not match &quot;/f&quot;" time="0.000336"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/foo\\?&quot; should not match &quot;/fooo&quot;" time="0.000337"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/foo\\?&quot; to_s should be == /foo\?" time="0.000119"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/foo\\?&quot; inspect should be == #&lt;Mustermann::Sinatra:&quot;/foo\\?&quot;&gt;" time="0.000134"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/foo\\?&quot; names should be a kind of Array" time="0.000139"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/foo\\\\?&quot; string should be immune to external change" time="0.000160"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/foo\\\\?&quot; should match &quot;/foo%5c&quot;" time="0.000366"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/foo\\\\?&quot; should match &quot;/foo&quot;" time="0.000340"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/foo\\\\?&quot; should not match &quot;/foo\\?&quot;" time="0.000340"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/foo\\\\?&quot; should not match &quot;/fo&quot;" time="0.000341"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/foo\\\\?&quot; should not match &quot;&quot;" time="0.041268"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/foo\\\\?&quot; should not match &quot;/&quot;" time="0.000401"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/foo\\\\?&quot; should not match &quot;/f&quot;" time="0.000349"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/foo\\\\?&quot; should not match &quot;/fooo&quot;" time="0.000358"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/foo\\\\?&quot; to_s should be == /foo\\?" time="0.000147"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/foo\\\\?&quot; inspect should be == #&lt;Mustermann::Sinatra:&quot;/foo\\\\?&quot;&gt;" time="0.000151"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/foo\\\\?&quot; names should be a kind of Array" time="0.000153"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/\\(&quot; string should be immune to external change" time="0.000092"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/\\(&quot; should match &quot;/(&quot;" time="0.000369"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/\\(&quot; to_s should be == /\(" time="0.000117"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/\\(&quot; inspect should be == #&lt;Mustermann::Sinatra:&quot;/\\(&quot;&gt;" time="0.000133"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/\\(&quot; names should be a kind of Array" time="0.000135"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/\\(?&quot; string should be immune to external change" time="0.000089"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/\\(?&quot; should match &quot;/(&quot;" time="0.000360"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/\\(?&quot; should match &quot;/&quot;" time="0.000348"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/\\(?&quot; to_s should be == /\(?" time="0.000117"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/\\(?&quot; inspect should be == #&lt;Mustermann::Sinatra:&quot;/\\(?&quot;&gt;" time="0.000157"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/\\(?&quot; names should be a kind of Array" time="0.000168"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/(\\()?&quot; string should be immune to external change" time="0.000089"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/(\\()?&quot; should match &quot;/(&quot;" time="0.000359"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/(\\()?&quot; should match &quot;/&quot;" time="0.000344"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/(\\()?&quot; to_s should be == /(\()?" time="0.000117"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/(\\()?&quot; inspect should be == #&lt;Mustermann::Sinatra:&quot;/(\\()?&quot;&gt;" time="0.000135"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/(\\()?&quot; names should be a kind of Array" time="0.000133"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/(\\(\\))?&quot; string should be immune to external change" time="0.000089"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/(\\(\\))?&quot; should match &quot;/&quot;" time="0.000379"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/(\\(\\))?&quot; should match &quot;/()&quot;" time="0.000388"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/(\\(\\))?&quot; should not match &quot;/(&quot;" time="0.000395"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/(\\(\\))?&quot; to_s should be == /(\(\))?" time="0.000118"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/(\\(\\))?&quot; inspect should be == #&lt;Mustermann::Sinatra:&quot;/(\\(\\))?&quot;&gt;" time="0.000137"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/(\\(\\))?&quot; names should be a kind of Array" time="0.000138"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/\\(\\)?&quot; string should be immune to external change" time="0.000090"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/\\(\\)?&quot; should match &quot;/(&quot;" time="0.000374"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/\\(\\)?&quot; should match &quot;/()&quot;" time="0.000373"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/\\(\\)?&quot; should not match &quot;/&quot;" time="0.000372"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/\\(\\)?&quot; to_s should be == /\(\)?" time="0.000121"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/\\(\\)?&quot; inspect should be == #&lt;Mustermann::Sinatra:&quot;/\\(\\)?&quot;&gt;" time="0.000157"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/\\(\\)?&quot; names should be a kind of Array" time="0.000175"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/\\*&quot; string should be immune to external change" time="0.000101"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/\\*&quot; should match &quot;/*&quot;" time="0.000407"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/\\*&quot; should not match &quot;/a&quot;" time="0.000357"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/\\*&quot; to_s should be == /\*" time="0.000118"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/\\*&quot; inspect should be == #&lt;Mustermann::Sinatra:&quot;/\\*&quot;&gt;" time="0.000133"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/\\*&quot; names should be a kind of Array" time="0.000133"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/\\*/*&quot; string should be immune to external change" time="0.000090"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/\\*/*&quot; should match &quot;/*/b/c&quot;" time="0.000396"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/\\*/*&quot; should not match &quot;/a/b/c&quot;" time="0.000378"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/\\*/*&quot; to_s should be == /\*/*" time="0.000118"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/\\*/*&quot; inspect should be == #&lt;Mustermann::Sinatra:&quot;/\\*/*&quot;&gt;" time="0.000135"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/\\*/*&quot; names should be a kind of Array" time="0.000138"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/\\:foo&quot; string should be immune to external change" time="0.000089"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/\\:foo&quot; should match &quot;/:foo&quot;" time="0.000367"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/\\:foo&quot; should not match &quot;/foo&quot;" time="0.000360"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/\\:foo&quot; to_s should be == /\:foo" time="0.000117"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/\\:foo&quot; inspect should be == #&lt;Mustermann::Sinatra:&quot;/\\:foo&quot;&gt;" time="0.000132"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/\\:foo&quot; names should be a kind of Array" time="0.000155"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:fOO&quot; string should be immune to external change" time="0.000101"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:fOO&quot; should match &quot;/a&quot;" time="0.000370"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:fOO&quot; to_s should be == /:fOO" time="0.000114"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:fOO&quot; inspect should be == #&lt;Mustermann::Sinatra:&quot;/:fOO&quot;&gt;" time="0.000132"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:fOO&quot; names should be a kind of Array" time="0.000132"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:_X&quot; string should be immune to external change" time="0.000089"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:_X&quot; should match &quot;/a&quot;" time="0.000375"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:_X&quot; to_s should be == /: X" time="0.000118"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:_X&quot; inspect should be == #&lt;Mustermann::Sinatra:&quot;/: X&quot;&gt;" time="0.000135"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:_X&quot; names should be a kind of Array" time="0.000135"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:f00&quot; string should be immune to external change" time="0.000089"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:f00&quot; should match &quot;/a&quot;" time="0.000371"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:f00&quot; to_s should be == /:f00" time="0.000116"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:f00&quot; inspect should be == #&lt;Mustermann::Sinatra:&quot;/:f00&quot;&gt;" time="0.000130"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:f00&quot; names should be a kind of Array" time="0.000150"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:foo(/:bar)?/:baz?&quot; string should be immune to external change" time="0.000101"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo(/:bar)?/:baz?&quot; should match &quot;/foo/bar/baz&quot;" time="0.000417"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:foo(/:bar)?/:baz?&quot; to_s should be == /:foo(/:bar)?/:baz?" time="0.000118"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:foo(/:bar)?/:baz?&quot; inspect should be == #&lt;Mustermann::Sinatra:&quot;/:foo(/:bar)?/:baz?&quot;&gt;" time="0.000132"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:foo(/:bar)?/:baz?&quot; names should be a kind of Array" time="0.000138"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:foo&quot; with options {:capture=&gt;/\d+/} string should be immune to external change" time="0.000090"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo&quot; with options {:capture=&gt;/\d+/} should match &quot;/1&quot;" time="0.000380"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo&quot; with options {:capture=&gt;/\d+/} should match &quot;/123&quot;" time="0.000354"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo&quot; with options {:capture=&gt;/\d+/} should not match &quot;/&quot;" time="0.000353"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo&quot; with options {:capture=&gt;/\d+/} should not match &quot;/foo&quot;" time="0.000367"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:foo&quot; with options {:capture=&gt;/\d+/} to_s should be == /:foo" time="0.000128"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:foo&quot; with options {:capture=&gt;/\d+/} inspect should be == #&lt;Mustermann::Sinatra:&quot;/:foo&quot;&gt;" time="0.000135"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:foo&quot; with options {:capture=&gt;/\d+/} names should be a kind of Array" time="0.000134"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:foo&quot; with options {:capture=&gt;/\d+/} string should be immune to external change" time="0.000088"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo&quot; with options {:capture=&gt;/\d+/} should match &quot;/1&quot;" time="0.000436"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo&quot; with options {:capture=&gt;/\d+/} should match &quot;/123&quot;" time="0.000379"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo&quot; with options {:capture=&gt;/\d+/} should not match &quot;/&quot;" time="0.000350"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo&quot; with options {:capture=&gt;/\d+/} should not match &quot;/foo&quot;" time="0.000344"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:foo&quot; with options {:capture=&gt;/\d+/} to_s should be == /:foo" time="0.000121"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:foo&quot; with options {:capture=&gt;/\d+/} inspect should be == #&lt;Mustermann::Sinatra:&quot;/:foo&quot;&gt;" time="0.000135"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:foo&quot; with options {:capture=&gt;/\d+/} names should be a kind of Array" time="0.000136"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:foo&quot; with options {:capture=&gt;&quot;1&quot;} string should be immune to external change" time="0.000090"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo&quot; with options {:capture=&gt;&quot;1&quot;} should match &quot;/1&quot;" time="0.000387"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo&quot; with options {:capture=&gt;&quot;1&quot;} should not match &quot;/&quot;" time="0.000463"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo&quot; with options {:capture=&gt;&quot;1&quot;} should not match &quot;/foo&quot;" time="0.000388"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo&quot; with options {:capture=&gt;&quot;1&quot;} should not match &quot;/123&quot;" time="0.000367"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:foo&quot; with options {:capture=&gt;&quot;1&quot;} to_s should be == /:foo" time="0.000121"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:foo&quot; with options {:capture=&gt;&quot;1&quot;} inspect should be == #&lt;Mustermann::Sinatra:&quot;/:foo&quot;&gt;" time="0.000220"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:foo&quot; with options {:capture=&gt;&quot;1&quot;} names should be a kind of Array" time="0.000140"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:foo&quot; with options {:capture=&gt;&quot;a.b&quot;} string should be immune to external change" time="0.000091"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo&quot; with options {:capture=&gt;&quot;a.b&quot;} should match &quot;/a.b&quot;" time="0.000454"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo&quot; with options {:capture=&gt;&quot;a.b&quot;} should match &quot;/a%2Eb&quot;" time="0.000353"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo&quot; with options {:capture=&gt;&quot;a.b&quot;} should match &quot;/a%2eb&quot;" time="0.000349"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo&quot; with options {:capture=&gt;&quot;a.b&quot;} should not match &quot;/ab&quot;" time="0.000345"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo&quot; with options {:capture=&gt;&quot;a.b&quot;} should not match &quot;/afb&quot;" time="0.000346"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo&quot; with options {:capture=&gt;&quot;a.b&quot;} should not match &quot;/a1b&quot;" time="0.000423"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo&quot; with options {:capture=&gt;&quot;a.b&quot;} should not match &quot;/a.bc&quot;" time="0.000362"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:foo&quot; with options {:capture=&gt;&quot;a.b&quot;} to_s should be == /:foo" time="0.000123"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:foo&quot; with options {:capture=&gt;&quot;a.b&quot;} inspect should be == #&lt;Mustermann::Sinatra:&quot;/:foo&quot;&gt;" time="0.000137"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:foo&quot; with options {:capture=&gt;&quot;a.b&quot;} names should be a kind of Array" time="0.000154"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:foo(/:bar)?&quot; with options {:capture=&gt;:alpha} string should be immune to external change" time="0.000101"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo(/:bar)?&quot; with options {:capture=&gt;:alpha} should match &quot;/abc&quot;" time="0.000474"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo(/:bar)?&quot; with options {:capture=&gt;:alpha} should match &quot;/a/b&quot;" time="0.000392"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo(/:bar)?&quot; with options {:capture=&gt;:alpha} should match &quot;/a&quot;" time="0.000398"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo(/:bar)?&quot; with options {:capture=&gt;:alpha} should not match &quot;/1/2&quot;" time="0.000372"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo(/:bar)?&quot; with options {:capture=&gt;:alpha} should not match &quot;/a/2&quot;" time="0.000352"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo(/:bar)?&quot; with options {:capture=&gt;:alpha} should not match &quot;/1/b&quot;" time="0.000352"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo(/:bar)?&quot; with options {:capture=&gt;:alpha} should not match &quot;/1&quot;" time="0.000350"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo(/:bar)?&quot; with options {:capture=&gt;:alpha} should not match &quot;/1/&quot;" time="0.000346"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo(/:bar)?&quot; with options {:capture=&gt;:alpha} should not match &quot;/a/&quot;" time="0.000342"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo(/:bar)?&quot; with options {:capture=&gt;:alpha} should not match &quot;//a&quot;" time="0.000335"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:foo(/:bar)?&quot; with options {:capture=&gt;:alpha} to_s should be == /:foo(/:bar)?" time="0.000141"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:foo(/:bar)?&quot; with options {:capture=&gt;:alpha} inspect should be == #&lt;Mustermann::Sinatra:&quot;/:foo(/:bar)?&quot;&gt;" time="0.000151"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:foo(/:bar)?&quot; with options {:capture=&gt;:alpha} names should be a kind of Array" time="0.000136"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:foo&quot; with options {:capture=&gt;[&quot;foo&quot;, &quot;bar&quot;, /\d+/]} string should be immune to external change" time="0.000093"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo&quot; with options {:capture=&gt;[&quot;foo&quot;, &quot;bar&quot;, /\d+/]} should match &quot;/1&quot;" time="0.000388"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo&quot; with options {:capture=&gt;[&quot;foo&quot;, &quot;bar&quot;, /\d+/]} should match &quot;/123&quot;" time="0.000340"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo&quot; with options {:capture=&gt;[&quot;foo&quot;, &quot;bar&quot;, /\d+/]} should match &quot;/foo&quot;" time="0.000338"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo&quot; with options {:capture=&gt;[&quot;foo&quot;, &quot;bar&quot;, /\d+/]} should match &quot;/bar&quot;" time="0.000337"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo&quot; with options {:capture=&gt;[&quot;foo&quot;, &quot;bar&quot;, /\d+/]} should not match &quot;/&quot;" time="0.000337"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo&quot; with options {:capture=&gt;[&quot;foo&quot;, &quot;bar&quot;, /\d+/]} should not match &quot;/baz&quot;" time="0.000335"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo&quot; with options {:capture=&gt;[&quot;foo&quot;, &quot;bar&quot;, /\d+/]} should not match &quot;/foo1&quot;" time="0.000338"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:foo&quot; with options {:capture=&gt;[&quot;foo&quot;, &quot;bar&quot;, /\d+/]} to_s should be == /:foo" time="0.000188"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:foo&quot; with options {:capture=&gt;[&quot;foo&quot;, &quot;bar&quot;, /\d+/]} inspect should be == #&lt;Mustermann::Sinatra:&quot;/:foo&quot;&gt;" time="0.000184"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:foo&quot; with options {:capture=&gt;[&quot;foo&quot;, &quot;bar&quot;, /\d+/]} names should be a kind of Array" time="0.000228"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:foo:bar:baz&quot; with options {:capture=&gt;{:foo=&gt;:alpha, :bar=&gt;/\d+/}} string should be immune to external change" time="0.000103"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo:bar:baz&quot; with options {:capture=&gt;{:foo=&gt;:alpha, :bar=&gt;/\d+/}} should match &quot;/ab123xy-1&quot;" time="0.000466"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo:bar:baz&quot; with options {:capture=&gt;{:foo=&gt;:alpha, :bar=&gt;/\d+/}} should match &quot;/ab123&quot;" time="0.000346"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo:bar:baz&quot; with options {:capture=&gt;{:foo=&gt;:alpha, :bar=&gt;/\d+/}} should not match &quot;/123abcxy-1&quot;" time="0.000343"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo:bar:baz&quot; with options {:capture=&gt;{:foo=&gt;:alpha, :bar=&gt;/\d+/}} should not match &quot;/abcxy-1&quot;" time="0.000338"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo:bar:baz&quot; with options {:capture=&gt;{:foo=&gt;:alpha, :bar=&gt;/\d+/}} should not match &quot;/abc1&quot;" time="0.000339"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:foo:bar:baz&quot; with options {:capture=&gt;{:foo=&gt;:alpha, :bar=&gt;/\d+/}} to_s should be == /:foo:bar:baz" time="0.000121"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:foo:bar:baz&quot; with options {:capture=&gt;{:foo=&gt;:alpha, :bar=&gt;/\d+/}} inspect should be == #&lt;Mustermann::Sinatra:&quot;/:foo:bar:baz&quot;&gt;" time="0.000139"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:foo:bar:baz&quot; with options {:capture=&gt;{:foo=&gt;:alpha, :bar=&gt;/\d+/}} names should be a kind of Array" time="0.000139"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:foo&quot; with options {:capture=&gt;{:foo=&gt;[&quot;foo&quot;, &quot;bar&quot;, /\d+/]}} string should be immune to external change" time="0.000107"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo&quot; with options {:capture=&gt;{:foo=&gt;[&quot;foo&quot;, &quot;bar&quot;, /\d+/]}} should match &quot;/1&quot;" time="0.000396"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo&quot; with options {:capture=&gt;{:foo=&gt;[&quot;foo&quot;, &quot;bar&quot;, /\d+/]}} should match &quot;/123&quot;" time="0.000341"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo&quot; with options {:capture=&gt;{:foo=&gt;[&quot;foo&quot;, &quot;bar&quot;, /\d+/]}} should match &quot;/foo&quot;" time="0.000425"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo&quot; with options {:capture=&gt;{:foo=&gt;[&quot;foo&quot;, &quot;bar&quot;, /\d+/]}} should match &quot;/bar&quot;" time="0.000338"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo&quot; with options {:capture=&gt;{:foo=&gt;[&quot;foo&quot;, &quot;bar&quot;, /\d+/]}} should not match &quot;/&quot;" time="0.000337"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo&quot; with options {:capture=&gt;{:foo=&gt;[&quot;foo&quot;, &quot;bar&quot;, /\d+/]}} should not match &quot;/baz&quot;" time="0.000341"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo&quot; with options {:capture=&gt;{:foo=&gt;[&quot;foo&quot;, &quot;bar&quot;, /\d+/]}} should not match &quot;/foo1&quot;" time="0.000336"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:foo&quot; with options {:capture=&gt;{:foo=&gt;[&quot;foo&quot;, &quot;bar&quot;, /\d+/]}} to_s should be == /:foo" time="0.000119"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:foo&quot; with options {:capture=&gt;{:foo=&gt;[&quot;foo&quot;, &quot;bar&quot;, /\d+/]}} inspect should be == #&lt;Mustermann::Sinatra:&quot;/:foo&quot;&gt;" time="0.000135"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:foo&quot; with options {:capture=&gt;{:foo=&gt;[&quot;foo&quot;, &quot;bar&quot;, /\d+/]}} names should be a kind of Array" time="0.000136"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:file(.:ext)?&quot; with options {:capture=&gt;{:ext=&gt;[&quot;jpg&quot;, &quot;png&quot;]}} string should be immune to external change" time="0.000089"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:file(.:ext)?&quot; with options {:capture=&gt;{:ext=&gt;[&quot;jpg&quot;, &quot;png&quot;]}} should match &quot;/pony&quot;" time="0.000403"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:file(.:ext)?&quot; with options {:capture=&gt;{:ext=&gt;[&quot;jpg&quot;, &quot;png&quot;]}} should match &quot;/pony.jpg&quot;" time="0.000448"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:file(.:ext)?&quot; with options {:capture=&gt;{:ext=&gt;[&quot;jpg&quot;, &quot;png&quot;]}} should match &quot;/pony%2Ejpg&quot;" time="0.000345"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:file(.:ext)?&quot; with options {:capture=&gt;{:ext=&gt;[&quot;jpg&quot;, &quot;png&quot;]}} should match &quot;/pony%2ejpg&quot;" time="0.000347"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:file(.:ext)?&quot; with options {:capture=&gt;{:ext=&gt;[&quot;jpg&quot;, &quot;png&quot;]}} should match &quot;/pony.png&quot;" time="0.000435"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:file(.:ext)?&quot; with options {:capture=&gt;{:ext=&gt;[&quot;jpg&quot;, &quot;png&quot;]}} should match &quot;/pony%2Epng&quot;" time="0.000468"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:file(.:ext)?&quot; with options {:capture=&gt;{:ext=&gt;[&quot;jpg&quot;, &quot;png&quot;]}} should match &quot;/pony%2epng&quot;" time="0.000452"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:file(.:ext)?&quot; with options {:capture=&gt;{:ext=&gt;[&quot;jpg&quot;, &quot;png&quot;]}} should match &quot;/pony.png.jpg&quot;" time="0.000360"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:file(.:ext)?&quot; with options {:capture=&gt;{:ext=&gt;[&quot;jpg&quot;, &quot;png&quot;]}} should match &quot;/pony.jpg.png&quot;" time="0.000350"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:file(.:ext)?&quot; with options {:capture=&gt;{:ext=&gt;[&quot;jpg&quot;, &quot;png&quot;]}} should match &quot;/pony.gif&quot;" time="0.000350"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:file(.:ext)?&quot; with options {:capture=&gt;{:ext=&gt;[&quot;jpg&quot;, &quot;png&quot;]}} should match &quot;/pony.&quot;" time="0.000349"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:file(.:ext)?&quot; with options {:capture=&gt;{:ext=&gt;[&quot;jpg&quot;, &quot;png&quot;]}} should not match &quot;.jpg&quot;" time="0.000346"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:file(.:ext)?&quot; with options {:capture=&gt;{:ext=&gt;[&quot;jpg&quot;, &quot;png&quot;]}} to_s should be == /:file(.:ext)?" time="0.000135"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:file(.:ext)?&quot; with options {:capture=&gt;{:ext=&gt;[&quot;jpg&quot;, &quot;png&quot;]}} inspect should be == #&lt;Mustermann::Sinatra:&quot;/:file(.:ext)?&quot;&gt;" time="0.000141"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:file(.:ext)?&quot; with options {:capture=&gt;{:ext=&gt;[&quot;jpg&quot;, &quot;png&quot;]}} names should be a kind of Array" time="0.000146"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:file:ext?&quot; with options {:capture=&gt;{:ext=&gt;[&quot;.jpg&quot;, &quot;.png&quot;, &quot;.tar.gz&quot;]}} string should be immune to external change" time="0.000091"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:file:ext?&quot; with options {:capture=&gt;{:ext=&gt;[&quot;.jpg&quot;, &quot;.png&quot;, &quot;.tar.gz&quot;]}} should match &quot;/pony&quot;" time="0.000442"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:file:ext?&quot; with options {:capture=&gt;{:ext=&gt;[&quot;.jpg&quot;, &quot;.png&quot;, &quot;.tar.gz&quot;]}} should match &quot;/pony.jpg&quot;" time="0.000356"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:file:ext?&quot; with options {:capture=&gt;{:ext=&gt;[&quot;.jpg&quot;, &quot;.png&quot;, &quot;.tar.gz&quot;]}} should match &quot;/pony.png&quot;" time="0.000350"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:file:ext?&quot; with options {:capture=&gt;{:ext=&gt;[&quot;.jpg&quot;, &quot;.png&quot;, &quot;.tar.gz&quot;]}} should match &quot;/pony.png.jpg&quot;" time="0.000346"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:file:ext?&quot; with options {:capture=&gt;{:ext=&gt;[&quot;.jpg&quot;, &quot;.png&quot;, &quot;.tar.gz&quot;]}} should match &quot;/pony.jpg.png&quot;" time="0.000345"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:file:ext?&quot; with options {:capture=&gt;{:ext=&gt;[&quot;.jpg&quot;, &quot;.png&quot;, &quot;.tar.gz&quot;]}} should match &quot;/pony.tar.gz&quot;" time="0.000344"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:file:ext?&quot; with options {:capture=&gt;{:ext=&gt;[&quot;.jpg&quot;, &quot;.png&quot;, &quot;.tar.gz&quot;]}} should match &quot;/pony.gif&quot;" time="0.000344"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:file:ext?&quot; with options {:capture=&gt;{:ext=&gt;[&quot;.jpg&quot;, &quot;.png&quot;, &quot;.tar.gz&quot;]}} should match &quot;/pony.&quot;" time="0.000340"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:file:ext?&quot; with options {:capture=&gt;{:ext=&gt;[&quot;.jpg&quot;, &quot;.png&quot;, &quot;.tar.gz&quot;]}} should not match &quot;/.jpg&quot;" time="0.000339"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:file:ext?&quot; with options {:capture=&gt;{:ext=&gt;[&quot;.jpg&quot;, &quot;.png&quot;, &quot;.tar.gz&quot;]}} to_s should be == /:file:ext?" time="0.000119"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:file:ext?&quot; with options {:capture=&gt;{:ext=&gt;[&quot;.jpg&quot;, &quot;.png&quot;, &quot;.tar.gz&quot;]}} inspect should be == #&lt;Mustermann::Sinatra:&quot;/:file:ext?&quot;&gt;" time="0.000160"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:file:ext?&quot; with options {:capture=&gt;{:ext=&gt;[&quot;.jpg&quot;, &quot;.png&quot;, &quot;.tar.gz&quot;]}} names should be a kind of Array" time="0.000138"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:a(@:b)?&quot; with options {:capture=&gt;{:b=&gt;/\d+/}} string should be immune to external change" time="0.000092"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:a(@:b)?&quot; with options {:capture=&gt;{:b=&gt;/\d+/}} should match &quot;/a&quot;" time="0.000381"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:a(@:b)?&quot; with options {:capture=&gt;{:b=&gt;/\d+/}} should match &quot;/a@1&quot;" time="0.000345"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:a(@:b)?&quot; with options {:capture=&gt;{:b=&gt;/\d+/}} should match &quot;/a@b&quot;" time="0.000345"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:a(@:b)?&quot; with options {:capture=&gt;{:b=&gt;/\d+/}} should match &quot;/a@1@2&quot;" time="0.000342"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:a(@:b)?&quot; with options {:capture=&gt;{:b=&gt;/\d+/}} to_s should be == /:a(@:b)?" time="0.000119"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:a(@:b)?&quot; with options {:capture=&gt;{:b=&gt;/\d+/}} inspect should be == #&lt;Mustermann::Sinatra:&quot;/:a(@:b)?&quot;&gt;" time="0.000135"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:a(@:b)?&quot; with options {:capture=&gt;{:b=&gt;/\d+/}} names should be a kind of Array" time="0.000136"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/(:a)b?&quot; with options {:greedy=&gt;false} string should be immune to external change" time="0.000089"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/(:a)b?&quot; with options {:greedy=&gt;false} should match &quot;/ab&quot;" time="0.000363"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/(:a)b?&quot; with options {:greedy=&gt;false} to_s should be == /(:a)b?" time="0.000117"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/(:a)b?&quot; with options {:greedy=&gt;false} inspect should be == #&lt;Mustermann::Sinatra:&quot;/(:a)b?&quot;&gt;" time="0.000133"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/(:a)b?&quot; with options {:greedy=&gt;false} names should be a kind of Array" time="0.000156"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:file(.:ext)?&quot; with options {:greedy=&gt;false} string should be immune to external change" time="0.000089"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:file(.:ext)?&quot; with options {:greedy=&gt;false} should match &quot;/pony&quot;" time="0.000423"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:file(.:ext)?&quot; with options {:greedy=&gt;false} should match &quot;/pony.jpg&quot;" time="0.000348"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:file(.:ext)?&quot; with options {:greedy=&gt;false} should match &quot;/pony.png.jpg&quot;" time="0.000346"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:file(.:ext)?&quot; with options {:greedy=&gt;false} to_s should be == /:file(.:ext)?" time="0.000118"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:file(.:ext)?&quot; with options {:greedy=&gt;false} inspect should be == #&lt;Mustermann::Sinatra:&quot;/:file(.:ext)?&quot;&gt;" time="0.000136"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:file(.:ext)?&quot; with options {:greedy=&gt;false} names should be a kind of Array" time="0.000136"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/auth/*&quot; with options {:except=&gt;&quot;/auth/login&quot;} string should be immune to external change" time="0.000091"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/auth/*&quot; with options {:except=&gt;&quot;/auth/login&quot;} should match &quot;/auth/admin&quot;" time="0.000344"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/auth/*&quot; with options {:except=&gt;&quot;/auth/login&quot;} should match &quot;/auth/foobar&quot;" time="0.000337"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/auth/*&quot; with options {:except=&gt;&quot;/auth/login&quot;} should not match &quot;/auth/login&quot;" time="0.000339"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/auth/*&quot; with options {:except=&gt;&quot;/auth/login&quot;} to_s should be == /auth/*" time="0.000118"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/auth/*&quot; with options {:except=&gt;&quot;/auth/login&quot;} inspect should be == #&lt;Mustermann::Sinatra:&quot;/auth/*&quot;&gt;" time="0.000131"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/auth/*&quot; with options {:except=&gt;&quot;/auth/login&quot;} names should be a kind of Array" time="0.000136"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:foo/:bar&quot; with options {:except=&gt;&quot;/:bar/20&quot;} string should be immune to external change" time="0.000087"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo/:bar&quot; with options {:except=&gt;&quot;/:bar/20&quot;} should match &quot;/foo/bar&quot;" time="0.000366"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/:foo/:bar&quot; with options {:except=&gt;&quot;/:bar/20&quot;} should not match &quot;/20/20&quot;" time="0.000426"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:foo/:bar&quot; with options {:except=&gt;&quot;/:bar/20&quot;} to_s should be == /:foo/:bar" time="0.000118"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:foo/:bar&quot; with options {:except=&gt;&quot;/:bar/20&quot;} inspect should be == #&lt;Mustermann::Sinatra:&quot;/:foo/:bar&quot;&gt;" time="0.000134"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/:foo/:bar&quot; with options {:except=&gt;&quot;/:bar/20&quot;} names should be a kind of Array" time="0.000135"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/foo?&quot; with options {:uri_decode=&gt;false} string should be immune to external change" time="0.000087"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/foo?&quot; with options {:uri_decode=&gt;false} should match &quot;/foo&quot;" time="0.000417"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/foo?&quot; with options {:uri_decode=&gt;false} should match &quot;/fo&quot;" time="0.000338"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/foo?&quot; with options {:uri_decode=&gt;false} should not match &quot;/foo?&quot;" time="0.000338"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/foo?&quot; with options {:uri_decode=&gt;false} to_s should be == /foo?" time="0.000117"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/foo?&quot; with options {:uri_decode=&gt;false} inspect should be == #&lt;Mustermann::Sinatra:&quot;/foo?&quot;&gt;" time="0.000132"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/foo?&quot; with options {:uri_decode=&gt;false} names should be a kind of Array" time="0.000133"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/foo/bar&quot; with options {:uri_decode=&gt;false} string should be immune to external change" time="0.000091"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/foo/bar&quot; with options {:uri_decode=&gt;false} should match &quot;/foo/bar&quot;" time="0.000351"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/foo/bar&quot; with options {:uri_decode=&gt;false} should not match &quot;/foo%2Fbar&quot;" time="0.000343"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/foo/bar&quot; with options {:uri_decode=&gt;false} should not match &quot;/foo%2fbar&quot;" time="0.000406"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/foo/bar&quot; with options {:uri_decode=&gt;false} to_s should be == /foo/bar" time="0.000122"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/foo/bar&quot; with options {:uri_decode=&gt;false} inspect should be == #&lt;Mustermann::Sinatra:&quot;/foo/bar&quot;&gt;" time="0.000173"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/foo/bar&quot; with options {:uri_decode=&gt;false} names should be a kind of Array" time="0.000183"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/path with spaces&quot; with options {:uri_decode=&gt;false} string should be immune to external change" time="0.000111"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/path with spaces&quot; with options {:uri_decode=&gt;false} should match &quot;/path with spaces&quot;" time="0.000409"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/path with spaces&quot; with options {:uri_decode=&gt;false} should not match &quot;/path%20with%20spaces&quot;" time="0.000412"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/path with spaces&quot; with options {:uri_decode=&gt;false} should not match &quot;/path%2Bwith%2Bspaces&quot;" time="0.000363"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/path with spaces&quot; with options {:uri_decode=&gt;false} should not match &quot;/path+with+spaces&quot;" time="0.000345"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/path with spaces&quot; with options {:uri_decode=&gt;false} to_s should be == /path with spaces" time="0.000119"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/path with spaces&quot; with options {:uri_decode=&gt;false} inspect should be == #&lt;Mustermann::Sinatra:&quot;/path with spaces&quot;&gt;" time="0.000135"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/path with spaces&quot; with options {:uri_decode=&gt;false} names should be a kind of Array" time="0.000134"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/path with spaces&quot; with options {:space_matches_plus=&gt;false} string should be immune to external change" time="0.000090"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/path with spaces&quot; with options {:space_matches_plus=&gt;false} should match &quot;/path%20with%20spaces&quot;" time="0.000379"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/path with spaces&quot; with options {:space_matches_plus=&gt;false} should not match &quot;/path%2Bwith%2Bspaces&quot;" time="0.000348"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra pattern &quot;/path with spaces&quot; with options {:space_matches_plus=&gt;false} should not match &quot;/path+with+spaces&quot;" time="0.000354"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/path with spaces&quot; with options {:space_matches_plus=&gt;false} to_s should be == /path with spaces" time="0.000132"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/path with spaces&quot; with options {:space_matches_plus=&gt;false} inspect should be == #&lt;Mustermann::Sinatra:&quot;/path with spaces&quot;&gt;" time="0.000137"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Sinatra pattern &quot;/path with spaces&quot; with options {:space_matches_plus=&gt;false} names should be a kind of Array" time="0.000143"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra invalid syntax unexpected closing parenthesis" time="0.000440"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra invalid syntax missing closing parenthesis" time="0.000475"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra invalid syntax missing unescaped closing parenthesis" time="0.000487"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra invalid syntax ? at beginning of route" time="0.000267"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra invalid syntax double ?" time="0.000349"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra invalid syntax dangling escape" time="0.000376"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra invalid capture names empty name" time="0.000692"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra invalid capture names named splat" time="0.000566"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra invalid capture names named captures" time="0.000565"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra invalid capture names with capital letter" time="0.000559"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra invalid capture names with integer" time="0.000562"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra invalid capture names same name twice" time="0.000940"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra Regexp compatibility === non-matching" time="0.000119"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra Regexp compatibility === matching" time="0.000097"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra Regexp compatibility =~ non-matching" time="0.000106"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra Regexp compatibility =~ matching" time="0.000089"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra Regexp compatibility =~ String#=~ non-matching" time="0.000109"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra Regexp compatibility =~ String#=~ matching" time="0.000092"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra Regexp compatibility to_regexp empty pattern" time="0.000097"/>
  <testcase classname="spec.sinatra_spec" name="Mustermann::Sinatra Regexp compatibility to_regexp Regexp.try_convert empty pattern" time="0.000106"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template pattern &quot;&quot; string should be immune to external change" time="0.000111"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template pattern &quot;&quot; should match &quot;&quot;" time="0.000395"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template pattern &quot;&quot; should not match &quot;/&quot;" time="0.000351"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template pattern &quot;&quot; to_s should be == " time="0.000123"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template pattern &quot;&quot; inspect should be == #&lt;Mustermann::Template:&quot;&quot;&gt;" time="0.000138"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template pattern &quot;&quot; names should be a kind of Array" time="0.000148"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template pattern &quot;/&quot; string should be immune to external change" time="0.000093"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template pattern &quot;/&quot; should match &quot;/&quot;" time="0.000357"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template pattern &quot;/&quot; should not match &quot;/foo&quot;" time="0.000342"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template pattern &quot;/&quot; to_s should be == /" time="0.000115"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template pattern &quot;/&quot; inspect should be == #&lt;Mustermann::Template:&quot;/&quot;&gt;" time="0.000133"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template pattern &quot;/&quot; names should be a kind of Array" time="0.000140"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template pattern &quot;/foo&quot; string should be immune to external change" time="0.000092"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template pattern &quot;/foo&quot; should match &quot;/foo&quot;" time="0.000373"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template pattern &quot;/foo&quot; should not match &quot;/bar&quot;" time="0.000471"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template pattern &quot;/foo&quot; should not match &quot;/foo.bar&quot;" time="0.000440"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template pattern &quot;/foo&quot; to_s should be == /foo" time="0.000119"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template pattern &quot;/foo&quot; inspect should be == #&lt;Mustermann::Template:&quot;/foo&quot;&gt;" time="0.000134"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template pattern &quot;/foo&quot; names should be a kind of Array" time="0.000143"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template pattern &quot;/foo/bar&quot; string should be immune to external change" time="0.000092"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template pattern &quot;/foo/bar&quot; should match &quot;/foo/bar&quot;" time="0.000369"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template pattern &quot;/foo/bar&quot; should not match &quot;/foo%2Fbar&quot;" time="0.000342"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template pattern &quot;/foo/bar&quot; should not match &quot;/foo%2fbar&quot;" time="0.042300"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template pattern &quot;/foo/bar&quot; to_s should be == /foo/bar" time="0.000179"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template pattern &quot;/foo/bar&quot; inspect should be == #&lt;Mustermann::Template:&quot;/foo/bar&quot;&gt;" time="0.000165"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template pattern &quot;/foo/bar&quot; names should be a kind of Array" time="0.000168"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template pattern &quot;/:foo&quot; string should be immune to external change" time="0.000104"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template pattern &quot;/:foo&quot; should match &quot;/:foo&quot;" time="0.000420"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template pattern &quot;/:foo&quot; should match &quot;/%3Afoo&quot;" time="0.000340"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template pattern &quot;/:foo&quot; should not match &quot;/foo&quot;" time="0.000351"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template pattern &quot;/:foo&quot; should not match &quot;/foo?&quot;" time="0.000362"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template pattern &quot;/:foo&quot; should not match &quot;/foo/bar&quot;" time="0.000389"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template pattern &quot;/:foo&quot; should not match &quot;/&quot;" time="0.000399"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template pattern &quot;/:foo&quot; should not match &quot;/foo/&quot;" time="0.000455"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template pattern &quot;/:foo&quot; to_s should be == /:foo" time="0.000136"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template pattern &quot;/:foo&quot; inspect should be == #&lt;Mustermann::Template:&quot;/:foo&quot;&gt;" time="0.000150"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template pattern &quot;/:foo&quot; names should be a kind of Array" time="0.000152"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template pattern &quot;/f\u00F6\u00F6&quot; string should be immune to external change" time="0.000100"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template pattern &quot;/f\u00F6\u00F6&quot; should match &quot;/f%C3%B6%C3%B6&quot;" time="0.000379"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template pattern &quot;/f\u00F6\u00F6&quot; to_s should be == /föö" time="0.000119"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template pattern &quot;/f\u00F6\u00F6&quot; inspect should be == #&lt;Mustermann::Template:&quot;/f\u00F6\u00F6&quot;&gt;" time="0.000141"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template pattern &quot;/f\u00F6\u00F6&quot; names should be a kind of Array" time="0.000137"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template pattern &quot;/test$/&quot; string should be immune to external change" time="0.000089"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template pattern &quot;/test$/&quot; should match &quot;/test$/&quot;" time="0.000418"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template pattern &quot;/test$/&quot; to_s should be == /test$/" time="0.000119"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template pattern &quot;/test$/&quot; inspect should be == #&lt;Mustermann::Template:&quot;/test$/&quot;&gt;" time="0.000134"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template pattern &quot;/test$/&quot; names should be a kind of Array" time="0.000136"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template pattern &quot;/te+st/&quot; string should be immune to external change" time="0.000089"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template pattern &quot;/te+st/&quot; should match &quot;/te+st/&quot;" time="0.000368"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template pattern &quot;/te+st/&quot; should not match &quot;/test/&quot;" time="0.000354"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template pattern &quot;/te+st/&quot; should not match &quot;/teest/&quot;" time="0.000357"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template pattern &quot;/te+st/&quot; to_s should be == /te+st/" time="0.000177"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template pattern &quot;/te+st/&quot; inspect should be == #&lt;Mustermann::Template:&quot;/te+st/&quot;&gt;" time="0.000149"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template pattern &quot;/te+st/&quot; names should be a kind of Array" time="0.000143"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template pattern &quot;/path with spaces&quot; string should be immune to external change" time="0.000090"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template pattern &quot;/path with spaces&quot; should match &quot;/path%20with%20spaces&quot;" time="0.000430"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template pattern &quot;/path with spaces&quot; should match &quot;/path%2Bwith%2Bspaces&quot;" time="0.000394"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template pattern &quot;/path with spaces&quot; should match &quot;/path+with+spaces&quot;" time="0.000364"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template pattern &quot;/path with spaces&quot; to_s should be == /path with spaces" time="0.000121"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template pattern &quot;/path with spaces&quot; inspect should be == #&lt;Mustermann::Template:&quot;/path with spaces&quot;&gt;" time="0.000136"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template pattern &quot;/path with spaces&quot; names should be a kind of Array" time="0.000199"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template pattern &quot;/foo&amp;bar&quot; string should be immune to external change" time="0.000091"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template pattern &quot;/foo&amp;bar&quot; should match &quot;/foo&amp;bar&quot;" time="0.000372"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template pattern &quot;/foo&amp;bar&quot; to_s should be == /foo&amp;bar" time="0.000116"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template pattern &quot;/foo&amp;bar&quot; inspect should be == #&lt;Mustermann::Template:&quot;/foo&amp;bar&quot;&gt;" time="0.000137"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template pattern &quot;/foo&amp;bar&quot; names should be a kind of Array" time="0.000136"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template pattern &quot;/test.bar&quot; string should be immune to external change" time="0.000090"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template pattern &quot;/test.bar&quot; should match &quot;/test.bar&quot;" time="0.000385"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template pattern &quot;/test.bar&quot; should not match &quot;/test0bar&quot;" time="0.000360"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template pattern &quot;/test.bar&quot; to_s should be == /test.bar" time="0.000117"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template pattern &quot;/test.bar&quot; inspect should be == #&lt;Mustermann::Template:&quot;/test.bar&quot;&gt;" time="0.000135"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template pattern &quot;/test.bar&quot; names should be a kind of Array" time="0.000136"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template pattern &quot;/path with spaces&quot; with options {:space_matches_plus=&gt;false} string should be immune to external change" time="0.000090"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template pattern &quot;/path with spaces&quot; with options {:space_matches_plus=&gt;false} should match &quot;/path%20with%20spaces&quot;" time="0.000391"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template pattern &quot;/path with spaces&quot; with options {:space_matches_plus=&gt;false} should not match &quot;/path%2Bwith%2Bspaces&quot;" time="0.000359"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template pattern &quot;/path with spaces&quot; with options {:space_matches_plus=&gt;false} should not match &quot;/path+with+spaces&quot;" time="0.000360"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template pattern &quot;/path with spaces&quot; with options {:space_matches_plus=&gt;false} to_s should be == /path with spaces" time="0.000117"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template pattern &quot;/path with spaces&quot; with options {:space_matches_plus=&gt;false} inspect should be == #&lt;Mustermann::Template:&quot;/path with spaces&quot;&gt;" time="0.000137"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template pattern &quot;/path with spaces&quot; with options {:space_matches_plus=&gt;false} names should be a kind of Array" time="0.000135"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template pattern &quot;/path with spaces&quot; with options {:uri_decode=&gt;false} string should be immune to external change" time="0.000087"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template pattern &quot;/path with spaces&quot; with options {:uri_decode=&gt;false} should not match &quot;/path%20with%20spaces&quot;" time="0.000367"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template pattern &quot;/path with spaces&quot; with options {:uri_decode=&gt;false} should not match &quot;/path%2Bwith%2Bspaces&quot;" time="0.000358"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template pattern &quot;/path with spaces&quot; with options {:uri_decode=&gt;false} should not match &quot;/path+with+spaces&quot;" time="0.000514"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template pattern &quot;/path with spaces&quot; with options {:uri_decode=&gt;false} to_s should be == /path with spaces" time="0.000121"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template pattern &quot;/path with spaces&quot; with options {:uri_decode=&gt;false} inspect should be == #&lt;Mustermann::Template:&quot;/path with spaces&quot;&gt;" time="0.000137"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template pattern &quot;/path with spaces&quot; with options {:uri_decode=&gt;false} names should be a kind of Array" time="0.000139"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 1 without operator pattern &quot;/hello/{person}&quot; string should be immune to external change" time="0.000100"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 1 without operator pattern &quot;/hello/{person}&quot; should match &quot;/hello/Frank&quot;" time="0.000442"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 1 without operator pattern &quot;/hello/{person}&quot; should match &quot;/hello/a_b~c&quot;" time="0.000367"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 1 without operator pattern &quot;/hello/{person}&quot; should match &quot;/hello/a.%20&quot;" time="0.000367"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 1 without operator pattern &quot;/hello/{person}&quot; should not match &quot;/hello/:&quot;" time="0.000364"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 1 without operator pattern &quot;/hello/{person}&quot; should not match &quot;/hello//&quot;" time="0.000364"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 1 without operator pattern &quot;/hello/{person}&quot; should not match &quot;/hello/?&quot;" time="0.000362"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 1 without operator pattern &quot;/hello/{person}&quot; should not match &quot;/hello/#&quot;" time="0.000355"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 1 without operator pattern &quot;/hello/{person}&quot; should not match &quot;/hello/[&quot;" time="0.000358"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 1 without operator pattern &quot;/hello/{person}&quot; should not match &quot;/hello/]&quot;" time="0.000361"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 1 without operator pattern &quot;/hello/{person}&quot; should not match &quot;/hello/@&quot;" time="0.000361"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 1 without operator pattern &quot;/hello/{person}&quot; should not match &quot;/hello/!&quot;" time="0.000354"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 1 without operator pattern &quot;/hello/{person}&quot; should not match &quot;/hello/*&quot;" time="0.000358"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 1 without operator pattern &quot;/hello/{person}&quot; should not match &quot;/hello/+&quot;" time="0.000358"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 1 without operator pattern &quot;/hello/{person}&quot; should not match &quot;/hello/,&quot;" time="0.000355"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 1 without operator pattern &quot;/hello/{person}&quot; should not match &quot;/hello/;&quot;" time="0.000356"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 1 without operator pattern &quot;/hello/{person}&quot; should not match &quot;/hello/=&quot;" time="0.000354"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 1 without operator pattern &quot;/hello/{person}&quot; should be == {&quot;person&quot;=&gt;&quot;Frank&quot;}" time="0.001854"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 1 without operator pattern &quot;/hello/{person}&quot; to_s should be == /hello/{person}" time="0.000137"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 1 without operator pattern &quot;/hello/{person}&quot; inspect should be == #&lt;Mustermann::Template:&quot;/hello/{person}&quot;&gt;" time="0.000154"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 1 without operator pattern &quot;/hello/{person}&quot; names should be a kind of Array" time="0.000154"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 1 without operator pattern &quot;/{foo}/{bar}&quot; string should be immune to external change" time="0.000102"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 1 without operator pattern &quot;/{foo}/{bar}&quot; should match &quot;/foo/bar&quot;" time="0.000429"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 1 without operator pattern &quot;/{foo}/{bar}&quot; should match &quot;/foo.bar/bar.foo&quot;" time="0.000368"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 1 without operator pattern &quot;/{foo}/{bar}&quot; should match &quot;/10.1/te.st&quot;" time="0.000402"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 1 without operator pattern &quot;/{foo}/{bar}&quot; should match &quot;/10.1.2/te.st&quot;" time="0.000366"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 1 without operator pattern &quot;/{foo}/{bar}&quot; should not match &quot;/foo%2Fbar&quot;" time="0.000362"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 1 without operator pattern &quot;/{foo}/{bar}&quot; should not match &quot;/foo%2fbar&quot;" time="0.000364"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 1 without operator pattern &quot;/{foo}/{bar}&quot; to_s should be == /{foo}/{bar}" time="0.000130"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 1 without operator pattern &quot;/{foo}/{bar}&quot; inspect should be == #&lt;Mustermann::Template:&quot;/{foo}/{bar}&quot;&gt;" time="0.000148"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 1 without operator pattern &quot;/{foo}/{bar}&quot; names should be a kind of Array" time="0.000145"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 2 operator + pattern &quot;/hello/{+person}&quot; string should be immune to external change" time="0.000103"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 2 operator + pattern &quot;/hello/{+person}&quot; should match &quot;/hello/Frank&quot;" time="0.000418"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 2 operator + pattern &quot;/hello/{+person}&quot; should match &quot;/hello/a_b~c&quot;" time="0.000367"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 2 operator + pattern &quot;/hello/{+person}&quot; should match &quot;/hello/a.%20&quot;" time="0.000363"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 2 operator + pattern &quot;/hello/{+person}&quot; should match &quot;/hello/a/%20&quot;" time="0.000363"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 2 operator + pattern &quot;/hello/{+person}&quot; should match &quot;/hello/:&quot;" time="0.000357"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 2 operator + pattern &quot;/hello/{+person}&quot; should match &quot;/hello//&quot;" time="0.000353"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 2 operator + pattern &quot;/hello/{+person}&quot; should match &quot;/hello/?&quot;" time="0.000359"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 2 operator + pattern &quot;/hello/{+person}&quot; should match &quot;/hello/#&quot;" time="0.000417"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 2 operator + pattern &quot;/hello/{+person}&quot; should match &quot;/hello/[&quot;" time="0.000374"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 2 operator + pattern &quot;/hello/{+person}&quot; should match &quot;/hello/]&quot;" time="0.000361"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 2 operator + pattern &quot;/hello/{+person}&quot; should match &quot;/hello/@&quot;" time="0.000429"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 2 operator + pattern &quot;/hello/{+person}&quot; should match &quot;/hello/!&quot;" time="0.000360"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 2 operator + pattern &quot;/hello/{+person}&quot; should match &quot;/hello/*&quot;" time="0.000357"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 2 operator + pattern &quot;/hello/{+person}&quot; should match &quot;/hello/+&quot;" time="0.000357"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 2 operator + pattern &quot;/hello/{+person}&quot; should match &quot;/hello/,&quot;" time="0.000355"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 2 operator + pattern &quot;/hello/{+person}&quot; should match &quot;/hello/;&quot;" time="0.000355"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 2 operator + pattern &quot;/hello/{+person}&quot; should match &quot;/hello/=&quot;" time="0.000359"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 2 operator + pattern &quot;/hello/{+person}&quot; to_s should be == /hello/{+person}" time="0.000138"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 2 operator + pattern &quot;/hello/{+person}&quot; inspect should be == #&lt;Mustermann::Template:&quot;/hello/{+person}&quot;&gt;" time="0.000191"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 2 operator + pattern &quot;/hello/{+person}&quot; names should be a kind of Array" time="0.000149"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 2 operator + pattern &quot;/{+foo}/{bar}&quot; string should be immune to external change" time="0.000101"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 2 operator + pattern &quot;/{+foo}/{bar}&quot; should match &quot;/foo/bar&quot;" time="0.000434"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 2 operator + pattern &quot;/{+foo}/{bar}&quot; should match &quot;/foo.bar/bar.foo&quot;" time="0.000419"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 2 operator + pattern &quot;/{+foo}/{bar}&quot; should match &quot;/foo/bar/bar.foo&quot;" time="0.000496"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 2 operator + pattern &quot;/{+foo}/{bar}&quot; should match &quot;/10.1/te.st&quot;" time="0.000366"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 2 operator + pattern &quot;/{+foo}/{bar}&quot; should match &quot;/10.1.2/te.st&quot;" time="0.000373"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 2 operator + pattern &quot;/{+foo}/{bar}&quot; should not match &quot;/foo%2Fbar&quot;" time="0.000359"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 2 operator + pattern &quot;/{+foo}/{bar}&quot; should not match &quot;/foo%2fbar&quot;" time="0.000356"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 2 operator + pattern &quot;/{+foo}/{bar}&quot; to_s should be == /{+foo}/{bar}" time="0.000131"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 2 operator + pattern &quot;/{+foo}/{bar}&quot; inspect should be == #&lt;Mustermann::Template:&quot;/{+foo}/{bar}&quot;&gt;" time="0.000149"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 2 operator + pattern &quot;/{+foo}/{bar}&quot; names should be a kind of Array" time="0.000146"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 2 operator # pattern &quot;/hello/{#person}&quot; string should be immune to external change" time="0.000100"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 2 operator # pattern &quot;/hello/{#person}&quot; should match &quot;/hello/#Frank&quot;" time="0.000474"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 2 operator # pattern &quot;/hello/{#person}&quot; should match &quot;/hello/#a_b~c&quot;" time="0.000372"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 2 operator # pattern &quot;/hello/{#person}&quot; should match &quot;/hello/#a.%20&quot;" time="0.000361"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 2 operator # pattern &quot;/hello/{#person}&quot; should match &quot;/hello/#a/%20&quot;" time="0.000352"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 2 operator # pattern &quot;/hello/{#person}&quot; should match &quot;/hello/#:&quot;" time="0.000346"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 2 operator # pattern &quot;/hello/{#person}&quot; should match &quot;/hello/#/&quot;" time="0.000344"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 2 operator # pattern &quot;/hello/{#person}&quot; should match &quot;/hello/#?&quot;" time="0.000424"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 2 operator # pattern &quot;/hello/{#person}&quot; should match &quot;/hello/##&quot;" time="0.000346"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 2 operator # pattern &quot;/hello/{#person}&quot; should match &quot;/hello/#[&quot;" time="0.000347"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 2 operator # pattern &quot;/hello/{#person}&quot; should match &quot;/hello/#]&quot;" time="0.000348"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 2 operator # pattern &quot;/hello/{#person}&quot; should match &quot;/hello/\#@&quot;" time="0.000342"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 2 operator # pattern &quot;/hello/{#person}&quot; should match &quot;/hello/#!&quot;" time="0.000347"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 2 operator # pattern &quot;/hello/{#person}&quot; should match &quot;/hello/#*&quot;" time="0.000342"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 2 operator # pattern &quot;/hello/{#person}&quot; should match &quot;/hello/#+&quot;" time="0.000347"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 2 operator # pattern &quot;/hello/{#person}&quot; should match &quot;/hello/#,&quot;" time="0.000342"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 2 operator # pattern &quot;/hello/{#person}&quot; should match &quot;/hello/#;&quot;" time="0.000344"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 2 operator # pattern &quot;/hello/{#person}&quot; should match &quot;/hello/#=&quot;" time="0.000409"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 2 operator # pattern &quot;/hello/{#person}&quot; should not match &quot;/hello/Frank&quot;" time="0.000349"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 2 operator # pattern &quot;/hello/{#person}&quot; should not match &quot;/hello/a_b~c&quot;" time="0.000356"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 2 operator # pattern &quot;/hello/{#person}&quot; should not match &quot;/hello/a.%20&quot;" time="0.000356"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 2 operator # pattern &quot;/hello/{#person}&quot; should not match &quot;/hello/:&quot;" time="0.000344"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 2 operator # pattern &quot;/hello/{#person}&quot; should not match &quot;/hello//&quot;" time="0.000444"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 2 operator # pattern &quot;/hello/{#person}&quot; should not match &quot;/hello/?&quot;" time="0.000347"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 2 operator # pattern &quot;/hello/{#person}&quot; should not match &quot;/hello/#&quot;" time="0.000344"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 2 operator # pattern &quot;/hello/{#person}&quot; should not match &quot;/hello/[&quot;" time="0.000349"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 2 operator # pattern &quot;/hello/{#person}&quot; should not match &quot;/hello/]&quot;" time="0.000346"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 2 operator # pattern &quot;/hello/{#person}&quot; should not match &quot;/hello/@&quot;" time="0.000343"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 2 operator # pattern &quot;/hello/{#person}&quot; should not match &quot;/hello/!&quot;" time="0.000344"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 2 operator # pattern &quot;/hello/{#person}&quot; should not match &quot;/hello/*&quot;" time="0.000345"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 2 operator # pattern &quot;/hello/{#person}&quot; should not match &quot;/hello/+&quot;" time="0.000345"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 2 operator # pattern &quot;/hello/{#person}&quot; should not match &quot;/hello/,&quot;" time="0.000343"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 2 operator # pattern &quot;/hello/{#person}&quot; should not match &quot;/hello/;&quot;" time="0.000349"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 2 operator # pattern &quot;/hello/{#person}&quot; should not match &quot;/hello/=&quot;" time="0.000344"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 2 operator # pattern &quot;/hello/{#person}&quot; should be == {&quot;person&quot;=&gt;&quot;Frank&quot;}" time="0.001922"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 2 operator # pattern &quot;/hello/{#person}&quot; to_s should be == /hello/{#person}" time="0.000151"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 2 operator # pattern &quot;/hello/{#person}&quot; inspect should be == #&lt;Mustermann::Template:&quot;/hello/{#person}&quot;&gt;" time="0.000159"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 2 operator # pattern &quot;/hello/{#person}&quot; names should be a kind of Array" time="0.000156"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 2 operator # pattern &quot;/{+foo}/{#bar}&quot; string should be immune to external change" time="0.000102"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 2 operator # pattern &quot;/{+foo}/{#bar}&quot; should match &quot;/foo/#bar&quot;" time="0.000431"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 2 operator # pattern &quot;/{+foo}/{#bar}&quot; should match &quot;/foo.bar/#bar.foo&quot;" time="0.000361"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 2 operator # pattern &quot;/{+foo}/{#bar}&quot; should match &quot;/foo/bar/#bar.foo&quot;" time="0.000390"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 2 operator # pattern &quot;/{+foo}/{#bar}&quot; should match &quot;/10.1/#te.st&quot;" time="0.000461"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 2 operator # pattern &quot;/{+foo}/{#bar}&quot; should match &quot;/10.1.2/#te.st&quot;" time="0.000364"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 2 operator # pattern &quot;/{+foo}/{#bar}&quot; should not match &quot;/foo%2F#bar&quot;" time="0.000358"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 2 operator # pattern &quot;/{+foo}/{#bar}&quot; should not match &quot;/foo%2f#bar&quot;" time="0.000355"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 2 operator # pattern &quot;/{+foo}/{#bar}&quot; should be == {&quot;foo&quot;=&gt;&quot;hello&quot;, &quot;bar&quot;=&gt;&quot;Frank&quot;}" time="0.001841"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 2 operator # pattern &quot;/{+foo}/{#bar}&quot; to_s should be == /{+foo}/{#bar}" time="0.000136"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 2 operator # pattern &quot;/{+foo}/{#bar}&quot; inspect should be == #&lt;Mustermann::Template:&quot;/{+foo}/{#bar}&quot;&gt;" time="0.000154"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 2 operator # pattern &quot;/{+foo}/{#bar}&quot; names should be a kind of Array" time="0.000152"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 3 without operator pattern &quot;{a,b,c}&quot; string should be immune to external change" time="0.000103"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 without operator pattern &quot;{a,b,c}&quot; should match &quot;~x,42,_&quot;" time="0.000442"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 without operator pattern &quot;{a,b,c}&quot; should not match &quot;~x,42&quot;" time="0.000358"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 without operator pattern &quot;{a,b,c}&quot; should not match &quot;~x/42&quot;" time="0.000356"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 without operator pattern &quot;{a,b,c}&quot; should not match &quot;~x#42&quot;" time="0.000354"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 without operator pattern &quot;{a,b,c}&quot; should not match &quot;~x,42,_#42&quot;" time="0.000352"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 without operator pattern &quot;{a,b,c}&quot; should be == {&quot;a&quot;=&gt;&quot;d&quot;, &quot;b&quot;=&gt;&quot;f&quot;, &quot;c&quot;=&gt;&quot;g&quot;}" time="0.001786"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 3 without operator pattern &quot;{a,b,c}&quot; to_s should be == {a,b,c}" time="0.000226"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 3 without operator pattern &quot;{a,b,c}&quot; inspect should be == #&lt;Mustermann::Template:&quot;{a,b,c}&quot;&gt;" time="0.000173"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 3 without operator pattern &quot;{a,b,c}&quot; names should be a kind of Array" time="0.000167"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 3 operator + pattern &quot;{+a,b,c}&quot; string should be immune to external change" time="0.000103"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator + pattern &quot;{+a,b,c}&quot; should match &quot;~x,42,_&quot;" time="0.000450"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator + pattern &quot;{+a,b,c}&quot; should match &quot;~x,42,_#42&quot;" time="0.000367"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator + pattern &quot;{+a,b,c}&quot; should match &quot;~/x,42,_/42&quot;" time="0.000357"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator + pattern &quot;{+a,b,c}&quot; should not match &quot;~x,42&quot;" time="0.000354"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator + pattern &quot;{+a,b,c}&quot; should not match &quot;~x/42&quot;" time="0.000350"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator + pattern &quot;{+a,b,c}&quot; should not match &quot;~x#42&quot;" time="0.000348"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 3 operator + pattern &quot;{+a,b,c}&quot; to_s should be == {+a,b,c}" time="0.000128"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 3 operator + pattern &quot;{+a,b,c}&quot; inspect should be == #&lt;Mustermann::Template:&quot;{+a,b,c}&quot;&gt;" time="0.000149"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 3 operator + pattern &quot;{+a,b,c}&quot; names should be a kind of Array" time="0.000184"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 3 operator # pattern &quot;{#a,b,c}&quot; string should be immune to external change" time="0.000100"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator # pattern &quot;{#a,b,c}&quot; should match &quot;#~x,42,_&quot;" time="0.000441"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator # pattern &quot;{#a,b,c}&quot; should match &quot;#~x,42,_#42&quot;" time="0.000365"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator # pattern &quot;{#a,b,c}&quot; should match &quot;#~/x,42,_#42&quot;" time="0.000358"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator # pattern &quot;{#a,b,c}&quot; should not match &quot;~x,42,_&quot;" time="0.000350"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator # pattern &quot;{#a,b,c}&quot; should not match &quot;~x,42,_#42&quot;" time="0.000350"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator # pattern &quot;{#a,b,c}&quot; should not match &quot;~/x,42,_#42&quot;" time="0.000351"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator # pattern &quot;{#a,b,c}&quot; should not match &quot;~x,42&quot;" time="0.000344"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator # pattern &quot;{#a,b,c}&quot; should not match &quot;~x/42&quot;" time="0.000341"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator # pattern &quot;{#a,b,c}&quot; should not match &quot;~x#42&quot;" time="0.000339"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 3 operator # pattern &quot;{#a,b,c}&quot; to_s should be == {#a,b,c}" time="0.000127"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 3 operator # pattern &quot;{#a,b,c}&quot; inspect should be == #&lt;Mustermann::Template:&quot;{#a,b,c}&quot;&gt;" time="0.000145"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 3 operator # pattern &quot;{#a,b,c}&quot; names should be a kind of Array" time="0.000143"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 3 operator . pattern &quot;/hello/{.person}&quot; string should be immune to external change" time="0.000097"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator . pattern &quot;/hello/{.person}&quot; should match &quot;/hello/.Frank&quot;" time="0.000463"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator . pattern &quot;/hello/{.person}&quot; should match &quot;/hello/.a_b~c&quot;" time="0.000349"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator . pattern &quot;/hello/{.person}&quot; should not match &quot;/hello/.:&quot;" time="0.000344"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator . pattern &quot;/hello/{.person}&quot; should not match &quot;/hello/./&quot;" time="0.000341"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator . pattern &quot;/hello/{.person}&quot; should not match &quot;/hello/.?&quot;" time="0.000385"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator . pattern &quot;/hello/{.person}&quot; should not match &quot;/hello/.#&quot;" time="0.000338"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator . pattern &quot;/hello/{.person}&quot; should not match &quot;/hello/.[&quot;" time="0.000339"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator . pattern &quot;/hello/{.person}&quot; should not match &quot;/hello/.]&quot;" time="0.000353"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator . pattern &quot;/hello/{.person}&quot; should not match &quot;/hello/.@&quot;" time="0.000362"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator . pattern &quot;/hello/{.person}&quot; should not match &quot;/hello/.!&quot;" time="0.000350"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator . pattern &quot;/hello/{.person}&quot; should not match &quot;/hello/.*&quot;" time="0.000356"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator . pattern &quot;/hello/{.person}&quot; should not match &quot;/hello/.+&quot;" time="0.000344"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator . pattern &quot;/hello/{.person}&quot; should not match &quot;/hello/.,&quot;" time="0.000352"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator . pattern &quot;/hello/{.person}&quot; should not match &quot;/hello/.;&quot;" time="0.000345"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator . pattern &quot;/hello/{.person}&quot; should not match &quot;/hello/.=&quot;" time="0.000357"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator . pattern &quot;/hello/{.person}&quot; should not match &quot;/hello/Frank&quot;" time="0.042678"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator . pattern &quot;/hello/{.person}&quot; should not match &quot;/hello/a_b~c&quot;" time="0.000426"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator . pattern &quot;/hello/{.person}&quot; should not match &quot;/hello/a.%20&quot;" time="0.000404"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator . pattern &quot;/hello/{.person}&quot; should not match &quot;/hello/:&quot;" time="0.000379"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator . pattern &quot;/hello/{.person}&quot; should not match &quot;/hello//&quot;" time="0.000353"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator . pattern &quot;/hello/{.person}&quot; should not match &quot;/hello/?&quot;" time="0.000416"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator . pattern &quot;/hello/{.person}&quot; should not match &quot;/hello/#&quot;" time="0.000352"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator . pattern &quot;/hello/{.person}&quot; should not match &quot;/hello/[&quot;" time="0.000349"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator . pattern &quot;/hello/{.person}&quot; should not match &quot;/hello/]&quot;" time="0.000343"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator . pattern &quot;/hello/{.person}&quot; should not match &quot;/hello/@&quot;" time="0.000344"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator . pattern &quot;/hello/{.person}&quot; should not match &quot;/hello/!&quot;" time="0.000385"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator . pattern &quot;/hello/{.person}&quot; should not match &quot;/hello/*&quot;" time="0.000383"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator . pattern &quot;/hello/{.person}&quot; should not match &quot;/hello/+&quot;" time="0.000423"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator . pattern &quot;/hello/{.person}&quot; should not match &quot;/hello/,&quot;" time="0.000344"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator . pattern &quot;/hello/{.person}&quot; should not match &quot;/hello/;&quot;" time="0.000341"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator . pattern &quot;/hello/{.person}&quot; should not match &quot;/hello/=&quot;" time="0.000351"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 3 operator . pattern &quot;/hello/{.person}&quot; to_s should be == /hello/{.person}" time="0.000157"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 3 operator . pattern &quot;/hello/{.person}&quot; inspect should be == #&lt;Mustermann::Template:&quot;/hello/{.person}&quot;&gt;" time="0.000161"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 3 operator . pattern &quot;/hello/{.person}&quot; names should be a kind of Array" time="0.000159"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 3 operator . pattern &quot;{.a,b,c}&quot; string should be immune to external change" time="0.000102"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator . pattern &quot;{.a,b,c}&quot; should match &quot;.~x.42._&quot;" time="0.000476"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator . pattern &quot;{.a,b,c}&quot; should not match &quot;.~x,42&quot;" time="0.000373"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator . pattern &quot;{.a,b,c}&quot; should not match &quot;.~x/42&quot;" time="0.000369"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator . pattern &quot;{.a,b,c}&quot; should not match &quot;.~x#42&quot;" time="0.000364"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator . pattern &quot;{.a,b,c}&quot; should not match &quot;.~x,42,_&quot;" time="0.000416"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator . pattern &quot;{.a,b,c}&quot; should not match &quot;~x.42._&quot;" time="0.000426"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 3 operator . pattern &quot;{.a,b,c}&quot; to_s should be == {.a,b,c}" time="0.000133"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 3 operator . pattern &quot;{.a,b,c}&quot; inspect should be == #&lt;Mustermann::Template:&quot;{.a,b,c}&quot;&gt;" time="0.000148"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 3 operator . pattern &quot;{.a,b,c}&quot; names should be a kind of Array" time="0.000151"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 3 operator / pattern &quot;/hello{/person}&quot; string should be immune to external change" time="0.000102"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator / pattern &quot;/hello{/person}&quot; should match &quot;/hello/Frank&quot;" time="0.000512"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator / pattern &quot;/hello{/person}&quot; should match &quot;/hello/a_b~c&quot;" time="0.000443"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator / pattern &quot;/hello{/person}&quot; should not match &quot;/hello//:&quot;" time="0.000368"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator / pattern &quot;/hello{/person}&quot; should not match &quot;/hello///&quot;" time="0.000362"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator / pattern &quot;/hello{/person}&quot; should not match &quot;/hello//?&quot;" time="0.000360"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator / pattern &quot;/hello{/person}&quot; should not match &quot;/hello//#&quot;" time="0.000358"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator / pattern &quot;/hello{/person}&quot; should not match &quot;/hello//[&quot;" time="0.000359"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator / pattern &quot;/hello{/person}&quot; should not match &quot;/hello//]&quot;" time="0.000354"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator / pattern &quot;/hello{/person}&quot; should not match &quot;/hello//@&quot;" time="0.000434"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator / pattern &quot;/hello{/person}&quot; should not match &quot;/hello//!&quot;" time="0.000359"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator / pattern &quot;/hello{/person}&quot; should not match &quot;/hello//*&quot;" time="0.000363"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator / pattern &quot;/hello{/person}&quot; should not match &quot;/hello//+&quot;" time="0.000420"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator / pattern &quot;/hello{/person}&quot; should not match &quot;/hello//,&quot;" time="0.000432"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator / pattern &quot;/hello{/person}&quot; should not match &quot;/hello//;&quot;" time="0.000434"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator / pattern &quot;/hello{/person}&quot; should not match &quot;/hello//=&quot;" time="0.000462"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator / pattern &quot;/hello{/person}&quot; should not match &quot;/hello/:&quot;" time="0.000408"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator / pattern &quot;/hello{/person}&quot; should not match &quot;/hello//&quot;" time="0.000358"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator / pattern &quot;/hello{/person}&quot; should not match &quot;/hello/?&quot;" time="0.000360"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator / pattern &quot;/hello{/person}&quot; should not match &quot;/hello/#&quot;" time="0.000463"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator / pattern &quot;/hello{/person}&quot; should not match &quot;/hello/[&quot;" time="0.000406"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator / pattern &quot;/hello{/person}&quot; should not match &quot;/hello/]&quot;" time="0.000364"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator / pattern &quot;/hello{/person}&quot; should not match &quot;/hello/@&quot;" time="0.000362"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator / pattern &quot;/hello{/person}&quot; should not match &quot;/hello/!&quot;" time="0.000361"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator / pattern &quot;/hello{/person}&quot; should not match &quot;/hello/*&quot;" time="0.000361"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator / pattern &quot;/hello{/person}&quot; should not match &quot;/hello/+&quot;" time="0.000359"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator / pattern &quot;/hello{/person}&quot; should not match &quot;/hello/,&quot;" time="0.000358"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator / pattern &quot;/hello{/person}&quot; should not match &quot;/hello/;&quot;" time="0.000354"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator / pattern &quot;/hello{/person}&quot; should not match &quot;/hello/=&quot;" time="0.000356"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 3 operator / pattern &quot;/hello{/person}&quot; to_s should be == /hello{/person}" time="0.000142"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 3 operator / pattern &quot;/hello{/person}&quot; inspect should be == #&lt;Mustermann::Template:&quot;/hello{/person}&quot;&gt;" time="0.000156"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 3 operator / pattern &quot;/hello{/person}&quot; names should be a kind of Array" time="0.000154"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 3 operator / pattern &quot;{/a,b,c}&quot; string should be immune to external change" time="0.000102"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator / pattern &quot;{/a,b,c}&quot; should match &quot;/~x/42/_&quot;" time="0.000460"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator / pattern &quot;{/a,b,c}&quot; should not match &quot;/~x,42&quot;" time="0.000365"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator / pattern &quot;{/a,b,c}&quot; should not match &quot;/~x.42&quot;" time="0.000365"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator / pattern &quot;{/a,b,c}&quot; should not match &quot;/~x#42&quot;" time="0.000361"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator / pattern &quot;{/a,b,c}&quot; should not match &quot;/~x,42,_&quot;" time="0.000358"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator / pattern &quot;{/a,b,c}&quot; should not match &quot;~x/42/_&quot;" time="0.000356"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 3 operator / pattern &quot;{/a,b,c}&quot; to_s should be == {/a,b,c}" time="0.000194"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 3 operator / pattern &quot;{/a,b,c}&quot; inspect should be == #&lt;Mustermann::Template:&quot;{/a,b,c}&quot;&gt;" time="0.000155"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 3 operator / pattern &quot;{/a,b,c}&quot; names should be a kind of Array" time="0.000152"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 3 operator ; pattern &quot;/hello/{;person}&quot; string should be immune to external change" time="0.000102"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ; pattern &quot;/hello/{;person}&quot; should match &quot;/hello/;person=Frank&quot;" time="0.000422"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ; pattern &quot;/hello/{;person}&quot; should match &quot;/hello/;person=a_b~c&quot;" time="0.000366"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ; pattern &quot;/hello/{;person}&quot; should match &quot;/hello/;person&quot;" time="0.000383"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ; pattern &quot;/hello/{;person}&quot; should not match &quot;/hello/;persona=Frank&quot;" time="0.000379"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ; pattern &quot;/hello/{;person}&quot; should not match &quot;/hello/;persona=a_b~c&quot;" time="0.000358"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ; pattern &quot;/hello/{;person}&quot; should not match &quot;/hello/;person=:&quot;" time="0.000363"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ; pattern &quot;/hello/{;person}&quot; should not match &quot;/hello/;person=/&quot;" time="0.000363"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ; pattern &quot;/hello/{;person}&quot; should not match &quot;/hello/;person=?&quot;" time="0.000360"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ; pattern &quot;/hello/{;person}&quot; should not match &quot;/hello/;person=#&quot;" time="0.000360"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ; pattern &quot;/hello/{;person}&quot; should not match &quot;/hello/;person=[&quot;" time="0.000357"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ; pattern &quot;/hello/{;person}&quot; should not match &quot;/hello/;person=]&quot;" time="0.000360"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ; pattern &quot;/hello/{;person}&quot; should not match &quot;/hello/;person=@&quot;" time="0.000364"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ; pattern &quot;/hello/{;person}&quot; should not match &quot;/hello/;person=!&quot;" time="0.000358"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ; pattern &quot;/hello/{;person}&quot; should not match &quot;/hello/;person=*&quot;" time="0.000357"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ; pattern &quot;/hello/{;person}&quot; should not match &quot;/hello/;person=+&quot;" time="0.000363"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ; pattern &quot;/hello/{;person}&quot; should not match &quot;/hello/;person=,&quot;" time="0.000362"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ; pattern &quot;/hello/{;person}&quot; should not match &quot;/hello/;person=;&quot;" time="0.000403"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ; pattern &quot;/hello/{;person}&quot; should not match &quot;/hello/;person==&quot;" time="0.000354"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ; pattern &quot;/hello/{;person}&quot; should not match &quot;/hello/;Frank&quot;" time="0.000357"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ; pattern &quot;/hello/{;person}&quot; should not match &quot;/hello/;a_b~c&quot;" time="0.000350"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ; pattern &quot;/hello/{;person}&quot; should not match &quot;/hello/;a.%20&quot;" time="0.000380"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ; pattern &quot;/hello/{;person}&quot; should not match &quot;/hello/:&quot;" time="0.000441"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ; pattern &quot;/hello/{;person}&quot; should not match &quot;/hello//&quot;" time="0.000358"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ; pattern &quot;/hello/{;person}&quot; should not match &quot;/hello/?&quot;" time="0.000356"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ; pattern &quot;/hello/{;person}&quot; should not match &quot;/hello/#&quot;" time="0.000391"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ; pattern &quot;/hello/{;person}&quot; should not match &quot;/hello/[&quot;" time="0.000360"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ; pattern &quot;/hello/{;person}&quot; should not match &quot;/hello/]&quot;" time="0.000360"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ; pattern &quot;/hello/{;person}&quot; should not match &quot;/hello/@&quot;" time="0.000356"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ; pattern &quot;/hello/{;person}&quot; should not match &quot;/hello/!&quot;" time="0.000355"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ; pattern &quot;/hello/{;person}&quot; should not match &quot;/hello/*&quot;" time="0.000355"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ; pattern &quot;/hello/{;person}&quot; should not match &quot;/hello/+&quot;" time="0.000356"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ; pattern &quot;/hello/{;person}&quot; should not match &quot;/hello/,&quot;" time="0.000357"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ; pattern &quot;/hello/{;person}&quot; should not match &quot;/hello/;&quot;" time="0.000356"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ; pattern &quot;/hello/{;person}&quot; should not match &quot;/hello/=&quot;" time="0.000353"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 3 operator ; pattern &quot;/hello/{;person}&quot; to_s should be == /hello/{;person}" time="0.000140"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 3 operator ; pattern &quot;/hello/{;person}&quot; inspect should be == #&lt;Mustermann::Template:&quot;/hello/{;person}&quot;&gt;" time="0.000153"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 3 operator ; pattern &quot;/hello/{;person}&quot; names should be a kind of Array" time="0.000153"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 3 operator ; pattern &quot;{;a,b,c}&quot; string should be immune to external change" time="0.000100"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ; pattern &quot;{;a,b,c}&quot; should match &quot;;a=~x;b=42;c=_&quot;" time="0.000460"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ; pattern &quot;{;a,b,c}&quot; should match &quot;;a=~x;b;c=_&quot;" time="0.000366"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ; pattern &quot;{;a,b,c}&quot; should not match &quot;;a=~x;c=_;b=42&quot;" time="0.000361"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ; pattern &quot;{;a,b,c}&quot; should not match &quot;;a=~x;b=42&quot;" time="0.000361"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ; pattern &quot;{;a,b,c}&quot; should not match &quot;a=~x;b=42&quot;" time="0.000358"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ; pattern &quot;{;a,b,c}&quot; should not match &quot;;a=~x;b=#42;c&quot;" time="0.000358"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ; pattern &quot;{;a,b,c}&quot; should not match &quot;;a=~x,b=42,c=_&quot;" time="0.000356"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ; pattern &quot;{;a,b,c}&quot; should not match &quot;~x;b=42;c=_&quot;" time="0.000415"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 3 operator ; pattern &quot;{;a,b,c}&quot; to_s should be == {;a,b,c}" time="0.000246"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 3 operator ; pattern &quot;{;a,b,c}&quot; inspect should be == #&lt;Mustermann::Template:&quot;{;a,b,c}&quot;&gt;" time="0.000176"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 3 operator ; pattern &quot;{;a,b,c}&quot; names should be a kind of Array" time="0.000168"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 3 operator ? pattern &quot;/hello/{?person}&quot; string should be immune to external change" time="0.000100"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ? pattern &quot;/hello/{?person}&quot; should match &quot;/hello/?person=Frank&quot;" time="0.000491"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ? pattern &quot;/hello/{?person}&quot; should match &quot;/hello/?person=a_b~c&quot;" time="0.000600"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ? pattern &quot;/hello/{?person}&quot; should match &quot;/hello/?person&quot;" time="0.000365"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ? pattern &quot;/hello/{?person}&quot; should not match &quot;/hello/?persona=Frank&quot;" time="0.000364"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ? pattern &quot;/hello/{?person}&quot; should not match &quot;/hello/?persona=a_b~c&quot;" time="0.000363"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ? pattern &quot;/hello/{?person}&quot; should not match &quot;/hello/?person=:&quot;" time="0.000359"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ? pattern &quot;/hello/{?person}&quot; should not match &quot;/hello/?person=/&quot;" time="0.000359"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ? pattern &quot;/hello/{?person}&quot; should not match &quot;/hello/?person=?&quot;" time="0.000360"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ? pattern &quot;/hello/{?person}&quot; should not match &quot;/hello/?person=#&quot;" time="0.000355"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ? pattern &quot;/hello/{?person}&quot; should not match &quot;/hello/?person=[&quot;" time="0.000407"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ? pattern &quot;/hello/{?person}&quot; should not match &quot;/hello/?person=]&quot;" time="0.000356"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ? pattern &quot;/hello/{?person}&quot; should not match &quot;/hello/?person=@&quot;" time="0.000356"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ? pattern &quot;/hello/{?person}&quot; should not match &quot;/hello/?person=!&quot;" time="0.000355"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ? pattern &quot;/hello/{?person}&quot; should not match &quot;/hello/?person=*&quot;" time="0.000357"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ? pattern &quot;/hello/{?person}&quot; should not match &quot;/hello/?person=+&quot;" time="0.000363"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ? pattern &quot;/hello/{?person}&quot; should not match &quot;/hello/?person=,&quot;" time="0.000453"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ? pattern &quot;/hello/{?person}&quot; should not match &quot;/hello/?person=;&quot;" time="0.000356"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ? pattern &quot;/hello/{?person}&quot; should not match &quot;/hello/?person==&quot;" time="0.000397"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ? pattern &quot;/hello/{?person}&quot; should not match &quot;/hello/?Frank&quot;" time="0.000374"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ? pattern &quot;/hello/{?person}&quot; should not match &quot;/hello/?a_b~c&quot;" time="0.000352"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ? pattern &quot;/hello/{?person}&quot; should not match &quot;/hello/?a.%20&quot;" time="0.000369"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ? pattern &quot;/hello/{?person}&quot; should not match &quot;/hello/:&quot;" time="0.000343"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ? pattern &quot;/hello/{?person}&quot; should not match &quot;/hello//&quot;" time="0.000342"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ? pattern &quot;/hello/{?person}&quot; should not match &quot;/hello/?&quot;" time="0.000348"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ? pattern &quot;/hello/{?person}&quot; should not match &quot;/hello/#&quot;" time="0.000344"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ? pattern &quot;/hello/{?person}&quot; should not match &quot;/hello/[&quot;" time="0.000365"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ? pattern &quot;/hello/{?person}&quot; should not match &quot;/hello/]&quot;" time="0.000408"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ? pattern &quot;/hello/{?person}&quot; should not match &quot;/hello/@&quot;" time="0.000382"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ? pattern &quot;/hello/{?person}&quot; should not match &quot;/hello/!&quot;" time="0.000377"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ? pattern &quot;/hello/{?person}&quot; should not match &quot;/hello/*&quot;" time="0.000346"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ? pattern &quot;/hello/{?person}&quot; should not match &quot;/hello/+&quot;" time="0.000345"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ? pattern &quot;/hello/{?person}&quot; should not match &quot;/hello/,&quot;" time="0.000411"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ? pattern &quot;/hello/{?person}&quot; should not match &quot;/hello/;&quot;" time="0.000431"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ? pattern &quot;/hello/{?person}&quot; should not match &quot;/hello/=&quot;" time="0.000391"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 3 operator ? pattern &quot;/hello/{?person}&quot; to_s should be == /hello/{?person}" time="0.000141"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 3 operator ? pattern &quot;/hello/{?person}&quot; inspect should be == #&lt;Mustermann::Template:&quot;/hello/{?person}&quot;&gt;" time="0.000154"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 3 operator ? pattern &quot;/hello/{?person}&quot; names should be a kind of Array" time="0.000152"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 3 operator ? pattern &quot;{?a,b,c}&quot; string should be immune to external change" time="0.000099"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ? pattern &quot;{?a,b,c}&quot; should match &quot;?a=~x&amp;b=42&amp;c=_&quot;" time="0.000452"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ? pattern &quot;{?a,b,c}&quot; should match &quot;?a=~x&amp;b&amp;c=_&quot;" time="0.000356"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ? pattern &quot;{?a,b,c}&quot; should not match &quot;?a=~x&amp;c=_&amp;b=42&quot;" time="0.000351"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ? pattern &quot;{?a,b,c}&quot; should not match &quot;?a=~x&amp;b=42&quot;" time="0.000362"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ? pattern &quot;{?a,b,c}&quot; should not match &quot;a=~x&amp;b=42&quot;" time="0.000414"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ? pattern &quot;{?a,b,c}&quot; should not match &quot;?a=~x&amp;b=#42&amp;c&quot;" time="0.000350"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ? pattern &quot;{?a,b,c}&quot; should not match &quot;?a=~x,b=42,c=_&quot;" time="0.000347"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator ? pattern &quot;{?a,b,c}&quot; should not match &quot;~x&amp;b=42&amp;c=_&quot;" time="0.000346"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 3 operator ? pattern &quot;{?a,b,c}&quot; to_s should be == {?a,b,c}" time="0.000128"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 3 operator ? pattern &quot;{?a,b,c}&quot; inspect should be == #&lt;Mustermann::Template:&quot;{?a,b,c}&quot;&gt;" time="0.000146"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 3 operator ? pattern &quot;{?a,b,c}&quot; names should be a kind of Array" time="0.000146"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 3 operator &amp; pattern &quot;/hello/{&amp;person}&quot; string should be immune to external change" time="0.000101"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator &amp; pattern &quot;/hello/{&amp;person}&quot; should match &quot;/hello/&amp;person=Frank&quot;" time="0.000410"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator &amp; pattern &quot;/hello/{&amp;person}&quot; should match &quot;/hello/&amp;person=a_b~c&quot;" time="0.000394"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator &amp; pattern &quot;/hello/{&amp;person}&quot; should match &quot;/hello/&amp;person&quot;" time="0.000358"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator &amp; pattern &quot;/hello/{&amp;person}&quot; should not match &quot;/hello/&amp;persona=Frank&quot;" time="0.000351"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator &amp; pattern &quot;/hello/{&amp;person}&quot; should not match &quot;/hello/&amp;persona=a_b~c&quot;" time="0.000348"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator &amp; pattern &quot;/hello/{&amp;person}&quot; should not match &quot;/hello/&amp;person=:&quot;" time="0.000348"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator &amp; pattern &quot;/hello/{&amp;person}&quot; should not match &quot;/hello/&amp;person=/&quot;" time="0.000348"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator &amp; pattern &quot;/hello/{&amp;person}&quot; should not match &quot;/hello/&amp;person=?&quot;" time="0.000350"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator &amp; pattern &quot;/hello/{&amp;person}&quot; should not match &quot;/hello/&amp;person=#&quot;" time="0.000348"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator &amp; pattern &quot;/hello/{&amp;person}&quot; should not match &quot;/hello/&amp;person=[&quot;" time="0.000349"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator &amp; pattern &quot;/hello/{&amp;person}&quot; should not match &quot;/hello/&amp;person=]&quot;" time="0.000347"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator &amp; pattern &quot;/hello/{&amp;person}&quot; should not match &quot;/hello/&amp;person=@&quot;" time="0.000449"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator &amp; pattern &quot;/hello/{&amp;person}&quot; should not match &quot;/hello/&amp;person=!&quot;" time="0.000355"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator &amp; pattern &quot;/hello/{&amp;person}&quot; should not match &quot;/hello/&amp;person=*&quot;" time="0.000350"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator &amp; pattern &quot;/hello/{&amp;person}&quot; should not match &quot;/hello/&amp;person=+&quot;" time="0.000353"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator &amp; pattern &quot;/hello/{&amp;person}&quot; should not match &quot;/hello/&amp;person=,&quot;" time="0.000350"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator &amp; pattern &quot;/hello/{&amp;person}&quot; should not match &quot;/hello/&amp;person=;&quot;" time="0.000348"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator &amp; pattern &quot;/hello/{&amp;person}&quot; should not match &quot;/hello/&amp;person==&quot;" time="0.000346"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator &amp; pattern &quot;/hello/{&amp;person}&quot; should not match &quot;/hello/&amp;Frank&quot;" time="0.000347"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator &amp; pattern &quot;/hello/{&amp;person}&quot; should not match &quot;/hello/&amp;a_b~c&quot;" time="0.046543"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator &amp; pattern &quot;/hello/{&amp;person}&quot; should not match &quot;/hello/&amp;a.%20&quot;" time="0.000418"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator &amp; pattern &quot;/hello/{&amp;person}&quot; should not match &quot;/hello/:&quot;" time="0.000577"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator &amp; pattern &quot;/hello/{&amp;person}&quot; should not match &quot;/hello//&quot;" time="0.000709"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator &amp; pattern &quot;/hello/{&amp;person}&quot; should not match &quot;/hello/?&quot;" time="0.000406"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator &amp; pattern &quot;/hello/{&amp;person}&quot; should not match &quot;/hello/#&quot;" time="0.000468"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator &amp; pattern &quot;/hello/{&amp;person}&quot; should not match &quot;/hello/[&quot;" time="0.000398"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator &amp; pattern &quot;/hello/{&amp;person}&quot; should not match &quot;/hello/]&quot;" time="0.000396"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator &amp; pattern &quot;/hello/{&amp;person}&quot; should not match &quot;/hello/@&quot;" time="0.000398"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator &amp; pattern &quot;/hello/{&amp;person}&quot; should not match &quot;/hello/!&quot;" time="0.000380"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator &amp; pattern &quot;/hello/{&amp;person}&quot; should not match &quot;/hello/*&quot;" time="0.000462"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator &amp; pattern &quot;/hello/{&amp;person}&quot; should not match &quot;/hello/+&quot;" time="0.000363"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator &amp; pattern &quot;/hello/{&amp;person}&quot; should not match &quot;/hello/,&quot;" time="0.000371"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator &amp; pattern &quot;/hello/{&amp;person}&quot; should not match &quot;/hello/;&quot;" time="0.000374"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator &amp; pattern &quot;/hello/{&amp;person}&quot; should not match &quot;/hello/=&quot;" time="0.000443"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 3 operator &amp; pattern &quot;/hello/{&amp;person}&quot; to_s should be == /hello/{&amp;person}" time="0.000159"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 3 operator &amp; pattern &quot;/hello/{&amp;person}&quot; inspect should be == #&lt;Mustermann::Template:&quot;/hello/{&amp;person}&quot;&gt;" time="0.000162"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 3 operator &amp; pattern &quot;/hello/{&amp;person}&quot; names should be a kind of Array" time="0.000164"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 3 operator &amp; pattern &quot;{&amp;a,b,c}&quot; string should be immune to external change" time="0.000109"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator &amp; pattern &quot;{&amp;a,b,c}&quot; should match &quot;&amp;a=~x&amp;b=42&amp;c=_&quot;" time="0.000484"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator &amp; pattern &quot;{&amp;a,b,c}&quot; should match &quot;&amp;a=~x&amp;b&amp;c=_&quot;" time="0.000366"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator &amp; pattern &quot;{&amp;a,b,c}&quot; should not match &quot;&amp;a=~x&amp;c=_&amp;b=42&quot;" time="0.000365"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator &amp; pattern &quot;{&amp;a,b,c}&quot; should not match &quot;&amp;a=~x&amp;b=42&quot;" time="0.000365"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator &amp; pattern &quot;{&amp;a,b,c}&quot; should not match &quot;a=~x&amp;b=42&quot;" time="0.000373"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator &amp; pattern &quot;{&amp;a,b,c}&quot; should not match &quot;&amp;a=~x&amp;b=#42&amp;c&quot;" time="0.000380"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator &amp; pattern &quot;{&amp;a,b,c}&quot; should not match &quot;&amp;a=~x,b=42,c=_&quot;" time="0.000359"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 3 operator &amp; pattern &quot;{&amp;a,b,c}&quot; should not match &quot;~x&amp;b=42&amp;c=_&quot;" time="0.000354"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 3 operator &amp; pattern &quot;{&amp;a,b,c}&quot; to_s should be == {&amp;a,b,c}" time="0.000193"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 3 operator &amp; pattern &quot;{&amp;a,b,c}&quot; inspect should be == #&lt;Mustermann::Template:&quot;{&amp;a,b,c}&quot;&gt;" time="0.000153"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 3 operator &amp; pattern &quot;{&amp;a,b,c}&quot; names should be a kind of Array" time="0.000150"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 without operator prefix pattern &quot;{a:3}/bar&quot; string should be immune to external change" time="0.000108"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 without operator prefix pattern &quot;{a:3}/bar&quot; should match &quot;foo/bar&quot;" time="0.000430"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 without operator prefix pattern &quot;{a:3}/bar&quot; should match &quot;fo/bar&quot;" time="0.000368"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 without operator prefix pattern &quot;{a:3}/bar&quot; should match &quot;f/bar&quot;" time="0.000365"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 without operator prefix pattern &quot;{a:3}/bar&quot; should not match &quot;fooo/bar&quot;" time="0.000365"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 without operator prefix pattern &quot;{a:3}/bar&quot; to_s should be == {a:3}/bar" time="0.000130"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 without operator prefix pattern &quot;{a:3}/bar&quot; inspect should be == #&lt;Mustermann::Template:&quot;{a:3}/bar&quot;&gt;" time="0.000153"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 without operator prefix pattern &quot;{a:3}/bar&quot; names should be a kind of Array" time="0.000151"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 without operator prefix pattern &quot;{a:3}{b}&quot; string should be immune to external change" time="0.000104"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 without operator prefix pattern &quot;{a:3}{b}&quot; should match &quot;foobar&quot;" time="0.000432"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 without operator prefix pattern &quot;{a:3}{b}&quot; to_s should be == {a:3}{b}" time="0.000131"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 without operator prefix pattern &quot;{a:3}{b}&quot; inspect should be == #&lt;Mustermann::Template:&quot;{a:3}{b}&quot;&gt;" time="0.000150"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 without operator prefix pattern &quot;{a:3}{b}&quot; names should be a kind of Array" time="0.000161"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 without operator expand pattern &quot;{a*}&quot; string should be immune to external change" time="0.000161"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 without operator expand pattern &quot;{a*}&quot; should match &quot;a&quot;" time="0.000509"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 without operator expand pattern &quot;{a*}&quot; should match &quot;a,b&quot;" time="0.000374"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 without operator expand pattern &quot;{a*}&quot; should match &quot;a,b,c&quot;" time="0.000367"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 without operator expand pattern &quot;{a*}&quot; should not match &quot;a,b/c&quot;" time="0.000366"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 without operator expand pattern &quot;{a*}&quot; should not match &quot;a,&quot;" time="0.000405"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 without operator expand pattern &quot;{a*}&quot; should be == {&quot;a&quot;=&gt;[&quot;a&quot;]}" time="0.001820"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 without operator expand pattern &quot;{a*}&quot; should be == {&quot;a&quot;=&gt;[&quot;a&quot;, &quot;b&quot;]}" time="0.000149"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 without operator expand pattern &quot;{a*}&quot; to_s should be == {a*}" time="0.000136"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 without operator expand pattern &quot;{a*}&quot; inspect should be == #&lt;Mustermann::Template:&quot;{a*}&quot;&gt;" time="0.000157"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 without operator expand pattern &quot;{a*}&quot; names should be a kind of Array" time="0.000153"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 without operator expand pattern &quot;{a*},{b}&quot; string should be immune to external change" time="0.000108"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 without operator expand pattern &quot;{a*},{b}&quot; should match &quot;a,b&quot;" time="0.000465"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 without operator expand pattern &quot;{a*},{b}&quot; should match &quot;a,b,c&quot;" time="0.000402"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 without operator expand pattern &quot;{a*},{b}&quot; should not match &quot;a,b/c&quot;" time="0.000375"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 without operator expand pattern &quot;{a*},{b}&quot; should not match &quot;a,&quot;" time="0.000377"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 without operator expand pattern &quot;{a*},{b}&quot; should be == {&quot;a&quot;=&gt;[&quot;a&quot;], &quot;b&quot;=&gt;&quot;b&quot;}" time="0.001876"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 without operator expand pattern &quot;{a*},{b}&quot; should be == {&quot;a&quot;=&gt;[&quot;a&quot;, &quot;b&quot;], &quot;b&quot;=&gt;&quot;c&quot;}" time="0.000160"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 without operator expand pattern &quot;{a*},{b}&quot; to_s should be == {a*},{b}" time="0.000136"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 without operator expand pattern &quot;{a*},{b}&quot; inspect should be == #&lt;Mustermann::Template:&quot;{a*},{b}&quot;&gt;" time="0.000160"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 without operator expand pattern &quot;{a*},{b}&quot; names should be a kind of Array" time="0.000157"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 without operator expand pattern &quot;{a*,b}&quot; string should be immune to external change" time="0.000105"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 without operator expand pattern &quot;{a*,b}&quot; should match &quot;a,b&quot;" time="0.000458"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 without operator expand pattern &quot;{a*,b}&quot; should match &quot;a,b,c&quot;" time="0.000381"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 without operator expand pattern &quot;{a*,b}&quot; should not match &quot;a,b/c&quot;" time="0.000377"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 without operator expand pattern &quot;{a*,b}&quot; should not match &quot;a,&quot;" time="0.000388"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 without operator expand pattern &quot;{a*,b}&quot; should be == {&quot;a&quot;=&gt;[&quot;a&quot;], &quot;b&quot;=&gt;&quot;b&quot;}" time="0.002093"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 without operator expand pattern &quot;{a*,b}&quot; should be == {&quot;a&quot;=&gt;[&quot;a&quot;, &quot;b&quot;], &quot;b&quot;=&gt;&quot;c&quot;}" time="0.000162"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 without operator expand pattern &quot;{a*,b}&quot; to_s should be == {a*,b}" time="0.000138"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 without operator expand pattern &quot;{a*,b}&quot; inspect should be == #&lt;Mustermann::Template:&quot;{a*,b}&quot;&gt;" time="0.000157"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 without operator expand pattern &quot;{a*,b}&quot; names should be a kind of Array" time="0.000155"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator + prefix pattern &quot;{+a:3}/bar&quot; string should be immune to external change" time="0.000107"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator + prefix pattern &quot;{+a:3}/bar&quot; should match &quot;foo/bar&quot;" time="0.000426"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator + prefix pattern &quot;{+a:3}/bar&quot; should match &quot;fo/bar&quot;" time="0.000406"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator + prefix pattern &quot;{+a:3}/bar&quot; should match &quot;f/bar&quot;" time="0.000372"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator + prefix pattern &quot;{+a:3}/bar&quot; should not match &quot;fooo/bar&quot;" time="0.000438"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator + prefix pattern &quot;{+a:3}/bar&quot; to_s should be == {+a:3}/bar" time="0.000135"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator + prefix pattern &quot;{+a:3}/bar&quot; inspect should be == #&lt;Mustermann::Template:&quot;{+a:3}/bar&quot;&gt;" time="0.000153"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator + prefix pattern &quot;{+a:3}/bar&quot; names should be a kind of Array" time="0.000152"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator + prefix pattern &quot;{+a:3}{b}&quot; string should be immune to external change" time="0.000103"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator + prefix pattern &quot;{+a:3}{b}&quot; should match &quot;foobar&quot;" time="0.000430"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator + prefix pattern &quot;{+a:3}{b}&quot; to_s should be == {+a:3}{b}" time="0.000131"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator + prefix pattern &quot;{+a:3}{b}&quot; inspect should be == #&lt;Mustermann::Template:&quot;{+a:3}{b}&quot;&gt;" time="0.000151"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator + prefix pattern &quot;{+a:3}{b}&quot; names should be a kind of Array" time="0.000148"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator + expand pattern &quot;{+a*}&quot; string should be immune to external change" time="0.000103"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator + expand pattern &quot;{+a*}&quot; should match &quot;a&quot;" time="0.000427"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator + expand pattern &quot;{+a*}&quot; should match &quot;a,b&quot;" time="0.000430"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator + expand pattern &quot;{+a*}&quot; should match &quot;a,b,c&quot;" time="0.000360"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator + expand pattern &quot;{+a*}&quot; should match &quot;a,b/c&quot;" time="0.000358"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator + expand pattern &quot;{+a*}&quot; to_s should be == {+a*}" time="0.000130"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator + expand pattern &quot;{+a*}&quot; inspect should be == #&lt;Mustermann::Template:&quot;{+a*}&quot;&gt;" time="0.000149"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator + expand pattern &quot;{+a*}&quot; names should be a kind of Array" time="0.000147"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator + expand pattern &quot;{+a*},{b}&quot; string should be immune to external change" time="0.000102"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator + expand pattern &quot;{+a*},{b}&quot; should match &quot;a,b&quot;" time="0.000453"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator + expand pattern &quot;{+a*},{b}&quot; should match &quot;a,b,c&quot;" time="0.000374"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator + expand pattern &quot;{+a*},{b}&quot; should not match &quot;a,b/c&quot;" time="0.000368"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator + expand pattern &quot;{+a*},{b}&quot; should not match &quot;a,&quot;" time="0.000400"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator + expand pattern &quot;{+a*},{b}&quot; should be == {&quot;a&quot;=&gt;[&quot;a&quot;], &quot;b&quot;=&gt;&quot;b&quot;}" time="0.001835"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator + expand pattern &quot;{+a*},{b}&quot; should be == {&quot;a&quot;=&gt;[&quot;a&quot;, &quot;b&quot;], &quot;b&quot;=&gt;&quot;c&quot;}" time="0.000173"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator + expand pattern &quot;{+a*},{b}&quot; to_s should be == {+a*},{b}" time="0.000153"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator + expand pattern &quot;{+a*},{b}&quot; inspect should be == #&lt;Mustermann::Template:&quot;{+a*},{b}&quot;&gt;" time="0.000152"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator + expand pattern &quot;{+a*},{b}&quot; names should be a kind of Array" time="0.000149"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator # prefix pattern &quot;{#a:3}/bar&quot; string should be immune to external change" time="0.000105"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator # prefix pattern &quot;{#a:3}/bar&quot; should match &quot;#foo/bar&quot;" time="0.000418"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator # prefix pattern &quot;{#a:3}/bar&quot; should match &quot;#fo/bar&quot;" time="0.000373"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator # prefix pattern &quot;{#a:3}/bar&quot; should match &quot;#f/bar&quot;" time="0.000366"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator # prefix pattern &quot;{#a:3}/bar&quot; should not match &quot;#fooo/bar&quot;" time="0.000367"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator # prefix pattern &quot;{#a:3}/bar&quot; to_s should be == {#a:3}/bar" time="0.000130"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator # prefix pattern &quot;{#a:3}/bar&quot; inspect should be == #&lt;Mustermann::Template:&quot;{#a:3}/bar&quot;&gt;" time="0.000152"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator # prefix pattern &quot;{#a:3}/bar&quot; names should be a kind of Array" time="0.000147"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator # prefix pattern &quot;{#a:3}{b}&quot; string should be immune to external change" time="0.000101"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator # prefix pattern &quot;{#a:3}{b}&quot; should match &quot;#foobar&quot;" time="0.000426"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator # prefix pattern &quot;{#a:3}{b}&quot; to_s should be == {#a:3}{b}" time="0.000149"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator # prefix pattern &quot;{#a:3}{b}&quot; inspect should be == #&lt;Mustermann::Template:&quot;{#a:3}{b}&quot;&gt;" time="0.000163"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator # prefix pattern &quot;{#a:3}{b}&quot; names should be a kind of Array" time="0.000151"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator # expand pattern &quot;{#a*}&quot; string should be immune to external change" time="0.000105"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator # expand pattern &quot;{#a*}&quot; should match &quot;#a&quot;" time="0.000425"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator # expand pattern &quot;{#a*}&quot; should match &quot;#a,b&quot;" time="0.000361"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator # expand pattern &quot;{#a*}&quot; should match &quot;#a,b,c&quot;" time="0.000355"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator # expand pattern &quot;{#a*}&quot; should match &quot;#a,b/c&quot;" time="0.000353"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator # expand pattern &quot;{#a*}&quot; should be == {&quot;a&quot;=&gt;[&quot;a&quot;, &quot;b&quot;]}" time="0.001765"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator # expand pattern &quot;{#a*}&quot; should be == {&quot;a&quot;=&gt;[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]}" time="0.000149"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator # expand pattern &quot;{#a*}&quot; to_s should be == {#a*}" time="0.000136"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator # expand pattern &quot;{#a*}&quot; inspect should be == #&lt;Mustermann::Template:&quot;{#a*}&quot;&gt;" time="0.000238"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator # expand pattern &quot;{#a*}&quot; names should be a kind of Array" time="0.000153"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator # expand pattern &quot;{#a*,b}&quot; string should be immune to external change" time="0.000106"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator # expand pattern &quot;{#a*,b}&quot; should match &quot;#a,b&quot;" time="0.000447"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator # expand pattern &quot;{#a*,b}&quot; should match &quot;#a,b,c&quot;" time="0.000361"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator # expand pattern &quot;{#a*,b}&quot; should not match &quot;#a,&quot;" time="0.000354"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator # expand pattern &quot;{#a*,b}&quot; should be == {&quot;a&quot;=&gt;[&quot;a&quot;], &quot;b&quot;=&gt;&quot;b&quot;}" time="0.001795"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator # expand pattern &quot;{#a*,b}&quot; should be == {&quot;a&quot;=&gt;[&quot;a&quot;, &quot;b&quot;], &quot;b&quot;=&gt;&quot;c&quot;}" time="0.000154"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator # expand pattern &quot;{#a*,b}&quot; to_s should be == {#a*,b}" time="0.000132"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator # expand pattern &quot;{#a*,b}&quot; inspect should be == #&lt;Mustermann::Template:&quot;{#a*,b}&quot;&gt;" time="0.000153"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator # expand pattern &quot;{#a*,b}&quot; names should be a kind of Array" time="0.000150"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator . prefix pattern &quot;{.a:3}/bar&quot; string should be immune to external change" time="0.000106"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator . prefix pattern &quot;{.a:3}/bar&quot; should match &quot;.foo/bar&quot;" time="0.000410"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator . prefix pattern &quot;{.a:3}/bar&quot; should match &quot;.fo/bar&quot;" time="0.000367"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator . prefix pattern &quot;{.a:3}/bar&quot; should match &quot;.f/bar&quot;" time="0.000362"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator . prefix pattern &quot;{.a:3}/bar&quot; should not match &quot;.fooo/bar&quot;" time="0.000357"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator . prefix pattern &quot;{.a:3}/bar&quot; to_s should be == {.a:3}/bar" time="0.000132"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator . prefix pattern &quot;{.a:3}/bar&quot; inspect should be == #&lt;Mustermann::Template:&quot;{.a:3}/bar&quot;&gt;" time="0.000152"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator . prefix pattern &quot;{.a:3}/bar&quot; names should be a kind of Array" time="0.000193"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator . prefix pattern &quot;{.a:3}{b}&quot; string should be immune to external change" time="0.000106"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator . prefix pattern &quot;{.a:3}{b}&quot; should match &quot;.foobar&quot;" time="0.000421"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator . prefix pattern &quot;{.a:3}{b}&quot; to_s should be == {.a:3}{b}" time="0.000130"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator . prefix pattern &quot;{.a:3}{b}&quot; inspect should be == #&lt;Mustermann::Template:&quot;{.a:3}{b}&quot;&gt;" time="0.000150"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator . prefix pattern &quot;{.a:3}{b}&quot; names should be a kind of Array" time="0.000147"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator . expand pattern &quot;{.a*}&quot; string should be immune to external change" time="0.000104"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator . expand pattern &quot;{.a*}&quot; should match &quot;.a&quot;" time="0.000420"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator . expand pattern &quot;{.a*}&quot; should match &quot;.a.b&quot;" time="0.000359"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator . expand pattern &quot;{.a*}&quot; should match &quot;.a.b.c&quot;" time="0.000357"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator . expand pattern &quot;{.a*}&quot; should not match &quot;.a.b,c&quot;" time="0.000356"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator . expand pattern &quot;{.a*}&quot; should not match &quot;.a,&quot;" time="0.000350"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator . expand pattern &quot;{.a*}&quot; to_s should be == {.a*}" time="0.000131"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator . expand pattern &quot;{.a*}&quot; inspect should be == #&lt;Mustermann::Template:&quot;{.a*}&quot;&gt;" time="0.000180"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator . expand pattern &quot;{.a*}&quot; names should be a kind of Array" time="0.000180"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator . expand pattern &quot;{.a*,b}&quot; string should be immune to external change" time="0.000105"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator . expand pattern &quot;{.a*,b}&quot; should match &quot;.a.b&quot;" time="0.000449"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator . expand pattern &quot;{.a*,b}&quot; should match &quot;.a.b.c&quot;" time="0.000439"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator . expand pattern &quot;{.a*,b}&quot; should not match &quot;.a.b/c&quot;" time="0.000360"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator . expand pattern &quot;{.a*,b}&quot; should not match &quot;.a.&quot;" time="0.000356"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator . expand pattern &quot;{.a*,b}&quot; should be == {&quot;a&quot;=&gt;[&quot;a&quot;], &quot;b&quot;=&gt;&quot;b&quot;}" time="0.001799"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator . expand pattern &quot;{.a*,b}&quot; should be == {&quot;a&quot;=&gt;[&quot;a&quot;, &quot;b&quot;], &quot;b&quot;=&gt;&quot;c&quot;}" time="0.000156"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator . expand pattern &quot;{.a*,b}&quot; to_s should be == {.a*,b}" time="0.000135"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator . expand pattern &quot;{.a*,b}&quot; inspect should be == #&lt;Mustermann::Template:&quot;{.a*,b}&quot;&gt;" time="0.000157"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator . expand pattern &quot;{.a*,b}&quot; names should be a kind of Array" time="0.000152"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator / prefix pattern &quot;{/a:3}/bar&quot; string should be immune to external change" time="0.000159"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator / prefix pattern &quot;{/a:3}/bar&quot; should match &quot;/foo/bar&quot;" time="0.000534"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator / prefix pattern &quot;{/a:3}/bar&quot; should match &quot;/fo/bar&quot;" time="0.000408"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator / prefix pattern &quot;{/a:3}/bar&quot; should match &quot;/f/bar&quot;" time="0.000365"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator / prefix pattern &quot;{/a:3}/bar&quot; should not match &quot;/fooo/bar&quot;" time="0.000363"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator / prefix pattern &quot;{/a:3}/bar&quot; to_s should be == {/a:3}/bar" time="0.000135"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator / prefix pattern &quot;{/a:3}/bar&quot; inspect should be == #&lt;Mustermann::Template:&quot;{/a:3}/bar&quot;&gt;" time="0.000154"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator / prefix pattern &quot;{/a:3}/bar&quot; names should be a kind of Array" time="0.000148"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator / prefix pattern &quot;{/a:3}{b}&quot; string should be immune to external change" time="0.000105"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator / prefix pattern &quot;{/a:3}{b}&quot; should match &quot;/foobar&quot;" time="0.000427"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator / prefix pattern &quot;{/a:3}{b}&quot; to_s should be == {/a:3}{b}" time="0.000130"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator / prefix pattern &quot;{/a:3}{b}&quot; inspect should be == #&lt;Mustermann::Template:&quot;{/a:3}{b}&quot;&gt;" time="0.000268"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator / prefix pattern &quot;{/a:3}{b}&quot; names should be a kind of Array" time="0.000154"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator / expand pattern &quot;{/a*}&quot; string should be immune to external change" time="0.000105"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator / expand pattern &quot;{/a*}&quot; should match &quot;/a&quot;" time="0.000422"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator / expand pattern &quot;{/a*}&quot; should match &quot;/a/b&quot;" time="0.000356"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator / expand pattern &quot;{/a*}&quot; should match &quot;/a/b/c&quot;" time="0.000371"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator / expand pattern &quot;{/a*}&quot; should not match &quot;/a/b,c&quot;" time="0.000353"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator / expand pattern &quot;{/a*}&quot; should not match &quot;/a,&quot;" time="0.000351"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator / expand pattern &quot;{/a*}&quot; to_s should be == {/a*}" time="0.000131"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator / expand pattern &quot;{/a*}&quot; inspect should be == #&lt;Mustermann::Template:&quot;{/a*}&quot;&gt;" time="0.000152"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator / expand pattern &quot;{/a*}&quot; names should be a kind of Array" time="0.000205"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator / expand pattern &quot;{/a*,b}&quot; string should be immune to external change" time="0.000105"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator / expand pattern &quot;{/a*,b}&quot; should match &quot;/a/b&quot;" time="0.000439"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator / expand pattern &quot;{/a*,b}&quot; should match &quot;/a/b/c&quot;" time="0.000401"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator / expand pattern &quot;{/a*,b}&quot; should not match &quot;/a/b,c&quot;" time="0.000364"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator / expand pattern &quot;{/a*,b}&quot; should not match &quot;/a/&quot;" time="0.000358"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator / expand pattern &quot;{/a*,b}&quot; should be == {&quot;a&quot;=&gt;[&quot;a&quot;], &quot;b&quot;=&gt;&quot;b&quot;}" time="0.001807"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator / expand pattern &quot;{/a*,b}&quot; should be == {&quot;a&quot;=&gt;[&quot;a&quot;, &quot;b&quot;], &quot;b&quot;=&gt;&quot;c&quot;}" time="0.000165"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator / expand pattern &quot;{/a*,b}&quot; to_s should be == {/a*,b}" time="0.000142"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator / expand pattern &quot;{/a*,b}&quot; inspect should be == #&lt;Mustermann::Template:&quot;{/a*,b}&quot;&gt;" time="0.000159"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator / expand pattern &quot;{/a*,b}&quot; names should be a kind of Array" time="0.000156"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator ; prefix pattern &quot;{;a:3}/bar&quot; string should be immune to external change" time="0.000110"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator ; prefix pattern &quot;{;a:3}/bar&quot; should match &quot;;a=foo/bar&quot;" time="0.000421"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator ; prefix pattern &quot;{;a:3}/bar&quot; should match &quot;;a=fo/bar&quot;" time="0.000364"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator ; prefix pattern &quot;{;a:3}/bar&quot; should match &quot;;a=f/bar&quot;" time="0.000425"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator ; prefix pattern &quot;{;a:3}/bar&quot; should not match &quot;;a=fooo/bar&quot;" time="0.000360"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator ; prefix pattern &quot;{;a:3}/bar&quot; to_s should be == {;a:3}/bar" time="0.000132"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator ; prefix pattern &quot;{;a:3}/bar&quot; inspect should be == #&lt;Mustermann::Template:&quot;{;a:3}/bar&quot;&gt;" time="0.000152"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator ; prefix pattern &quot;{;a:3}/bar&quot; names should be a kind of Array" time="0.000151"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator ; prefix pattern &quot;{;a:3}{b}&quot; string should be immune to external change" time="0.000104"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator ; prefix pattern &quot;{;a:3}{b}&quot; should match &quot;;a=foobar&quot;" time="0.000422"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator ; prefix pattern &quot;{;a:3}{b}&quot; to_s should be == {;a:3}{b}" time="0.000129"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator ; prefix pattern &quot;{;a:3}{b}&quot; inspect should be == #&lt;Mustermann::Template:&quot;{;a:3}{b}&quot;&gt;" time="0.000152"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator ; prefix pattern &quot;{;a:3}{b}&quot; names should be a kind of Array" time="0.000149"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator ; expand pattern &quot;{;a*}&quot; string should be immune to external change" time="0.000112"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator ; expand pattern &quot;{;a*}&quot; should match &quot;;a=1&quot;" time="0.000422"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator ; expand pattern &quot;{;a*}&quot; should match &quot;;a=1;a=2&quot;" time="0.000359"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator ; expand pattern &quot;{;a*}&quot; should match &quot;;a=1;a=2;a=3&quot;" time="0.000356"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator ; expand pattern &quot;{;a*}&quot; should not match &quot;;a=1;a=2;b=3&quot;" time="0.000352"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator ; expand pattern &quot;{;a*}&quot; should not match &quot;;a=1;a=2;a=3,&quot;" time="0.000432"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator ; expand pattern &quot;{;a*}&quot; to_s should be == {;a*}" time="0.000132"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator ; expand pattern &quot;{;a*}&quot; inspect should be == #&lt;Mustermann::Template:&quot;{;a*}&quot;&gt;" time="0.000149"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator ; expand pattern &quot;{;a*}&quot; names should be a kind of Array" time="0.000149"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator ; expand pattern &quot;{;a*,b}&quot; string should be immune to external change" time="0.000106"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator ; expand pattern &quot;{;a*,b}&quot; should match &quot;;a=1;b&quot;" time="0.000447"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator ; expand pattern &quot;{;a*,b}&quot; should match &quot;;a=2;a=2;b=1&quot;" time="0.000359"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator ; expand pattern &quot;{;a*,b}&quot; should not match &quot;;a;b;c&quot;" time="0.000354"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator ; expand pattern &quot;{;a*,b}&quot; should not match &quot;;a;&quot;" time="0.000351"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator ; expand pattern &quot;{;a*,b}&quot; should be == {&quot;a&quot;=&gt;[&quot;2&quot;, &quot;2&quot;], &quot;b&quot;=&gt;nil}" time="0.001855"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator ; expand pattern &quot;{;a*,b}&quot; to_s should be == {;a*,b}" time="0.000140"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator ; expand pattern &quot;{;a*,b}&quot; inspect should be == #&lt;Mustermann::Template:&quot;{;a*,b}&quot;&gt;" time="0.000160"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator ; expand pattern &quot;{;a*,b}&quot; names should be a kind of Array" time="0.000154"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator ? prefix pattern &quot;{?a:3}/bar&quot; string should be immune to external change" time="0.000107"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator ? prefix pattern &quot;{?a:3}/bar&quot; should match &quot;?a=foo/bar&quot;" time="0.000498"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator ? prefix pattern &quot;{?a:3}/bar&quot; should match &quot;?a=fo/bar&quot;" time="0.000362"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator ? prefix pattern &quot;{?a:3}/bar&quot; should match &quot;?a=f/bar&quot;" time="0.000358"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator ? prefix pattern &quot;{?a:3}/bar&quot; should not match &quot;?a=fooo/bar&quot;" time="0.000389"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator ? prefix pattern &quot;{?a:3}/bar&quot; to_s should be == {?a:3}/bar" time="0.000130"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator ? prefix pattern &quot;{?a:3}/bar&quot; inspect should be == #&lt;Mustermann::Template:&quot;{?a:3}/bar&quot;&gt;" time="0.000150"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator ? prefix pattern &quot;{?a:3}/bar&quot; names should be a kind of Array" time="0.000152"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator ? prefix pattern &quot;{?a:3}{b}&quot; string should be immune to external change" time="0.000104"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator ? prefix pattern &quot;{?a:3}{b}&quot; should match &quot;?a=foobar&quot;" time="0.000429"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator ? prefix pattern &quot;{?a:3}{b}&quot; to_s should be == {?a:3}{b}" time="0.000128"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator ? prefix pattern &quot;{?a:3}{b}&quot; inspect should be == #&lt;Mustermann::Template:&quot;{?a:3}{b}&quot;&gt;" time="0.000147"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator ? prefix pattern &quot;{?a:3}{b}&quot; names should be a kind of Array" time="0.000153"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator ? expand pattern &quot;{?a*}&quot; string should be immune to external change" time="0.000100"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator ? expand pattern &quot;{?a*}&quot; should match &quot;?a=1&quot;" time="0.000423"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator ? expand pattern &quot;{?a*}&quot; should match &quot;?a=1&amp;a=2&quot;" time="0.000355"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator ? expand pattern &quot;{?a*}&quot; should match &quot;?a=1&amp;a=2&amp;a=3&quot;" time="0.000354"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator ? expand pattern &quot;{?a*}&quot; should not match &quot;?a=1&amp;a=2&amp;b=3&quot;" time="0.000352"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator ? expand pattern &quot;{?a*}&quot; should not match &quot;?a=1&amp;a=2&amp;a=3,&quot;" time="0.000425"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator ? expand pattern &quot;{?a*}&quot; to_s should be == {?a*}" time="0.000130"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator ? expand pattern &quot;{?a*}&quot; inspect should be == #&lt;Mustermann::Template:&quot;{?a*}&quot;&gt;" time="0.000148"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator ? expand pattern &quot;{?a*}&quot; names should be a kind of Array" time="0.000153"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator ? expand pattern &quot;{?a*,b}&quot; string should be immune to external change" time="0.000105"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator ? expand pattern &quot;{?a*,b}&quot; should match &quot;?a=1&amp;b&quot;" time="0.000584"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator ? expand pattern &quot;{?a*,b}&quot; should match &quot;?a=2&amp;a=2&amp;b=1&quot;" time="0.000365"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator ? expand pattern &quot;{?a*,b}&quot; should not match &quot;?a&amp;b&amp;c&quot;" time="0.000367"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator ? expand pattern &quot;{?a*,b}&quot; should not match &quot;?a&amp;&quot;" time="0.000351"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator ? expand pattern &quot;{?a*,b}&quot; should be == {&quot;a&quot;=&gt;[&quot;2&quot;, &quot;2&quot;], &quot;b&quot;=&gt;nil}" time="0.001929"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator ? expand pattern &quot;{?a*,b}&quot; to_s should be == {?a*,b}" time="0.000137"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator ? expand pattern &quot;{?a*,b}&quot; inspect should be == #&lt;Mustermann::Template:&quot;{?a*,b}&quot;&gt;" time="0.000205"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator ? expand pattern &quot;{?a*,b}&quot; names should be a kind of Array" time="0.000173"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator &amp; prefix pattern &quot;{&amp;a:3}/bar&quot; string should be immune to external change" time="0.000154"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator &amp; prefix pattern &quot;{&amp;a:3}/bar&quot; should match &quot;&amp;a=foo/bar&quot;" time="0.000422"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator &amp; prefix pattern &quot;{&amp;a:3}/bar&quot; should match &quot;&amp;a=fo/bar&quot;" time="0.000369"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator &amp; prefix pattern &quot;{&amp;a:3}/bar&quot; should match &quot;&amp;a=f/bar&quot;" time="0.000359"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator &amp; prefix pattern &quot;{&amp;a:3}/bar&quot; should not match &quot;&amp;a=fooo/bar&quot;" time="0.000357"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator &amp; prefix pattern &quot;{&amp;a:3}/bar&quot; to_s should be == {&amp;a:3}/bar" time="0.000130"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator &amp; prefix pattern &quot;{&amp;a:3}/bar&quot; inspect should be == #&lt;Mustermann::Template:&quot;{&amp;a:3}/bar&quot;&gt;" time="0.000467"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator &amp; prefix pattern &quot;{&amp;a:3}/bar&quot; names should be a kind of Array" time="0.000213"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator &amp; prefix pattern &quot;{&amp;a:3}{b}&quot; string should be immune to external change" time="0.000119"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator &amp; prefix pattern &quot;{&amp;a:3}{b}&quot; should match &quot;&amp;a=foobar&quot;" time="0.000545"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator &amp; prefix pattern &quot;{&amp;a:3}{b}&quot; to_s should be == {&amp;a:3}{b}" time="0.000135"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator &amp; prefix pattern &quot;{&amp;a:3}{b}&quot; inspect should be == #&lt;Mustermann::Template:&quot;{&amp;a:3}{b}&quot;&gt;" time="0.000157"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator &amp; prefix pattern &quot;{&amp;a:3}{b}&quot; names should be a kind of Array" time="0.000151"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator &amp; expand pattern &quot;{&amp;a*}&quot; string should be immune to external change" time="0.000110"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator &amp; expand pattern &quot;{&amp;a*}&quot; should match &quot;&amp;a=1&quot;" time="0.000423"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator &amp; expand pattern &quot;{&amp;a*}&quot; should match &quot;&amp;a=1&amp;a=2&quot;" time="0.000361"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator &amp; expand pattern &quot;{&amp;a*}&quot; should match &quot;&amp;a=1&amp;a=2&amp;a=3&quot;" time="0.000355"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator &amp; expand pattern &quot;{&amp;a*}&quot; should not match &quot;&amp;a=1&amp;a=2&amp;b=3&quot;" time="0.000389"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator &amp; expand pattern &quot;{&amp;a*}&quot; should not match &quot;&amp;a=1&amp;a=2&amp;a=3,&quot;" time="0.000378"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator &amp; expand pattern &quot;{&amp;a*}&quot; to_s should be == {&amp;a*}" time="0.000130"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator &amp; expand pattern &quot;{&amp;a*}&quot; inspect should be == #&lt;Mustermann::Template:&quot;{&amp;a*}&quot;&gt;" time="0.000149"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator &amp; expand pattern &quot;{&amp;a*}&quot; names should be a kind of Array" time="0.000148"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator &amp; expand pattern &quot;{&amp;a*,b}&quot; string should be immune to external change" time="0.000104"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator &amp; expand pattern &quot;{&amp;a*,b}&quot; should match &quot;&amp;a=1&amp;b&quot;" time="0.000439"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator &amp; expand pattern &quot;{&amp;a*,b}&quot; should match &quot;&amp;a=2&amp;a=2&amp;b=1&quot;" time="0.000356"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator &amp; expand pattern &quot;{&amp;a*,b}&quot; should not match &quot;&amp;a&amp;b&amp;c&quot;" time="0.000352"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator &amp; expand pattern &quot;{&amp;a*,b}&quot; should not match &quot;&amp;a&amp;&quot;" time="0.000348"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator &amp; expand pattern &quot;{&amp;a*,b}&quot; should be == {&quot;a&quot;=&gt;[&quot;2&quot;, &quot;2&quot;], &quot;b&quot;=&gt;nil}" time="0.002010"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template level 4 operator &amp; expand pattern &quot;{&amp;a*,b}&quot; should be == {&quot;a&quot;=&gt;[&quot;2&quot;, &quot; &quot;], &quot;b&quot;=&gt;nil}" time="0.000192"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator &amp; expand pattern &quot;{&amp;a*,b}&quot; to_s should be == {&amp;a*,b}" time="0.000137"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator &amp; expand pattern &quot;{&amp;a*,b}&quot; inspect should be == #&lt;Mustermann::Template:&quot;{&amp;a*,b}&quot;&gt;" time="0.000155"/>
  <testcase classname="spec.support.pattern" name="Mustermann::Template level 4 operator &amp; expand pattern &quot;{&amp;a*,b}&quot; names should be a kind of Array" time="0.000156"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template invalid syntax unexpected closing bracket" time="0.000440"/>
  <testcase classname="spec.template_spec" name="Mustermann::Template invalid syntax missing closing bracket" time="0.000498"/>
</testsuite>
